---
swagger: "2.0"
basePath: "/api/v0.2"
info:
  title: LEXIS Portal API
  description: The LEXIS Portal API serves as the API proxy to all the interfaces that interact with the parts involved in LEXIS.
  version: "0.2.2021-12-15"
  contact:
    email: diego@cyclops-labs.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

tags:
  - name: approvalSystemManagement
    description: Actions relating to management of approval system
  - name: dataSetManagement
    description: Actions relating to management of datasets and user and project management in the wp3 backend (iRODS)
  - name: usageManagement
    description: Actions relating to management of Cyclops usage
  - name: userOrgManagement
    description: Actions relating to management of users and organizations
  - name: workflowManagement
    description: Actions relating to management of Workflows and Workflow Executions
  - name: clusterInformation
    description: Actions relating to clusters and templates handled by HEAppE

securityDefinitions:
  APIKeyHeader:
    type: apiKey
    in: header
    name: X-API-KEY
  APIKeyParam:
    type: apiKey
    in: query
    name: api_key
  Keycloak:
    type: oauth2
    flow:  accessCode
    # Need to get clarity on whether these are necessary here or provided with a config file
    authorizationUrl: 'https://138.246.232.245:6443/auth'
    tokenUrl: 'https://138.246.232.245:6443/auth'

security:
  - APIKeyHeader: []
  - APIKeyParam: []
  - Keycloak: []

paths:

  /accounting/{id}/usage:
    get:
      tags:
        - usageManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Get account usage for specific project
      operationId: getUsage
      description: get account usage of project with given id
      responses:
        '200':
          description: usage returned
          schema:
            $ref: "#/definitions/Usage"
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        '404':
          description: project not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: path
          name: id
          type: string
          format: uuid
          required: true
          description: Id of project to be obtained
        - name: from
          in: query
          description: Datetime from which to get the usage report
          type: string
          format: datetime
        - name: to
          in: query
          description: Datetime until which to get the usage report
          type: string
          format: datetime

  /accounting/{id}/available:
    get:
      tags:
        - usageManagement
      produces:
        - application/json
      summary: Credit status of the account with the provided id
      operationId: getCredit
      responses:
        '200':
          description: Credit status of the account with the provided id
          schema:
            $ref: "#/definitions/CreditStatus"
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        '404':
          description: The account with the provided id doesn't exist
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: Something unexpected happend, error raised
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - name: id
          in: path
          type: string
          format: uuid
          required: true
          description: Id of the account to be checked

  /accounting/{id}/history:
    get:
      tags:
        - usageManagement
      produces:
        - application/json
      summary: Credit history of the customer with id
      operationId: getHistory
      responses:
        '200':
          description: Credit status history of the account with the provided id
          schema:
            $ref: "#/definitions/CreditHistory"
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        '404':
          description: The endpoint provided doesn't exist
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: Something unexpected happend, error raised
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - name: id
          in: path
          type: string
          format: uuid
          required: true
          description: Id of the account to get the history
        - name: filterSystem
          in: query
          type: boolean
          description: Boolean variable to control if the system consumptions have to be listed or not
        - name: medium
          in: query
          description: Medium (cash/credit) to be used as filter
          type: string
          enum:
          - credit
          - cash

  /accounting/{id}/manage/{medium}/decrease/{amount}:
    post:
      tags:
        - usageManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Insert a new reseller in the system.
      operationId: decreaseCredit
      responses:
        '200':
          description: Credit status of the account with the provided id
          schema:
            $ref: "#/definitions/CreditStatus"
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        '404':
          description: The account with the id provided doesn't exist
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: Something unexpected happend, error raised
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - name: id
          in: path
          type: string
          format: uuid
          required: true
          description: Id of the account to be checked
        - name: amount
          in: path
          description: Amount to be decreased
          required: true
          type: number
          format: double
        - name: medium
          in: path
          description: Medium (cash/credit) to be used in the accounting
          required: true
          type: string
          enum:
          - credit
          - cash

  /accounting/{id}/manage/{medium}/increase/{amount}:
    post:
      tags:
        - usageManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Insert a new reseller in the system.
      operationId: increaseCredit
      responses:
        '200':
          description: Credit status of the account with the provided id
          schema:
            $ref: "#/definitions/CreditStatus"
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        '404':
          description: The account with the id provided doesn't exist
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: Something unexpected happend, error raised
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - name: id
          in: path
          type: string
          format: uuid
          required: true
          description: Id of the account to be checked
        - name: amount
          in: path
          description: Amount to be inccreased
          required: true
          type: number
          format: double
        - name: medium
          in: path
          description: Medium (cash/credit) to be used in the accounting
          required: true
          type: string
          enum:
          - credit
          - cash

  /accounting/{id}/manage/{medium}/consume/{amount}:
    post:
      tags:
        - usageManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Adds a consumption to the system
      operationId: addConsumption
      responses:
        '200':
          description: Credit status of the account with the provided id
          schema:
            $ref: "#/definitions/CreditStatus"
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        '404':
          description: The account with the id provided doesn't exist
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: Something unexpected happend, error raised
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - name: id
          in: path
          type: string
          format: uuid
          required: true
          description: Id of the account to be checked
        - name: amount
          in: path
          description: Amount to be decreased
          required: true
          type: number
          format: double
        - name: medium
          in: path
          description: Medium (cash/credit) to be used in the accounting
          required: true
          type: string
          enum:
          - credit
          - cash

  /approval_system/resource:
    get:
      tags:
        - approvalSystemManagement
      produces:
        - application/json
      summary: List all HPC resources from approval system
      operationId: listResources
      description: lists all HPC resources from approval system
      responses:
        '200':
          description: list of HPC resources returned from from approval system
          schema:
            type: array
            items:
              $ref: "#/definitions/ApprovalSystemResource"
        '404':
          description: List of available HPC resources not found
          schema:
            $ref: "#/definitions/ApprovalSystemMissingResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ApprovalSystemErrorResponse"

  /approval_system/projectResourceRequest/{AssociatedLEXISProject}:
    get:
      tags:
        - approvalSystemManagement
      produces:
        - application/json
      summary: List all HPC resource requests for particular LEXIS project from approval system
      operationId: listProjectHPCResourceRequest
      description: lists all HPC resource requests for particular LEXIS project from approval system
      responses:
        '200':
          description: list of HPC resource requests returned for particular LEXIS project
          schema:
            type: array
            items:
              $ref: "#/definitions/ApprovalSystemResourceRequest"
        '404':
          description: The AssociatedLEXISProject ID provided does not exist.
          schema:
            $ref: "#/definitions/ApprovalSystemMissingResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ApprovalSystemErrorResponse"
      parameters:
        - in: path
          name: AssociatedLEXISProject
          type: string
          required: true
          description: LEXIS project ID

  /approval_system/projectApprovedResourceRequest/{AssociatedLEXISProject}:
    get:
      tags:
        - approvalSystemManagement
      produces:
        - application/json
      summary: List all HPC approved resource requests for particular LEXIS project from approval system
      operationId: listProjectHPCApprovedResourceRequest
      description: lists all HPC approved resource requests for particular LEXIS project from approval system
      responses:
        '200':
          description: list of HPC approved resource requests returned for particular LEXIS project
          schema:
            type: array
            items:
              $ref: "#/definitions/ApprovalSystemApprovedResourceRequest"
        '404':
          description: The AssociatedLEXISProject ID provided does not exist.
          schema:
            $ref: "#/definitions/ApprovalSystemMissingResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ApprovalSystemErrorResponse"
      parameters:
        - in: path
          name: AssociatedLEXISProject
          type: string
          required: true
          description: LEXIS project ID

  /approval_system/resourceRequest:
    post:
      tags:
        - approvalSystemManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Create HPC resource request
      operationId: CreateResourceRequest
      description: Creates a new HPC resource request in approval system
      responses:
        '201':
          description: resource request created
          schema:
            $ref: "#/definitions/ApprovalSystemCreatedResponse"
        '400':
          description: invalid input, object invalid
          schema:
            $ref: "#/definitions/ApprovalSystemInvalidResponse"
        '404':
          description: Required stuff for resource request creation hasn't been met.
          schema:
            $ref: "#/definitions/ApprovalSystemMissingResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ApprovalSystemErrorResponse"
      parameters:
        - in: body
          name: resourceRequest
          description: HPC resource request to be created
          schema:
            $ref: '#/definitions/ApprovalSystemResourceRequest'

  /approval_system/approvedResourceRequest:
    post:
      tags:
        - approvalSystemManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Create HPC approved resource request
      operationId: CreateApprovedResourceRequest
      description: Creates a new HPC approved resource request in approval system
      responses:
        '201':
          description: approved resource request created
          schema:
            $ref: "#/definitions/ApprovalSystemCreatedResponse"
        '400':
          description: invalid input, object invalid
          schema:
            $ref: "#/definitions/ApprovalSystemInvalidResponse"
        '404':
          description: Required stuff for resource request creation hasn't been met.
          schema:
            $ref: "#/definitions/ApprovalSystemMissingResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ApprovalSystemErrorResponse"
      parameters:
        - in: body
          name: approvedResourceRequest
          description: HPC approved resource request to be created
          schema:
            $ref: '#/definitions/ApprovalSystemApprovedResourceRequest'

  /approval_system/resourceRequest/{HPCResourceID}:
    get:
      tags:
        - approvalSystemManagement
      produces:
        - application/json
      summary: Get specific resource request from approval system
      operationId: HPCResourceRequest
      description: Gets a resource request by ID of associated HPC resource.
      parameters:
        - description: String ID of the HPC resource whose resource request to be obtained.
          in: path
          name: HPCResourceID
          required: true
          type: string
      responses:
        '200':
          description: HPC resource request
          schema:
            $ref: '#/definitions/ApprovalSystemResourceRequest'
        '404':
          description: Resource request not found.
          schema:
            $ref: '#/definitions/ApprovalSystemMissingResponse'
        '500':
          description: unexpected error
          schema:
            $ref: '#/definitions/ApprovalSystemErrorResponse'

  /approval_system/approvedResourceRequest/{HPCResourceID}:
    get:
      tags:
        - approvalSystemManagement
      produces:
        - application/json
      summary: Get specific approved resources request from approval system
      operationId: HPCApprovedResourceRequest
      description: Gets an HPC approved resource request by ID of associated HPC resource.
      parameters:
        - description: String ID of the HPC resource whose approved resource request to be obtained.
          in: path
          name: HPCResourceID
          required: true
          type: string
      responses:
        '200':
          description: HPC approved resource request
          schema:
            $ref: '#/definitions/ApprovalSystemApprovedResourceRequest'
        '404':
          description: Resource request not found.
          schema:
            $ref: '#/definitions/ApprovalSystemMissingResponse'
        '500':
          description: unexpected error
          schema:
            $ref: '#/definitions/ApprovalSystemErrorResponse'

  /dataset/staging/download:
    post:
      tags:
        - dataSetManagement
      consumes:
        - application/json
      produces:
        - application/json
        - application/octet-stream
      summary: Download from staging zone
      description: |
        Download from staging zone
        If you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:
         - For public datasets: "public/proj"+hash+"/"+internalID
         - For user datasets: "user/proj"+hash+"/"+user+"/"+internalID
         - For project datasets: "project/proj"+hash+"/"+internalID
      parameters:
        - in: body
          name: parameters
          required: true
          schema:
            type: object
            required:
              - source_system
              - source_path
            properties:
              source_system:
                type: string
                enum:
                  - "lrz_staging_area"
              source_path:
                type: string
      responses:
        '400':
          description: Malformed Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        '502':
          description: Bad Gateway
          schema:
            $ref: "#/definitions/ErrorResponse"
        '503':
          description: Server error
          schema:
            $ref: "#/definitions/ErrorResponse"
        '200':
          description: Successful request
          schema:
            type: file

  /dataset/compress/zip:
    post:
      tags:
        - staging
        - CompressAPI
      consumes:
        - application/json
      produces:
        - application/json
      summary: Creates a multipart zip file from a staging api source_system/source_path combination
      operationId: CompressToZip
      description: |
        Creates a multipart zip file from a staging api source_system/source_path combination
        If you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:
         - For public datasets: "public/proj"+hash+"/"+internalID
         - For user datasets: "user/proj"+hash+"/"+user+"/"+internalID
         - For project datasets: "project/proj"+hash+"/"+internalID
      parameters:
        - in: body
          name: parameters
          description: parameters
          required: true
          schema:
            type: object
            required:
              - source_system
              - source_path
              - size
            properties:
              source_system:
                type: string
                enum:
                  - "lrz_iRODS"
              source_path:
                type: string
              size:
                type: integer
      responses:
        '400':
          description: Malformed Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        '502':
          description: Bad Gateway
          schema:
            $ref: "#/definitions/ErrorResponse"
        '503':
          description: Server error
          schema:
            $ref: "#/definitions/ErrorResponse"
        '201':
          description: Request was added to the queue
          schema:
            $ref: "#/definitions/SteeringRequestID"

  /dataset/compress/zip/{request_id}:
    get:
      security: []
      tags:
        - staging
        - dataSetManagement
      produces:
        - application/json
      summary: Check the status of a transfer
      operationId: CheckCompressToZipStatus
      description: Check the status of a transfer
      parameters:
        - in: path
          name: request_id
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: This means that the status has been returned to the user in the response body.
          schema:
            type: object
            required:
              - status
            properties:
              status:
                type: string
                example: "Multipart zip created!"
              target_paths:
                type: array
                description: Multiple paths for CompressAPI endpoints
                items:
                  type: string
        '400':
          description: This means that the request ID given by the user is incorrect.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description:  This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user
          schema:
            $ref: "#/definitions/ErrorResponse"
        '404':
          description: This means that the ID doesn't exist and thus a status can't be returned.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '414':
          description: This means that the the request ID is longer than the server is willing to interpret.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"

  /dataset/download:
    post:
      tags:
        - dataSetManagement
      consumes:
        - application/json
      produces:
        - application/octet-stream
      summary: DownloadDataset
      operationId: DownloadDataset
      description: |
        Downloads a dataset. Use the header "Accept: application/octet-stream"
        or "Accept: */*" to enable the api to provide either zip content (normal
        operation) or json (error reporting).
      parameters:
        - in: body
          name: json
          description: parameters
          required: true
          schema:
            type: object
            required:
              - internalID
              - access
              - project
            properties:
              internalID:
                type: string
              access:
                $ref: '#/definitions/AccessMode'
              project:
                type: string
              push_method:
                type: string
                enum:
                  - directupload
              archivetype:
                $ref: '#/definitions/ArchiveType'
              path:
                type: string
                description: |
                  path within the dataset, without a starting slash. An empty
                  string pushes to the root of the dataset (i.e. inside the
                  directory named <internalID> in the iRODS backend).
              zone:
                type: string
      responses:
        '200':
          description: zip containing dataset
          schema:
            type: file
        '400':
          description: Malformed Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal error processing request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '502':
          description: Bad Gateway
          schema:
            $ref: '#/definitions/ErrorResponse'
        '503':
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /dataset/gridftp/gridmap:
    post:
      tags:
        - dataSetManagement
        - gridftp
      consumes:
        - application/json
      produces:
        - application/json
      summary: Add a DN entry to the DDI B2STAGE GridFTP service
      operationId: AddGridmapEntry
      description: Add a DN entry to the DDI B2STAGE GridFTP service
      parameters:
        - in: body
          name: parameters
          description: parameters
          required: true
          schema:
            type: object
            required:
              - dn
            properties:
              dn:
                type: string
              user:
                type: string
      responses:
        '201':
          description: DN added
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        '502':
          description: Bad Gateway
          schema:
            $ref: "#/definitions/ErrorResponse"
        '503':
          description: Server error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - dataSetManagement
        - gridftp
      consumes:
        - application/json
      produces:
        - application/json
      summary: Remove a DN entry to the DDI B2STAGE GridFTP service
      operationId: RemoveGridmapEntry
      description: Remove a DN entry to the DDI B2STAGE GridFTP service
      parameters:
        - in: body
          name: parameters
          description: parameters
          required: true
          schema:
            type: object
            properties:
              user:
                type: string
      responses:
        '204':
          description: DN removed
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        '502':
          description: Bad Gateway
          schema:
            $ref: "#/definitions/ErrorResponse"
        '503':
          description: Server error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /dataset/ssh/sshfsexport:
    post:
      tags:
        - dataSetManagement
        - sshfsexport
      consumes:
        - application/json
      produces:
        - application/json
      summary: Export a directory of the DDI for use via SSHFS
      operationId: CreateSSHFSExport
      description: Export a directory of the DDI for use via SSHFS
      parameters:
        - in: body
          name: parameters
          description: parameters
          required: true
          schema:
            type: object
            required:
              - host
              - pubkey
              - path
            properties:
              host:
                type: string
                example: "141.40.145.102"
              pubkey:
                type: string
              path:
                type: string
      responses:
        '201':
          description: Export created
          schema:
            type: object
            required:
              - user
              - sshfs
            properties:
              user:
                type: string
                example: "qlecvxbndl"
              sshfs:
                type: string
                example: "qlecvxbndl@lexis-test.srv.lrz.de:"
        '400':
          description: This means that there's something wrong in the input parameters and the server couldn't understand the request.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description:  This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '503':
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - dataSetManagement
        - sshfsexport
      consumes:
        - application/json
      produces:
        - application/json
      summary: Export a directory of the DDI for use via SSHFS
      operationId: DeleteSSHFSExport
      description: Remove an SSHFS export of a directory of the DDI
      parameters:
        - in: body
          name: parameters
          description: parameters
          required: true
          schema:
            type: object
            required:
              - user
              - path
            properties:
              user:
                type: string
                example: "qlecvxbndl"
              path:
                type: string
      responses:
        '204':
          description: Export removed
        '400':
          description: This means that there's something wrong in the input parameters and the server couldn't understand the request.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description:  This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '404':
          description: The resource (username, path or both) does not exist
          schema:
           $ref: "#/definitions/ErrorResponse"
        '502':
          description: bad gateway (backend service is down)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '503':
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'

  /dataset/staging/info:
    get:
      tags:
        - staging
        - dataSetManagement
      produces:
        - application/json
      summary: Lists possible target / source systems
      operationId: StagingInfo
      responses:
        '200':
          description: List of possible target / source
          schema:
            type: array
            items:
              type: string

  /dataset/staging/stage:
    post:
      tags:
        - staging
        - dataSetManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Stage a dataset or subdataset (by enqueuing the request for latter processing)
      operationId: Stage
      description: |
        Stage a dataset or subdataset (by enqueuing the request for latter processing).
        If you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:
         - For public datasets: "public/proj"+hash+"/"+internalID
         - For user datasets: "user/proj"+hash+"/"+user+"/"+internalID
         - For project datasets: "project/proj"+hash+"/"+internalID
      responses:
        '201':
          description: The response code means that the data transfer has been initiated. Status of the transfer can be checked by querying the status.
          schema:
            $ref: "#/definitions/SteeringRequestID"
        '400':
          description: This means that there's something wrong in the input parameters and the server couldn't understand the request.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description:  This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '404':
          description:  This means that either the source path or the the target path on the system doesn't exist.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '414':
          description: This means that the either the source path or the target path is longer than the server is willing to interpret.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '429':
          description: This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: body
          name: parameters
          description: parameters
          required: true
          schema:
            type: object
            required:
              - source_system
              - source_path
              - target_system
              - target_path
              - encryption
              - compression
            properties:
              metadata:
                $ref: "#/definitions/DatasetMetadata"
              source_system:
                type: string
                description: |
                  Possible values are: lrz_iRODS, lrz_staging_area, lrz_staging_area2,
                  lrz_cloud, linux_cluster, superMUC, it4i_iRODS, barbora_lustre,
                  salomon_lustre, barbora_home, salomon_home, it4i_cloud, it4i_staging_area,
                  surf_iRODS, sara_staging_area.
              target_system:
                type: string
                description: |
                  Possible values are: lrz_iRODS, lrz_staging_area, lrz_staging_area2,
                  lrz_cloud, linux_cluster, superMUC, it4i_iRODS, barbora_lustre,
                  salomon_lustre, barbora_home, salomon_home, it4i_cloud, it4i_staging_area,
                  surf_iRODS, sara_staging_area.
              source_path:
                type: string
              target_path:
                type: string
              job_id:
                type: integer
              task_id:
                type: integer
              heappe_url:
                type: string
              encryption:
                type: string
                enum:
                  - "yes"
                  - "no"
              compression:
                type: string
                enum:
                  - "yes"
                  - "no"

  /dataset/staging/delete:
    delete:
      tags:
        - staging
        - dataSetManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: This is called when a user request to delete data. This is only allowed on the staging systems.
      operationId: Delete
      description: |
        This is called when a user request to delete data. This is only allowed on the staging systems.
        If you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:
         - For public datasets: "public/proj"+hash+"/"+internalID
         - For user datasets: "user/proj"+hash+"/"+user+"/"+internalID
         - For project datasets: "project/proj"+hash+"/"+internalID
      responses:
        '201':
          description: The response code means that the data deletion has been initiated. Status of the deletion can be checked by querying the status.
          schema:
            $ref: "#/definitions/SteeringRequestID"
        '400':
          description: This means that there's something wrong in the input parameters and the server couldn't understand the request.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description:  This means that the user is not authenticated with keycloak and data deletion can't be triggered unless the user first log in with a valid user
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: This means that the resource the user is trying to delete from or to is not readable or writable by the user. User doesn't have the correct rights to delete the data on the target system location.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '404':
          description:  This means that the the target path on the system doesn't exist.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '414':
          description: This means that the the target path is longer than the server is willing to interpret.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '429':
          description: This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: body
          name: parameters
          description: parameters
          required: true
          schema:
            type: object
            required:
              - target_system
              - target_path
            properties:
              target_system:
                type: string
                description: |
                  Possible values are: lrz_iRODS, lrz_staging_area, lrz_staging_area2,
                  lrz_cloud, linux_cluster, superMUC, it4i_iRODS, barbora_lustre,
                  salomon_lustre, barbora_home, salomon_home, it4i_cloud, it4i_staging_area,
                  surf_iRODS, sara_staging_area.
              target_path:
                type: string
                description: |
                  Possible values are: lrz_iRODS, lrz_staging_area, lrz_staging_area2,
                  lrz_cloud, linux_cluster, superMUC, it4i_iRODS, barbora_lustre,
                  salomon_lustre, barbora_home, salomon_home, it4i_cloud, it4i_staging_area,
                  surf_iRODS, sara_staging_area.

  /dataset/staging/stage/{request_id}:
    get:
      security: []
      tags:
        - staging
        - dataSetManagement
      produces:
        - application/json
      summary: Check the status of a transfer
      operationId: CheckStageStatus
      description: |
        On successful query (200), the status provides information about the result:
         - "Task still in the queue, or task does not exist": The request was not yet enqueued. Wait for a few seconds and retry
         - "Task Failed, reason: <specific reason>": The dataset could not be staged
         - "Transfer completed": The transfer succeeded, and the data is in the target_path property.
         - "In progress": The transfer is in progress, wait a few seconds and retry.
      parameters:
        - in: path
          name: request_id
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: This means that the status has been returned to the user in the response body.
          schema:
            type: object
            required:
              - status
            properties:
              status:
                type: string
                example: "Transfer completed"
              target_path:
                type: string
        '400':
          description: This means that the request ID given by the user is incorrect.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description:  This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user
          schema:
            $ref: "#/definitions/ErrorResponse"
        '404':
          description: This means that the ID doesn't exist and thus a status can't be returned.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '414':
          description: This means that the the request ID is longer than the server is willing to interpret.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"

  /dataset/staging/delete/{request_id}:
    get:
      security: []
      tags:
        - staging
        - dataSetManagement
      produces:
        - application/json
      summary: Check the status of a delete request
      operationId: CheckDeletionStatus
      description: |
        On successful query (200), the status provides information about the result:
         - "Task still in the queue, or task does not exist": The request was not yet enqueued. Wait for a few seconds and retry
         - "Task Failed, reason: <specific reason>": The dataset could not be deleted
         - "Data deleted": The dataset was deleted successfully
         - "In progress": The deletion is in progress, wait a few seconds and retry.
      parameters:
        - in: path
          name: request_id
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: This means that the status has been returned to the user in the response body.
          schema:
            type: object
            required:
              - status
            properties:
              status:
                type: string
                example: "Data deleted"
        '400':
          description: This means that the request ID given by the user is incorrect.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description:  This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user
          schema:
            $ref: "#/definitions/ErrorResponse"
        '404':
          description: This means that the ID doesn't exist and thus a status can't be returned.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '414':
          description: This means that the the request ID is longer than the server is willing to interpret.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"

  /dataset/cloud/add/{param}:
    get:
      security: []
      tags:
        - staging
      produces:
        - application/json
      summary: Check the status of a nfs export add request for the cloud
      operationId: CheckCloudNFSExportAddStatus
      description: Check the status of a nfs export add request for the cloud
      parameters:
        - in: path
          name: param
          required: true
          type: string
          description: queue identifier returned by a POST request at /cloud/add/{param}
      responses:
        '200':
          description: This means that the status has been returned to the user in the response body.
          schema:
            type: object
            required:
              - status
            properties:
              status:
                type: string
        '400':
          description: This means that the request ID given by the user is incorrect.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description:  This means that the user is not authenticated with keycloak and NFS export can't be triggered unless the user first log in with a valid user
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: The IP is outside of the allowed range
          schema:
            $ref: "#/definitions/ErrorResponse"
        '404':
          description: This means that the ID doesn't exist and thus a status can't be returned.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '414':
          description: This means that the the request ID is longer than the server is willing to interpret.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      security:
      - Keycloak: []
      tags:
        - staging
      produces:
        - application/json
      summary: Request that an nfs export be created for an LRZ cloud instance
      operationId: CloudNFSExportAdd
      description: Request that an nfs export be created for an LRZ cloud instance
      parameters:
        - in: path
          name: param
          required: true
          type: string
          description: IP of the cloud machine
      responses:
        '201':
          description: The response code means that the request for addition has been initiated. Status of the addition process can be checked by querying the status.
          schema:
            $ref: "#/definitions/SteeringRequestID"
        '400':
          description: This means that the request ID given by the user is incorrect.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description:  This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: The IP is outside of the allowed range
          schema:
            $ref: "#/definitions/ErrorResponse"
        '414':
          description: This means that the the request ID is longer than the server is willing to interpret.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"

  /dataset/cloud/remove/{param}:
    get:
      security: []
      tags:
        - staging
      produces:
        - application/json
      summary: Check the status of a nfs export remove request for the cloud
      operationId: CheckCloudNFSExportRemoveStatus
      description: Check the status of a nfs export remove request for the cloud
      parameters:
        - in: path
          name: param
          required: true
          type: string
          description: queue identifier returned by a POST request at /cloud/remove/{param}
      responses:
        '200':
          description: This means that the status has been returned to the user in the response body.
          schema:
            type: object
            required:
              - status
            properties:
              status:
                type: string
        '400':
          description: This means that the request ID given by the user is incorrect.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description:  This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user
          schema:
            $ref: "#/definitions/ErrorResponse"
        '404':
          description: This means that the ID doesn't exist and thus a status can't be returned.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '414':
          description: This means that the the request ID is longer than the server is willing to interpret.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      security:
      - Keycloak: []
      tags:
        - staging
      produces:
        - application/json
      summary: Request that an nfs export be removed for an LRZ cloud instance
      operationId: CloudNFSExportRemove
      description: Request that an nfs export be removed for an LRZ cloud instance
      parameters:
        - in: path
          name: param
          required: true
          type: string
          description: IP of the cloud machine
      responses:
        '201':
          description: The response code means that the request for removal has been initiated. Status of the removal process can be checked by querying the status.
          schema:
            $ref: "#/definitions/SteeringRequestID"
        '400':
          description: This means that the request ID given by the user is incorrect.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description:  This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user
          schema:
            $ref: "#/definitions/ErrorResponse"
        '414':
          description: This means that the the request ID is longer than the server is willing to interpret.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"

  /dataset/replicate:
    post:
      tags:
        - dataSetManagement
        - EUDATReplication
      consumes:
        - application/json
      produces:
        - application/json
      summary: This is called when a user requests data to be replicated between different systems. The request will be added to the jobs queue.
      operationId: Replicate
      description: This is called when a user requests data to be replicated between different systems. The request will be added to the jobs queue.
      parameters:
        - in: body
          name: parameters
          description: parameters
          required: true
          schema:
            type: object
            required:
              - source_system
              - source_path
              - target_system
            properties:
              source_system:
                type: string
                description: |
                  Possible values are: "lrz_iRODS", "it4i_iRODS"
              target_system:
                type: string
                description: |
                  Possible values are: "lrz_iRODS", "it4i_iRODS"
              source_path:
                type: string
              target_path:
                type: string
      responses:
        '201':
          description: The response code means that the data transfer has been initiated. Status of the transfer can be checked by querying the status.
          schema:
            $ref: "#/definitions/SteeringRequestID"
        '400':
          description: This means that there's something wrong in the input parameters and the server couldn't understand the request.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description:  This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '404':
          description:  This means that either the source path or the the target path on the system doesn't exist.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '414':
          description: This means that the either the source path or the target path is longer than the server is willing to interpret.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '429':
          description: This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"

  /dataset/replicate/{request_id}:
    get:
      tags:
        - dataSetManagement
        - EUDATReplication
      produces:
        - application/json
      summary: This is called when a user requests to check the status of his data replication
      operationId: CheckReplicateStatus
      description: This is called when a user requests to check the status of his data replication
      parameters:
        - in: path
          name: request_id
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: This means that the status has been returned to the user in the response body.
          schema:
            $ref: "#/definitions/DataReplication"
        '400':
          description: This means that there's something wrong in the input parameters and the server couldn't understand the request.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description:  This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '404':
          description:  This means that either the source path or the the target path on the system doesn't exist.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '414':
          description: This means that the either the source path or the target path is longer than the server is willing to interpret.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '429':
          description: This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"

  /dataset/pid/assign:
    post:
      tags:
        - dataSetManagement
        - EUDATReplication
      consumes:
        - application/json
      produces:
        - application/json
      summary: This is called when a user requests PID assignment to a dataset.
      operationId: PID
      description: This is called when a user requests PID assignment to a dataset.
      parameters:
        - in: body
          name: parameters
          description: parameters
          required: true
          schema:
            type: object
            required:
              - source_system
              - source_path
            properties:
              parent_pid:
                type: string
              source_system:
                type: string
              source_path:
                type: string
      responses:
        '201':
          description: This is called when a user requests PID assignment to a dataset.
          schema:
            $ref: "#/definitions/SteeringRequestID"
        '400':
          description: This means that there's something wrong in the input parameters and the server couldn't understand the request.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description:  This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '404':
          description:  This means that either the source path or the the target path on the system doesn't exist.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '414':
          description: This means that the either the source path or the target path is longer than the server is willing to interpret.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '429':
          description: This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"

  /dataset/pid/{request_id}:
    get:
      tags:
        - dataSetManagement
        - EUDATReplication
      produces:
        - application/json
      summary: This is called when a user requests to check the status of the PID assignment
      operationId: CheckPIDStatus
      description: This is called when a user requests to check the status of his data replication
      parameters:
        - in: path
          name: request_id
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: This means that the status has been returned to the user in the response body.
          schema:
            $ref: "#/definitions/DataReplication"
        '400':
          description: This means that there's something wrong in the input parameters and the server couldn't understand the request.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description:  This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '404':
          description:  This means that either the source path or the the target path on the system doesn't exist.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '414':
          description: This means that the either the source path or the target path is longer than the server is willing to interpret.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '429':
          description: This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"

  /dataset:
    delete:
      tags:
        - dataSetManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Delete Dataset
      operationId: DeleteDataset
      description: Deletes a dataset by internalID (or subdataset by path)
      parameters:
        - in: body
          name: json
          description: parameter
          required: true
          schema:
            type: object
            required:
              - internalID
              - access
              - project
            properties:
              internalID:
                type: string
              access:
                $ref: '#/definitions/AccessMode'
              project:
                type: string
              path:
                type: string
                description: |
                  path within the dataset, without a starting slash. An empty
                  string pushes to the root of the dataset (i.e. inside the
                  directory named <internalID> in the iRODS backend).
              zone:
                type: string
      responses:
        '201':
          description: >-
            The delete request was enqueued. StagingAPI and requestID can be
            concatenated to obtain a query URL about this request.
          schema:
            type: object
            properties:
              internalID:
                type: string
              stagingAPI:
                type: string
              request_id:
                type: string
        '204':
          description: Dataset does not exist
        '400':
          description: Malformed Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal error processing request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '502':
          description: Bad Gateway
          schema:
            $ref: '#/definitions/ErrorResponse'
        '503':
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - dataSetManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Create a dataset
      operationId: createDataset
      description: Creates a new dataset
      responses:
        '201':
          description: dataset created
          schema:
            $ref: '#/definitions/DatasetItemCreatedResponse'
        '200':
          description: dataset modified
          schema:
            $ref: '#/definitions/DatasetItemCreatedResponse'
        '400':
          description: 'invalid input, object invalid'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: User not authorized to perform action
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
        '502':
          description: Bad Gateway
          schema:
            $ref: '#/definitions/ErrorResponse'
        '503':
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
      parameters:
        - in: body
          name: dataset
          description: parameters
          required: true
          schema:
            type: object
            required:
              - push_method
              - access
              - project
            properties:
              path:
                type: string
                description: |
                  path within the dataset, without a starting slash. An empty
                  string pushes to the root of the dataset (i.e. inside the
                  directory named <internalID> in the iRODS backend).
              push_method:
                $ref: '#/definitions/PushMethod'
              compress_method:
                $ref: '#/definitions/CompressMethod'
              file:
                type: string
                description: |
                  - If pushmethod is directupload, json-escaped, base64-encoded
                  file or zip (depending on compress_method).
                  - If pushmethod is tus, url from the Location returned by the
                  previous tus call.
              name:
                type: string
                description: name of the file if compress_method is file, or if using pushmethod tus.
              internalID:
                type: string
              access:
                $ref: '#/definitions/AccessMode'
              project:
                type: string
              metadata:
                $ref: '#/definitions/DatasetMetadata'
              enc:
                type: string
                enum:
                  - "yes"
                  - "no"
              comp:
                type: string
                enum:
                  - "yes"
                  - "no"
              zone:
                type: string

  /dataset/search/metadata:
    post:
      tags:
        - dataSetManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Search for datasets based on metadata
      operationId: QueryDatasets
      description: Search for datasets based on metadata
      responses:
        '200':
          description: Metadata for matching datasets returned
          schema:
            type: array
            items:
              $ref: '#/definitions/DatasetMetadataQueryResponse'
        '400':
          description: Malformed Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal error processing request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '502':
          description: Bad Gateway
          schema:
            $ref: '#/definitions/ErrorResponse'
        '503':
          description: unexpected error connecting to further backends
          schema:
            $ref: '#/definitions/ErrorResponse'
      parameters:
        - in: body
          name: metadataQuery
          required: true
          schema:
            $ref: '#/definitions/DatasetMetadataQuery'
          description: metadata relating to dataset which is being searched for
    delete:
      tags:
        - dataSetManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: 'Search for datasets based on metadata, and delete them'
      operationId: DeleteDatasetByMetadata
      description: 'Search for datasets based on metadata, and delete them'
      responses:
        '204':
          description: datasets were deleted
        '400':
          description: Malformed Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: The user does not have permission to remove dataset
          schema:
            type: object
            required:
              - errorString
            properties:
              errorString:
                type: string
              permission_error:
                type: array
                items:
                  type: object
                  required:
                    - internalID
                  properties:
                    internalID:
                      type: string
        '500':
          description: Internal error processing request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '502':
          description: Bad Gateway
          schema:
            $ref: '#/definitions/ErrorResponse'
        '503':
          description: unexpected error connecting to further backends
          schema:
            $ref: '#/definitions/ErrorResponse'
      parameters:
        - in: body
          name: metadataQuery
          required: true
          schema:
            $ref: '#/definitions/DatasetMetadataQuery'
          description: metadata relating to dataset which is being searched for

  /dataset/checkpermission:
    post:
      tags:
        - dataSetManagement
      consumes:
        - application/json
      summary: Check if a user has permission to access a DDI location for writing
      description: Check if a user has permission to access a DDI location for writing
      operationId: CheckPermission
      parameters:
        - in: body
          name: Access
          required: true
          schema:
            type: object
            required:
              - access
              - project
            properties:
              access:
                $ref: '#/definitions/AccessMode'
              project:
                type: string
                example: wp6
      responses:
        '200':
          description: User has permission to write
          schema:
            type: object
            required:
              - status
            properties:
              status:
                type: string
                pattern: '200'
                example: '200'
        '400':
          description: Malformed request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: User does not have permission
          schema:
            $ref: '#/definitions/ErrorResponse'
        '502':
          description: Bad Gateway
          schema:
            $ref: '#/definitions/ErrorResponse'
        '503':
          description: Error accessing backend service
          schema:
            $ref: '#/definitions/ErrorResponse'

  /dataset/listing:
    post:
      tags:
        - dataSetManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: List file contents of a dataset.
      operationId: Listing
      description: List file contents of a dataset.
      parameters:
        - in: body
          name: json
          description: parameter
          required: true
          schema:
            type: object
            required:
              - internalID
              - access
              - project
            properties:
              internalID:
                type: string
              access:
                $ref: '#/definitions/AccessMode'
              project:
                type: string
              path:
                type: string
                default: ""
                description: |
                  path within the dataset, without a starting slash. An empty
                  string pushes to the root of the dataset (i.e. inside the
                  directory named <internalID> in the iRODS backend).
              recursive:
                type: boolean
                default: true
              zone:
                type: string
      responses:
        '200':
          description: Content of the dataset
          schema:
            $ref: '#/definitions/DatasetContent'
        '400':
          description: Malformed request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authorization failed
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: User does not have permission
          schema:
            $ref: '#/definitions/ErrorResponse'
        '502':
          description: Bad Gateway
          schema:
            $ref: '#/definitions/ErrorResponse'
        '503':
          description: Error accessing backend service
          schema:
            $ref: '#/definitions/ErrorResponse'

  /dataset/upload/:
    parameters:
      - in: header
        name: Tus-Resumable
        type: string
        enum:
          - "1.0.0"
        required: true
        description: Protocol version
    post:
      tags:
        - dataSetManagement
      summary: An empty POST request is used to create a new upload resource. The Upload-Length header indicates the size of the entire upload in bytes.
      description: Endpoint for the Creation extension
      parameters:
        - in: header
          name: Content-Length
          type: integer
          description: Must be 0 for creation extension. May be a positive number for creation-with-upload extension.
        - in: header
          name: Upload-Length
          type: integer
          description: "The Upload-Length request and response header indicates the size of the entire upload in bytes. The value MUST be a non-negative integer. In the concatenation extension, the Client MUST NOT include the Upload-Length header in the final upload creation"
          required: false
        - in: header
          name: Upload-Metadata
          type: string
          description: "Added by the Creation extension. The Upload-Metadata request and response header MUST consist of one or more comma-separated key-value pairs. The key and value MUST be separated by a space. The key MUST NOT contain spaces and commas and MUST NOT be empty. The key SHOULD be ASCII encoded and the value MUST be Base64 encoded. All keys MUST be unique. The value MAY be empty. In these cases, the space, which would normally separate the key and the value, MAY be left out. Since metadata can contain arbitrary binary values, Servers SHOULD carefully validate metadata values or sanitize them before using them as header values to avoid header smuggling."
          required: false
        - in: header
          name: Upload-Concat
          type: string
          description: "Added by the Concatenation extension. The Upload-Concat request and response header MUST be set in both partial and final upload creation requests. It indicates whether the upload is either a partial or final upload. If the upload is a partial one, the header value MUST be partial. In the case of a final upload, its value MUST be final followed by a semicolon and a space-separated list of partial upload URLs that will be concatenated. The partial uploads URLs MAY be absolute or relative and MUST NOT contain spaces as defined in RFC 3986."
          required: false
        - in: header
          name: Upload-Defer-Length
          type: integer
          enum:
            - 1
          description: "Added by the creation-defer-length extension. The Upload-Defer-Length request and response header indicates that the size of the upload is not known currently and will be transferred later. Its value MUST be 1. If the length of an upload is not deferred, this header MUST be omitted."
          required: false
        - in: header
          name: Upload-offset
          type: integer
          required: false
        - in: header
          name: Upload-Checksum
          type: string
          description: Added by the checksum extension. The Upload-Checksum request header contains information about the checksum of the current body payload. The header MUST consist of the name of the used checksum algorithm and the Base64 encoded checksum separated by a space.
          required: false

      responses:
        201:
          description: Created
          headers:
            Access-Control-Expose-Headers:
              type: string
              description: |
                Needed to make browsers accept the additional headers used by
                the tus protocol.
              enum:
                - "Location, Tus-Resumable, Upload-Offset, Upload-Expires"
            Location:
              type: string
              description: Url of the created resource.
            Tus-Resumable:
              type: string
              enum:
                - "1.0.0"
            Upload-Offset:
              type: integer
              description: Added by the Creation With Upload Extension. The Upload-Offset request and response header indicates a byte offset within a resource. The value MUST be a non-negative integer.
            Upload-Expires:
              type: string
              description: "Added by the Creation With Upload Extension in combination with the expiration extension. The Upload-Expires response header indicates the time after which the unfinished upload expires. A Server MAY wish to remove incomplete uploads after a given period of time to prevent abandoned uploads from taking up extra storage. The Client SHOULD use this header to determine if an upload is still valid before attempting to resume the upload. This header MUST be included in every PATCH response if the upload is going to expire. If the expiration is known at the creation, the Upload-Expires header MUST be included in the response to the initial POST request. Its value MAY change over time. If a Client does attempt to resume an upload which has since been removed by the Server, the Server SHOULD respond with the 404 Not Found or 410 Gone status. The latter one SHOULD be used if the Server is keeping track of expired uploads. In both cases the Client SHOULD start a new upload. The value of the Upload-Expires header MUST be in RFC 7231 datetime format."
        '401':
          description: Authorization failed
          schema:
            $ref: '#/definitions/ErrorResponse'
        413:
          description: If the length of the upload exceeds the maximum, which MAY be specified using the Tus-Max-Size header, the Server MUST respond with the 413 Request Entity Too Large status.
          headers:
            Access-Control-Expose-Headers:
              type: string
              description: |
                Needed to make browsers accept the additional headers used by
                the tus protocol.
              enum:
                - "Tus-Resumable"
            Tus-Resumable:
              type: string
              enum:
                - "1.0.0"
        '503':
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ErrorResponse'
        412:
          description: Precondition Failed
          headers:
            Access-Control-Expose-Headers:
              type: string
              description: |
                Needed to make browsers accept the additional headers used by
                the tus protocol.
              enum:
                - "Tus-Resumable, Tus-Version"
            Tus-Resumable:
              type: string
              enum:
                - "1.0.0"
            Tus-Version:
              type: string
              description: The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one.
        '415':
          description: Added by the Creation With Upload Extension. Content-Type was not application/offset+octet-stream
          headers:
            Access-Control-Expose-Headers:
              type: string
              description: |
                Needed to make browsers accept the additional headers used by
                the tus protocol.
              enum:
                - "Tus-Resumable"
            Tus-Resumable:
              type: string
              enum:
                - "1.0.0"
              description: Protocol version
        '400':
          description: "Added by the Creation With Upload Extension in combination with the checksum extension. The checksum algorithm is not supported by the server"
          headers:
            Access-Control-Expose-Headers:
              type: string
              description: |
                Needed to make browsers accept the additional headers used by
                the tus protocol.
              enum:
                - "Tus-Resumable"
            Tus-Resumable:
              type: string
              enum:
                - "1.0.0"
              description: Protocol version
        '460':
          description: "Added by the Creation With Upload Extension in combination with the checksum extension. Checksums mismatch"
          headers:
            Access-Control-Expose-Headers:
              type: string
              description: |
                Needed to make browsers accept the additional headers used by
                the tus protocol.
              enum:
                - "Tus-Resumable"
            Tus-Resumable:
              type: string
              enum:
                - "1.0.0"
              description: Protocol version
    options:
      tags:
        - dataSetManagement
      summary:  Request to gather information about the Server's current configuration
      description: An OPTIONS request MAY be used to gather information about the Server's current configuration. A successful response indicated by the 204 No Content or 200 OK status MUST contain the Tus-Version header. It MAY include the Tus-Extension and Tus-Max-Size headers.
      responses:
        200:
          description: Success
          headers:
            Access-Control-Expose-Headers:
              type: string
              description: |
                Needed to make browsers accept the additional headers used by
                the tus protocol.
              enum:
                - "Tus-Version, Tus-Resumable, Tus-Max-Size, Tus-Extension, Tus-Checksum-Algorithm"
            Tus-Version:
              type: string
              description: The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one.
            Tus-Resumable:
              type: string
              enum:
                - "1.0.0"
              description: Protocol version
            Tus-Max-Size:
              type: integer
              description: The Tus-Max-Size response header MUST be a non-negative integer indicating the maximum allowed size of an entire upload in bytes. The Server SHOULD set this header if there is a known hard limit.
            Tus-Extension:
              type: string
              description: The Tus-Extension response header MUST be a comma-separated list of the extensions supported by the Server. If no extensions are supported, the Tus-Extension header MUST be omitted.
            Tus-Checksum-Algorithm:
              type: string
              description: Added by the checksum extension. The Tus-Checksum-Algorithm response header MUST be a comma-separated list of the checksum algorithms supported by the server.
        204:
          description: Success
          headers:
            Access-Control-Expose-Headers:
              type: string
              description: |
                Needed to make browsers accept the additional headers used by
                the tus protocol.
              enum:
                - "Tus-Version, Tus-Resumable, Tus-Max-Size, Tus-Extension, Tus-Checksum-Algorithm"
            Tus-Version:
              type: string
              description: The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one.
            Tus-Resumable:
              type: string
              enum:
                - "1.0.0"
            Tus-Max-Size:
              type: integer
              description: The Tus-Max-Size response header MUST be a non-negative integer indicating the maximum allowed size of an entire upload in bytes. The Server SHOULD set this header if there is a known hard limit.
            Tus-Extension:
              type: string
              description: The Tus-Extension response header MUST be a comma-separated list of the extensions supported by the Server. If no extensions are supported, the Tus-Extension header MUST be omitted.
            Tus-Checksum-Algorithm:
              type: string
              description: Added by the checksum extension. The Tus-Checksum-Algorithm response header MUST be a comma-separated list of the checksum algorithms supported by the server.
        '401':
          description: Authorization failed
          schema:
            $ref: '#/definitions/ErrorResponse'
        '503':
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ErrorResponse'
  /dataset/upload/{id}:
    parameters:
        - in: path
          name: id
          type: string
          required: true
        - in: header
          name: Tus-Resumable
          type: string
          enum:
            - "1.0.0"
          required: true
          description: Protocol version
    delete:
      tags:
        - dataSetManagement
      summary: Added by the Termination extension.
      operationId: FilesDelete
      description: When receiving a DELETE request for an existing upload the Server SHOULD free associated resources and MUST respond with the 204 No Content status confirming that the upload was terminated. For all future requests to this URL, the Server SHOULD respond with the 404 Not Found or 410 Gone status.
      responses:
        204:
          description: Upload was terminated
          headers:
            Access-Control-Expose-Headers:
              type: string
              description: |
                Needed to make browsers accept the additional headers used by
                the tus protocol.
              enum:
                - "Tus-Resumable"
            Tus-Resumable:
              type: string
              enum:
                - "1.0.0"
              description: Protocol version
        '401':
          description: Authorization failed
          schema:
            $ref: '#/definitions/ErrorResponse'
        '503':
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ErrorResponse'
        412:
          description: Precondition Failed
          headers:
            Access-Control-Expose-Headers:
              type: string
              description: |
                Needed to make browsers accept the additional headers used by
                the tus protocol.
              enum:
                - "Tus-Resumable, Tus-Version"
            Tus-Resumable:
              type: string
              enum:
                - "1.0.0"
              description: Protocol version
            Tus-Version:
              type: string
              description: The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one.

    head:
      tags:
        - dataSetManagement
      summary: Used to determine the offset at which the upload should be continued.
      operationId: FilesHead
      description: Used to determine the offset at which the upload should be continued.
      responses:
        '200':
          description: Returns offset
          headers:
            Access-Control-Expose-Headers:
              type: string
              description: |
                Needed to make browsers accept the additional headers used by
                the tus protocol.
              enum:
                - "Upload-Offset, Upload-Length, Tus-Resumable"
            Upload-Offset:
              type: integer
              description: The Upload-Offset request and response header indicates a byte offset within a resource. The value MUST be a non-negative integer. Offset at which the upload should be continued.
            Upload-Length:
               type: integer
               description: If the size of the upload is known, the Server MUST include the Upload-Length header in the response.
            Tus-Resumable:
              type: string
              enum:
                - "1.0.0"
              description: Protocol version
            Cache-Control:
              type: string
              enum:
                - "no-store"
        '401':
          description: Authorization failed
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: If the resource is not found, the Server SHOULD return either the 404 Not Found, 410 Gone or 403 Forbidden status without the Upload-Offset header.
          headers:
            Access-Control-Expose-Headers:
              type: string
              description: |
                Needed to make browsers accept the additional headers used by
                the tus protocol.
              enum:
                - "Tus-Resumable"
            Tus-Resumable:
              type: string
              enum:
                - "1.0.0"
              description: Protocol version
        '410':
          description: If the resource is not found, the Server SHOULD return either the 404 Not Found, 410 Gone or 403 Forbidden status without the Upload-Offset header.
          headers:
            Access-Control-Expose-Headers:
              type: string
              description: |
                Needed to make browsers accept the additional headers used by
                the tus protocol.
              enum:
                - "Tus-Resumable"
            Tus-Resumable:
              type: string
              enum:
                - "1.0.0"
              description: Protocol version
        '403':
          description: If the resource is not found, the Server SHOULD return either the 404 Not Found, 410 Gone or 403 Forbidden status without the Upload-Offset header.
          headers:
            Access-Control-Expose-Headers:
              type: string
              description: |
                Needed to make browsers accept the additional headers used by
                the tus protocol.
              enum:
                - "Tus-Resumable"
            Tus-Resumable:
              type: string
              enum:
                - "1.0.0"
              description: Protocol version
        '503':
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ErrorResponse'
        412:
          description: Precondition Failed
          headers:
            Access-Control-Expose-Headers:
              type: string
              description: |
                Needed to make browsers accept the additional headers used by
                the tus protocol.
              enum:
                - "Tus-Resumable, Tus-Version"
            Tus-Version:
              type: string
              description: The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one.
            Tus-Resumable:
              type: string
              enum:
                - "1.0.0"
              description: Protocol version
    patch:
      tags:
        - dataSetManagement
      summary: Used to resume the upload
      operationId: FilePatch
      description: "The Server SHOULD accept PATCH requests against any upload URL and apply the bytes contained in the message at the given offset specified by the Upload-Offset header. All PATCH requests MUST use Content-Type: application/offset+octet-stream, otherwise the server SHOULD return a 415 Unsupported Media Type status."
      consumes:
        - application/offset+octet-stream
      parameters:
        - in: body
          name: Body
          schema:
            type: string
        - in: header
          name: Content-Length
          type: integer
          required: true
        - in: header
          name: Upload-offset
          type: integer
          required: true
          description: The Upload-Offset request and response header indicates a byte offset within a resource. The value MUST be a non-negative integer.
        - in: header
          name: Upload-Checksum
          type: string
          description: Added by the checksum extension. The Upload-Checksum request header contains information about the checksum of the current body payload. The header MUST consist of the name of the used checksum algorithm and the Base64 encoded checksum separated by a space.
      responses:
        '204':
          description: Upload offset was updated
          headers:
            Access-Control-Expose-Headers:
              type: string
              description: |
                Needed to make browsers accept the additional headers used by
                the tus protocol.
              enum:
                - "Tus-Resumable, Upload-Offset, Upload-Expires"
            Upload-Offset:
              type: integer
              description: The Upload-Offset request and response header indicates a byte offset within a resource. The value MUST be a non-negative integer.
            Tus-Resumable:
              type: string
              enum:
                - "1.0.0"
              description: Protocol version
            Upload-Expires:
              type: string
              description: "Added by the expiration extension. The Upload-Expires response header indicates the time after which the unfinished upload expires. A Server MAY wish to remove incomplete uploads after a given period of time to prevent abandoned uploads from taking up extra storage. The Client SHOULD use this header to determine if an upload is still valid before attempting to resume the upload. This header MUST be included in every PATCH response if the upload is going to expire. If the expiration is known at the creation, the Upload-Expires header MUST be included in the response to the initial POST request. Its value MAY change over time. If a Client does attempt to resume an upload which has since been removed by the Server, the Server SHOULD respond with the 404 Not Found or 410 Gone status. The latter one SHOULD be used if the Server is keeping track of expired uploads. In both cases the Client SHOULD start a new upload. The value of the Upload-Expires header MUST be in RFC 7231 datetime format."
        '401':
          description: Authorization failed
          schema:
            $ref: '#/definitions/ErrorResponse'
        '415':
          description: Content-Type was not application/offset+octet-stream
          headers:
            Access-Control-Expose-Headers:
              type: string
              description: |
                Needed to make browsers accept the additional headers used by
                the tus protocol.
              enum:
                - "Tus-Resumable"
            Tus-Resumable:
              type: string
              enum:
                - "1.0.0"
              description: Protocol version
        '404':
          description: PATCH request against a non-existent resource
          headers:
            Access-Control-Expose-Headers:
              type: string
              description: |
                Needed to make browsers accept the additional headers used by
                the tus protocol.
              enum:
                - "Tus-Resumable"
            Tus-Resumable:
              type: string
              enum:
                - "1.0.0"
              description: Protocol version
        '410':
          description: PATCH request against a non-existent resource
          headers:
            Access-Control-Expose-Headers:
              type: string
              description: |
                Needed to make browsers accept the additional headers used by
                the tus protocol.
              enum:
                - "Tus-Resumable"
            Tus-Resumable:
              type: string
              enum:
                - "1.0.0"
              description: Protocol version
        '403':
          description: "In the concatenation extension, the Server MUST respond with the 403 Forbidden status to PATCH requests against a final upload URL and MUST NOT modify the final or its partial uploads."
          headers:
            Access-Control-Expose-Headers:
              type: string
              description: |
                Needed to make browsers accept the additional headers used by
                the tus protocol.
              enum:
                - "Tus-Resumable"
            Tus-Resumable:
              type: string
              enum:
                - "1.0.0"
              description: Protocol version
        '400':
          description: "Added by the checksum extension. The checksum algorithm is not supported by the server"
          headers:
            Access-Control-Expose-Headers:
              type: string
              description: |
                Needed to make browsers accept the additional headers used by
                the tus protocol.
              enum:
                - "Tus-Resumable"
            Tus-Resumable:
              type: string
              enum:
                - "1.0.0"
              description: Protocol version
        '460':
          description: "Added by the checksum extension. Checksums mismatch"
          headers:
            Access-Control-Expose-Headers:
              type: string
              description: |
                Needed to make browsers accept the additional headers used by
                the tus protocol.
              enum:
                - "Tus-Resumable"
            Tus-Resumable:
              type: string
              enum:
                - "1.0.0"
              description: Protocol version
        '503':
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ErrorResponse'
        412:
          description: Precondition Failed
          headers:
            Access-Control-Expose-Headers:
              type: string
              description: |
                Needed to make browsers accept the additional headers used by
                the tus protocol.
              enum:
                - "Tus-Resumable, Tus-Version"
            Tus-Resumable:
              type: string
              enum:
                - "1.0.0"
              description: Protocol version
            Tus-Version:
              type: string
              description: The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one.

  /dataset/data/size:
    post:
      tags:
        - dataSetManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: This is called when a user requests size of a dataset.
      operationId: Size
      description: |
        This is called when a user requests size of a dataset.
        If you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:
         - For public datasets: "public/proj"+hash+"/"+internalID
         - For user datasets: "user/proj"+hash+"/"+user+"/"+internalID
         - For project datasets: "project/proj"+hash+"/"+internalID
      parameters:
        - in: body
          name: parameters
          description: parameters
          required: true
          schema:
            type: object
            required:
              - target_system
              - target_path
            properties:
              target_system:
                type: string
                description: |
                  Possible values are: "lrz_iRODS", "it4i_iRODS"
              target_path:
                type: string
                description: |
                  Possible values are: "lrz_iRODS", "it4i_iRODS"
      responses:
        '201':
          description: This is called when a user requests size of a dataset.
          schema:
            $ref: "#/definitions/SteeringRequestID"
        '400':
          description: This means that there's something wrong in the input parameters and the server couldn't understand the request.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description:  This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '404':
          description:  This means that either the source path or the the target path on the system doesn't exist.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '414':
          description: This means that the either the source path or the target path is longer than the server is willing to interpret.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '429':
          description: This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"

  /dataset/data/size/{request_id}:
    get:
      tags:
        - dataSetManagement
      produces:
        - application/json
      summary: This is called when a user requests to check the status of datasize request
      operationId: CheckSizeStatus
      description: This is called when a user requests to check the status of datasize request
      parameters:
        - in: path
          name: request_id
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: This means that the status has been returned to the user in the response body.
          schema:
            $ref: "#/definitions/DataSize"
        '400':
          description: This means that there's something wrong in the input parameters and the server couldn't understand the request.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description:  This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '404':
          description:  This means that either the source path or the the target path on the system doesn't exist.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '414':
          description: This means that the either the source path or the target path is longer than the server is willing to interpret.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '429':
          description: This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"

  /dataset/duplicate:
    post:
      tags:
        - staging
        - dataSetManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Duplicate a dataset or subdataset (by enqueuing the request for latter processing)
      operationId: Duplicate
      description: Duplicate a dataset or subdataset (by enqueuing the request for latter processing)
      responses:
        '201':
          description: The response code means that the duplication has been initiated. Status of the transfer can be checked by querying the status.
          schema:
            $ref: "#/definitions/SteeringRequestID"
        '400':
          description: This means that there's something wrong in the input parameters and the server couldn't understand the request.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description:  This means that the user is not authenticated with keycloak and duplication can't be triggered unless the user first log in with a valid user
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: This means that the resource the user is trying to duplicate from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '404':
          description:  This means that either the source path or the the target path on the system doesn't exist.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '414':
          description: This means that the either the source path or the target path is longer than the server is willing to interpret.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '429':
          description: This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: body
          name: parameters
          description: parameters
          required: true
          schema:
            type: object
            required:
              - source_system
              - source_path
            properties:
              source_system:
                type: string
                description: |
                  Possible values are: "lrz_iRODS", "it4i_iRODS"
              target_system:
                type: string
                description: |
                  Possible values are: "lrz_iRODS", "it4i_iRODS"
              source_path:
                type: string
              target_path:
                type: string
              title:
                type: string
                description: |
                  Title of the new dataset (if not provided, the new title will
                  be "Copy of " and the old dataset title).

  /dataset/duplicate/{request_id}:
    get:
      security: []
      tags:
        - staging
        - dataSetManagement
      produces:
        - application/json
      summary: Check the status of duplication
      operationId: CheckDuplicationStatus
      description: |
        Check the status of duplication. The status is given as:
        - "Task still in the queue, or task does not exist": wait and retry.
        - "In progress": wait and retry.
        - "Task Failed, reason: <specific reason>": failure
        - "Duplication completed": success; target_path provides the path.
      parameters:
        - in: path
          name: request_id
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: This means that the status has been returned to the user in the response body.
          schema:
            type: object
            required:
              - status
            properties:
              status:
                type: string
              target_path:
                type: string
                description: Single path for staging endpoints
        '400':
          description: This means that the request ID given by the user is incorrect.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description:  This means that the user is not authenticated with keycloak and duplication can't be triggered unless the user first log in with a valid user
          schema:
            $ref: "#/definitions/ErrorResponse"
        '404':
          description: This means that the ID doesn't exist and thus a status can't be returned.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '414':
          description: This means that the the request ID is longer than the server is willing to interpret.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"


  /dataset/encryption/encrypt:
    post:
      tags:
        - dataSetManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Encrypt a dataset or subdataset (by enqueuing the request for latter processing)
      operationId: Encrypt
      description: |
        Encrypt a dataset or subdataset (by enqueuing the request for latter processing)
        If you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:
         - For public datasets: "public/proj"+hash+"/"+internalID
         - For user datasets: "user/proj"+hash+"/"+user+"/"+internalID
         - For project datasets: "project/proj"+hash+"/"+internalID
      responses:
        '201':
          description: The response code means that the encryption has been initiated. Status of the operation can be checked by querying the status.
          schema:
            $ref: "#/definitions/SteeringRequestID"
        '400':
          description: This means that there's something wrong in the input parameters and the server couldn't understand the request.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description:  This means that the user is not authenticated with keycloak and encryption can't be triggered unless the user first log in with a valid user
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: This means that the resource the user is trying to encrypt from or to is not readable. User doesn't have the correct rights to read the source file.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '404':
          description:  This means that the source path on the system doesn't exist.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '414':
          description: This means that the source path is longer than the server is willing to interpret.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '429':
          description: This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: body
          name: parameters
          description: parameters
          required: true
          schema:
            type: object
            required:
              - source_system
              - source_path
              - project
            properties:
              source_system:
                type: string
              source_path:
                type: string
              project:
                type: string

  /dataset/encryption/decrypt:
    post:
      tags:
        - dataSetManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Decrypt a dataset or subdataset (by enqueuing the request for latter processing)
      operationId: Decrypt
      description: |
        Decrypt a dataset or subdataset (by enqueuing the request for latter processing)
        If you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:
         - For public datasets: "public/proj"+hash+"/"+internalID
         - For user datasets: "user/proj"+hash+"/"+user+"/"+internalID
         - For project datasets: "project/proj"+hash+"/"+internalID
      responses:
        '201':
          description: The response code means that the decryption has been initiated. Status of the operation can be checked by querying the status.
          schema:
            $ref: "#/definitions/SteeringRequestID"
        '400':
          description: This means that there's something wrong in the input parameters and the server couldn't understand the request.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description:  This means that the user is not authenticated with keycloak and decryption can't be triggered unless the user first log in with a valid user
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: This means that the resource the user is trying to decrypt from or to is not readable. User doesn't have the correct rights to read the source file.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '404':
          description:  This means that the source path on the system doesn't exist.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '414':
          description: This means that the either the source path is longer than the server is willing to interpret.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '429':
          description: This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: body
          name: parameters
          description: parameters
          required: true
          schema:
            type: object
            required:
              - source_system
              - source_path
              - project
            properties:
              source_system:
                type: string
              source_path:
                type: string
              project:
                type: string

  /dataset/encryption/compress:
    post:
      tags:
        - dataSetManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Compress a dataset or subdataset (by enqueuing the request for latter processing)
      operationId: Compress
      description: |
        Compress a dataset or subdataset (by enqueuing the request for latter processing)
        If you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:
         - For public datasets: "public/proj"+hash+"/"+internalID
         - For user datasets: "user/proj"+hash+"/"+user+"/"+internalID
         - For project datasets: "project/proj"+hash+"/"+internalID
      responses:
        '201':
          description: The response code means that the compression has been initiated. Status of the operation can be checked by querying the status.
          schema:
            $ref: "#/definitions/SteeringRequestID"
        '400':
          description: This means that there's something wrong in the input parameters and the server couldn't understand the request.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description:  This means that the user is not authenticated with keycloak and compression can't be triggered unless the user first log in with a valid user
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: This means that the resource the user is trying to compress is not readable. User doesn't have the correct rights to read the source file.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '404':
          description:  This means that the source path on the system doesn't exist.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '414':
          description: This means that the either the source path is longer than the server is willing to interpret.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '429':
          description: This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: body
          name: parameters
          description: parameters
          required: true
          schema:
            type: object
            required:
              - source_system
              - source_path
            properties:
              source_system:
                type: string
              source_path:
                type: string

  /dataset/encryption/decompress:
    post:
      tags:
        - dataSetManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Decompress a dataset or subdataset (by enqueuing the request for latter processing)
      operationId: Decompress
      description: |
        Decompress a dataset or subdataset (by enqueuing the request for latter processing)
        If you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:
         - For public datasets: "public/proj"+hash+"/"+internalID
         - For user datasets: "user/proj"+hash+"/"+user+"/"+internalID
         - For project datasets: "project/proj"+hash+"/"+internalID
      responses:
        '201':
          description: The response code means that the decompression has been initiated. Status of the operation can be checked by querying the status.
          schema:
            $ref: "#/definitions/SteeringRequestID"
        '400':
          description: This means that there's something wrong in the input parameters and the server couldn't understand the request.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description:  This means that the user is not authenticated with keycloak and decompression can't be triggered unless the user first log in with a valid user
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: This means that the resource the user is trying to compress is not readable by the user. User doesn't have the correct rights to read the source file.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '404':
          description:  This means that either the source path on the system doesn't exist.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '414':
          description: This means that the either the source path is longer than the server is willing to interpret.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '429':
          description: This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: body
          name: parameters
          description: parameters
          required: true
          schema:
            type: object
            required:
              - source_system
              - source_path
            properties:
              source_system:
                type: string
              source_path:
                type: string

  /dataset/encryption/compress_encrypt:
    post:
      tags:
        - dataSetManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Compress and encrypt a dataset or subdataset (by enqueuing the request for latter processing)
      operationId: CompressEncrypt
      description: |
        Compress and encrypt a dataset or subdataset (by enqueuing the request for latter processing)
        If you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:
         - For public datasets: "public/proj"+hash+"/"+internalID
         - For user datasets: "user/proj"+hash+"/"+user+"/"+internalID
         - For project datasets: "project/proj"+hash+"/"+internalID
      responses:
        '201':
          description: The response code means that the compression and encryption has been initiated. Status of the operation can be checked by querying the status.
          schema:
            $ref: "#/definitions/SteeringRequestID"
        '400':
          description: This means that there's something wrong in the input parameters and the server couldn't understand the request.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description:  This means that the user is not authenticated with keycloak and compression with encryption can't be triggered unless the user first log in with a valid user
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: This means that the resource the user is trying to compress and encrypt is not readable by the user. User doesn't have the correct rights to read the source file.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '404':
          description:  This means that either the source path on the system doesn't exist.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '414':
          description: This means that the source path is longer than the server is willing to interpret.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '429':
          description: This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: body
          name: parameters
          description: parameters
          required: true
          schema:
            type: object
            required:
              - source_system
              - source_path
              - project
            properties:
              source_system:
                type: string
              source_path:
                type: string
              project:
                type: string

  /dataset/encryption/decrypt_decompress:
    post:
      tags:
        - dataSetManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Decrypt and decompress a dataset or subdataset (by enqueuing the request for latter processing)
      operationId: DecryptDecompress
      description: |
        Decrypt and decompress a dataset or subdataset (by enqueuing the request for latter processing)
        If you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:
         - For public datasets: "public/proj"+hash+"/"+internalID
         - For user datasets: "user/proj"+hash+"/"+user+"/"+internalID
         - For project datasets: "project/proj"+hash+"/"+internalID
      responses:
        '201':
          description: The response code means that the decryption and decompression has been initiated. Status of the operation can be checked by querying the status.
          schema:
            $ref: "#/definitions/SteeringRequestID"
        '400':
          description: This means that there's something wrong in the input parameters and the server couldn't understand the request.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description:  This means that the user is not authenticated with keycloak decryption with decompression can't be triggered unless the user first log in with a valid user
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: This means that the resource the user is trying to decrypt and decompress from or to is not readable or writable by the user. User doesn't have the correct rights to read the source file.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '404':
          description:  This means that either the source path on the system doesn't exist.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '414':
          description: This means that the either the source path is longer than the server is willing to interpret.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '429':
          description: This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: body
          name: parameters
          description: parameters
          required: true
          schema:
            type: object
            required:
              - source_system
              - source_path
              - project
            properties:
              source_system:
                type: string
              source_path:
                type: string
              project:
                type: string

  /dataset/encryption/encrypt/{request_id}:
    get:
      security: []
      tags:
        - dataSetManagement
      produces:
        - application/json
      summary: Check the status of a encryption
      operationId: CheckEncryptionStatus
      description: Check the status of a encryption
      parameters:
        - in: path
          name: request_id
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: This means that the status has been returned to the user in the response body.
          schema:
            type: object
            required:
              - status
            properties:
              status:
                type: string
              target_path:
                type: string
                description: Single path for encryption endpoints

        '400':
          description: This means that the request ID given by the user is incorrect.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description:  This means that the user is not authenticated with keycloak and encryption can't be triggered unless the user first log in with a valid user
          schema:
            $ref: "#/definitions/ErrorResponse"
        '404':
          description: This means that the ID doesn't exist and thus a status can't be returned.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '414':
          description: This means that the the request ID is longer than the server is willing to interpret.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"

  /dataset/encryption/decrypt/{request_id}:
    get:
      security: []
      tags:
        - dataSetManagement
      produces:
        - application/json
      summary: Check the status of a decryption
      operationId: CheckDecryptionStatus
      description: Check the status of a decryption
      parameters:
        - in: path
          name: request_id
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: This means that the status has been returned to the user in the response body.
          schema:
            type: object
            required:
              - status
            properties:
              status:
                type: string
              target_path:
                type: string
                description: Single path for encryption endpoints

        '400':
          description: This means that the request ID given by the user is incorrect.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description:  This means that the user is not authenticated with keycloak and decryption can't be triggered unless the user first log in with a valid user
          schema:
            $ref: "#/definitions/ErrorResponse"
        '404':
          description: This means that the ID doesn't exist and thus a status can't be returned.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '414':
          description: This means that the the request ID is longer than the server is willing to interpret.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"

  /dataset/encryption/compress_encrypt/{request_id}:
    get:
      security: []
      tags:
        - dataSetManagement
      produces:
        - application/json
      summary: Check the status of compression with encryption
      operationId: CheckCompressionEncryptionStatus
      description: Check the status of compression with encryption
      parameters:
        - in: path
          name: request_id
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: This means that the status has been returned to the user in the response body.
          schema:
            type: object
            required:
              - status
            properties:
              status:
                type: string
              target_path:
                type: string
                description: Single path for encryption endpoints

        '400':
          description: This means that the request ID given by the user is incorrect.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description:  This means that the user is not authenticated with keycloak and compression with encryption can't be triggered unless the user first log in with a valid user
          schema:
            $ref: "#/definitions/ErrorResponse"
        '404':
          description: This means that the ID doesn't exist and thus a status can't be returned.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '414':
          description: This means that the the request ID is longer than the server is willing to interpret.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"

  /dataset/encryption/decrypt_decompress/{request_id}:
    get:
      security: []
      tags:
        - dataSetManagement
      produces:
        - application/json
      summary: Check the status of decryption with decompression
      operationId: CheckDecryptionDecompressionStatus
      description: Check the status of decryption with decompression
      parameters:
        - in: path
          name: request_id
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: This means that the status has been returned to the user in the response body.
          schema:
            type: object
            required:
              - status
            properties:
              status:
                type: string
              target_path:
                type: string
                description: Single path for encryption endpoints

        '400':
          description: This means that the request ID given by the user is incorrect.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description:  This means that the user is not authenticated with keycloak and decryption with decompression can't be triggered unless the user first log in with a valid user
          schema:
            $ref: "#/definitions/ErrorResponse"
        '404':
          description: This means that the ID doesn't exist and thus a status can't be returned.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '414':
          description: This means that the the request ID is longer than the server is willing to interpret.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"

  /dataset/encryption/compress/{request_id}:
    get:
      security: []
      tags:
        - dataSetManagement
      produces:
        - application/json
      summary: Check the status of a compression
      operationId: CheckCompressionStatus
      description: Check the status of a compression
      parameters:
        - in: path
          name: request_id
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: This means that the status has been returned to the user in the response body.
          schema:
            type: object
            required:
              - status
            properties:
              status:
                type: string
              target_path:
                type: string
                description: Single path for encryption endpoints

        '400':
          description: This means that the request ID given by the user is incorrect.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description:  This means that the user is not authenticated with keycloak and compression can't be triggered unless the user first log in with a valid user
          schema:
            $ref: "#/definitions/ErrorResponse"
        '404':
          description: This means that the ID doesn't exist and thus a status can't be returned.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '414':
          description: This means that the the request ID is longer than the server is willing to interpret.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"

  /dataset/encryption/decompress/{request_id}:
    get:
      security: []
      tags:
        - dataSetManagement
      produces:
        - application/json
      summary: Check the status of a decompression
      operationId: CheckDecompressionStatus
      description: Check the status of a decompression
      parameters:
        - in: path
          name: request_id
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: This means that the status has been returned to the user in the response body.
          schema:
            type: object
            required:
              - status
            properties:
              status:
                type: string
              target_path:
                type: string
                description: Single path for encryption endpoints

        '400':
          description: This means that the request ID given by the user is incorrect.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description:  This means that the user is not authenticated with keycloak and decompression can't be triggered unless the user first log in with a valid user
          schema:
            $ref: "#/definitions/ErrorResponse"
        '404':
          description: This means that the ID doesn't exist and thus a status can't be returned.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '414':
          description: This means that the the request ID is longer than the server is willing to interpret.
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.
          schema:
            $ref: "#/definitions/ErrorResponse"

  /dataset/cert:
    get:
      tags:
        - dataSetManagement
      produces:
        - application/octet-stream
      summary: download public key for WP3 APIs
      operationId: Certificate
      description: download public key for WP3 APIs
      responses:
        '200':
          description: Certificate download in body of response
          schema:
            type: file
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal error processing request
          schema:
            $ref: '#/definitions/ErrorResponse'
        '502':
          description: Bad Gateway
          schema:
            $ref: '#/definitions/ErrorResponse'
        '503':
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'

  /authz/{userID}/add/{role}:
    post:
      tags:
        - userOrgManagement
      produces:
        - application/json
      summary: add a role to the specified user
      operationId: addRole
      description: It adds a role to the user, when assigning user role to project, then projectShortName and projectID are required
      responses:
        '200':
          description: Role added successfully
          schema:
            $ref: "#/definitions/AuthorizationResponse"
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: path
          name: userID
          type: string
          format: uuid
          required: true
          description: Id of the user to be modified
        - in: path
          name: role
          type: string
          required: true
          description: role to be added
        - in: query
          name: organizationID
          type: string
          format: uuid
          required: true
          description: Id of the organization linked
        - in: query
          name: projectID
          type: string
          format: uuid
          description: Id of the project linked
        - in: query
          name: projectShortName
          type: string
          description: (REQUIRED when ProjectID is provided!) Short name of the project linked

  /authz/{userID}/clear:
    post:
      tags:
        - userOrgManagement
      produces:
        - application/json
      summary: clears the actual role of the user and assignes a end_user one
      operationId: clearRole
      description: It clears the actual role of the user and assignes a end_user one
      responses:
        '200':
          description: Role added successfully
          schema:
            $ref: "#/definitions/AuthorizationResponse"
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: path
          name: userID
          type: string
          format: uuid
          required: true
          description: Id of the user to be modified
        - in: query
          name: organizationID
          type: string
          format: uuid
          required: true
          description: Id of the organization linked
        - in: query
          name: projectID
          type: string
          format: uuid
          description: Id of the project linked
        - in: query
          name: projectShortName
          type: string
          description: (REQUIRED when ProjectID is provided!) Short name of the project linked

  /user:
    get:
      tags:
        - userOrgManagement
      produces:
        - application/json
      summary: List all users
      operationId: listUsers
      description: lists all users (tbd - pagination?)
      responses:
        '200':
          description: list of users returned
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: query
          name: email
          description: email to filter when listing
          type: string
          format: email
        - in: query
          name: project
          description: project uuid to filter when listing
          type: string
          format: uuid
        - in: query
          name: permissions
          description: users permissions switch
          type: boolean
        - in: query
          name: scope
          description: organization scope switch
          type: string
          enum:
          - ALL
          - OWN
          - ALLOWED
          default: OWN
    post:
      tags:
        - userOrgManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Create a user
      operationId: createUser
      description: Creates a new user
      responses:
        '201':
          description: user created
          schema:
            $ref: "#/definitions/ItemCreatedResponse"
        '409':
          description: an existing item already exists
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: body
          name: user
          description: User to be added
          schema:
            $ref: '#/definitions/User'

  /user/{id}:
    get:
      tags:
        - userOrgManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Get specific user
      operationId: getUser
      description: get user with given userId
      responses:
        '200':
          description: user returned
          schema:
            $ref: "#/definitions/User"
        '404':
          description: user not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: path
          name: id
          type: string
          format: uuid
          required: true
          description: keycloak Id of user to be obtained
        - in: query
          name: permissions
          description: permissions switch
          type: boolean
    put:
      tags:
        - userOrgManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Update specific user
      operationId: updateUser
      description: Update user with given userId
      responses:
        '200':
          description: updated user
          schema:
            $ref: "#/definitions/User"
        '404':
          description: user not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: path
          name: id
          type: string
          format: uuid
          required: true
          description: Id of user to be obtained
        - in: body
          name: user
          required: true
          description: updated user data to be added
          schema:
            $ref: "#/definitions/User"
    delete:
      tags:
        - userOrgManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Delete specific user
      operationId: deleteUser
      description: Delete user with given userId
      responses:
        '200':
          description: user deleted successfully
          schema:
            $ref: "#/definitions/DeletedResponse"
        '404':
          description: user not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: path
          name: id
          type: string
          format: uuid
          required: true
          description: Id of user to be obtained

  /organization:
    get:
      tags:
        - userOrgManagement
      produces:
        - application/json
      summary: list organizations
      operationId: listOrganizations
      description: lists all organizations
      responses:
        '200':
          description: list of organizations
          schema:
            type: array
            items:
              $ref: "#/definitions/Organization"
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: query
          name: scope
          description: organization scope switch
          type: string
          enum:
          - ALL
          - OWN
          - ALLOWED
          default: OWN
    post:
      tags:
        - userOrgManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: create Organization
      operationId: createOrganization
      description: Creates a new organization
      responses:
        '201':
          description: organization created
          schema:
            $ref: "#/definitions/ItemCreatedResponse"
        '409':
          description: an existing item already exists
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: body
          name: organization
          description: Organization to be added
          schema:
            $ref: '#/definitions/Organization'

  /organization/{id}:
    get:
      tags:
        - userOrgManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Get specific organization
      operationId: getOrganization
      description: get organization with given organizationId
      responses:
        '200':
          description: organization returned
          schema:
            $ref: "#/definitions/Organization"
        '404':
          description: organization with organizationId not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: path
          name: id
          type: string
          format: uuid
          required: true
          description: Id of organization to be obtained
    put:
      tags:
        - userOrgManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Update specific organization
      operationId: updateOrganization
      description: Update organization with given organizationId
      responses:
        '200':
          description: updated organization
          schema:
            $ref: "#/definitions/Organization"
        '404':
          description: organization with organizationId not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: path
          name: id
          type: string
          format: uuid
          required: true
          description: Id of organization to be obtained
        - in: body
          name: organization
          required: true
          description: updated organization data to be added
          schema:
            $ref: "#/definitions/Organization"
    delete:
      tags:
        - userOrgManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Delete specific organization
      operationId: deleteOrganization
      description: Delete organization with given organizationId
      responses:
        '200':
          description: deleted organization
          schema:
            $ref: "#/definitions/DeletedResponse"
        '404':
          description: organization with organizationId not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: path
          name: id
          type: string
          format: uuid
          required: true
          description: Id of organization to be obtained

  /organization/{id}/user/{userID}:
    put:
      tags:
        - userOrgManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Adds user to organization
      operationId: addUserToOrganization
      description: Adds user to organization
      responses:
        '200':
          description: user updated
          schema:
            $ref: "#/definitions/OKResponse"
        '404':
          description: organization with organizationId not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description: Authorization error
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Authorization error
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: path
          name: id
          type: string
          format: uuid
          required: true
          description: Id of organization to be obtained
        - in: path
          name: userID
          type: string
          format: uuid
          required: true
          description: Id of user to be added
    delete:
      tags:
        - userOrgManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Delete user from organization
      operationId: deleteUserFromOrganization
      description: Delete user from organization
      responses:
        '200':
          description: deleted user from organization
          schema:
            $ref: "#/definitions/DeletedResponse"
        '404':
          description: organization or user not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description: Authorization error
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Authorization error
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: path
          name: id
          type: string
          format: uuid
          required: true
          description: Id of organization to be obtained
        - in: path
          name: userID
          type: string
          format: uuid
          required: true
          description: Id of user to be removed

  /project:
    get:
      tags:
        - userOrgManagement
      produces:
        - application/json
      summary: list projects
      operationId: listProjects
      description: lists all projects
      responses:
        '200':
          description: list of projectss
          schema:
            type: array
            items:
              $ref: "#/definitions/Project"
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: query
          name: scope
          description: project scope switch
          type: string
          enum:
          - ALL
          - OWN
          - ALLOWED
          default: ALL
    post:
      tags:
        - userOrgManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: create Project
      operationId: createProject
      description: Creates a new project
      responses:
        '201':
          description: project created
          schema:
            $ref: "#/definitions/ItemCreatedResponse"
        '409':
          description: an existing item already exists
          schema:
            $ref: "#/definitions/ErrorResponse"
        '422':
          description: Shortname duplicated
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: body
          name: project
          description: Project to be added
          schema:
            $ref: '#/definitions/Project'

  /project/{id}:
    get:
      tags:
        - userOrgManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Get specific project
      operationId: getProject
      description: get project with given id
      responses:
        '200':
          description: project returned
          schema:
            $ref: "#/definitions/Project"
        '404':
          description: project with not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: path
          name: id
          type: string
          format: uuid
          required: true
          description: Id of project to be obtained
    put:
      tags:
        - userOrgManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Update specific project
      operationId: updateProject
      description: Update project with given id
      responses:
        '200':
          description: updated project
          schema:
            $ref: "#/definitions/Project"
        '404':
          description: project with not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        '422':
          description: Shortname duplicated
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: path
          name: id
          type: string
          format: uuid
          required: true
          description: Id of project to be obtained
        - in: body
          name: project
          required: true
          description: updated project data to be added
          schema:
            $ref: "#/definitions/Project"
    delete:
      tags:
        - userOrgManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Delete specific project
      operationId: deleteProject
      description: Delete project with given id
      responses:
        '200':
          description: deleted project
          schema:
            $ref: "#/definitions/DeletedResponse"
        '404':
          description: project with not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: path
          name: id
          type: string
          format: uuid
          required: true
          description: Id of project to be obtained

  /project/{id}/user/{userID}:
    put:
      tags:
        - userOrgManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Add user to project
      operationId: addUserToProject
      description: Add user to project
      responses:
        '200':
          description: user updated
          schema:
            $ref: "#/definitions/OKResponse"
        '404':
          description: project with not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description: Authorization error
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Authorization error
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: path
          name: id
          type: string
          format: uuid
          required: true
          description: Id of project to be obtained
        - in: path
          name: userID
          type: string
          format: uuid
          required: true
          description: Id of user to be added
    delete:
      tags:
        - userOrgManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Delete user from project
      operationId: deleteUserFromProject
      description: Delete user from project
      responses:
        '200':
          description: deleted user from project
          schema:
            $ref: "#/definitions/DeletedResponse"
        '404':
          description: project or user not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description: Authorization error
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Authorization error
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: path
          name: id
          type: string
          format: uuid
          required: true
          description: Id of project to be obtained
        - in: path
          name: userID
          type: string
          format: uuid
          required: true
          description: Id of user to be removed

  /hpc/resource:
    get:
      tags:
        - userOrgManagement
      produces:
        - application/json
      summary: list HPCResource
      operationId: listHPCResources
      description: lists all HPCResources
      responses:
        '200':
          description: list of HPCResources
          schema:
            type: array
            items:
              $ref: "#/definitions/HPCResource"
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: query
          name: scope
          description: organization scope switch
          type: string
          enum:
          - ALL
          - OWN
          - ALLOWED
          default: ALL
    post:
      tags:
        - userOrgManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: create HPCResource
      operationId: createHPCResource
      description: Creates a new HPCResource
      responses:
        '201':
          description: HPCResource created
          schema:
            $ref: "#/definitions/ItemCreatedResponse"
        '409':
          description: an existing item already exists
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: body
          name: HPCResource
          description: HPCResource to be added
          schema:
            $ref: '#/definitions/HPCResource'

  /hpc/resource/{id}:
    get:
      tags:
        - userOrgManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Get specific HPCResource
      operationId: getHPCResource
      description: get HPCResource with given id
      responses:
        '200':
          description: HPCResource returned
          schema:
            $ref: "#/definitions/HPCResource"
        '404':
          description: HPCResource with not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: Id of HPCResource to be obtained
    put:
      tags:
        - userOrgManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Update specific HPCResource
      operationId: updateHPCResource
      description: Update HPCResource with given id
      responses:
        '200':
          description: updated HPCResource
          schema:
            $ref: "#/definitions/HPCResource"
        '404':
          description: HPCResource with not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: Id of HPCResource to be obtained
        - in: body
          name: HPCResource
          required: true
          description: updated HPCResource data to be added
          schema:
            $ref: "#/definitions/HPCResource"
    delete:
      tags:
        - userOrgManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Delete specific HPCResource
      operationId: deleteHPCResource
      description: Delete HPCResource with given id
      responses:
        '200':
          description: deleted HPCResource
          schema:
            $ref: "#/definitions/DeletedResponse"
        '404':
          description: HPCResource with not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        '403':
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: Id of HPCResource to be obtained

  /workflow:
    get:
      tags:
        - workflowManagement
      produces:
        - application/json
      summary: Return list of available LEXIS Workflows
      operationId: getWorkflows
      responses:
        '200':
          description: List of available LEXIS Workflows
          schema:
            type: array
            items:
              $ref: "#/definitions/Workflow"
        '401':
            description: Authorization information is missing or invalid.
            schema:
              $ref: "#/definitions/AuthorizationResponse"
        '500':
          description: Unexpected error.
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - workflowManagement
      consumes:
        - application/json
      produces:
        - application/json
      summary: Create a new LEXIS Workflow on the system
      description: "If successfull returns a rest response with the id of the created LEXIS workflow in data. If not successful a rest response with an error content is returned."
      operationId: createWorkflow
      parameters:
        - in: body
          name: workflowRequest
          description: Create LEXIS Workflow request
          required: true
          schema:
            $ref: '#/definitions/WorkflowRequest'
      responses:
        '201':
          description: Workflow Created
          schema:
            $ref: "#/definitions/ItemCreatedResponse"
        '400':
          description: invalid input, object invalid
          schema:
            $ref: "#/definitions/InvalidResponse"
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/AuthorizationResponse"
        '409':
          description: Workflow Name already exists
          schema:
            $ref: "#/definitions/ConflictResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /workflow/{workflowId}:
    get:
      tags:
        - workflowManagement
      produces:
        - application/json
      summary: Return detailed info on LEXIS Workflow for given Workflow ID
      description: Get the workflow with the given workflowId
      operationId: getWorkflow
      parameters:
        - in: path
          name: workflowId
          type: string
          required: true
          description: WorkflowId for workflow to be obtained.
      responses:
        '200':
          description: Workflow returned
          schema:
              $ref: "#/definitions/WorkflowDetail"
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/AuthorizationResponse"
        '404':
          description: Workflow with WorkflowId not found.
          schema:
            $ref: "#/definitions/MissingResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - workflowManagement
      consumes:
        - application/json
      summary: Delete LEXIS Workflow on the system
      description: "Delete an already existing workflow on the system"
      operationId: DeleteWorkflow
      parameters:
        - in: path
          name: workflowId
          description: WorkflowID for WorkflowExecution we want to cancel
          required: true
          type: string
      responses:
        '200':
          description: Workflow Deleted
          schema:
            $ref: "#/definitions/DeletedResponse"
        '400':
          description: invalid input, object invalid
          schema:
            $ref: "#/definitions/InvalidResponse"
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/AuthorizationResponse"
        '404':
          description: Workflow with WorkflowId not found
          schema:
            $ref: "#/definitions/MissingResponse"
        '409':
          description: Workflow does not exist
          schema:
            $ref: "#/definitions/ConflictResponse"
        '422':
          description: Workflow currently running in LEXIS WorkflowExecution.
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /workflow/{workflowId}/execution:
    get:
      tags:
        - workflowManagement
      produces:
        - application/json
      summary: List the current available LEXIS Workflow Executions.
      operationId: listWorkflowExecutions
      description: List the current available LEXIS Workflow Executions for the given user.
      parameters:
        - in: path
          name: workflowId
          description: WorkflowId for workflowExecutions we want
          required: true
          type: string
        - in: query
          name: reqSize
          description: Number of Lexis Workflow Executions we want to return
          required: true
          type: integer
      responses:
        '200':
          description: List of available LEXIS Workflow Executions
          schema:
            type: array
            items:
              $ref: "#/definitions/WorkflowExecution"
        '401':
          description: Authorization information is missing or invalid.
          schema:
            $ref: "#/definitions/AuthorizationResponse"
        '404':
          description: List Worklow Executions reuired dependencies not found
          schema:
            $ref: "#/definitions/MissingResponse"
        '500':
          description: Unexpected error.
          schema:
            $ref: "#/definitions/ErrorResponse"
#TODO Below needs implemented in interface
    post:
      tags:
        - workflowManagement
      produces:
        - application/json
      consumes:
        - application/json
      summary: "TODO: Needs implemented with TOSCA 1.3 Capabilitise. Create a new LEXIS Workflow Execution by providing remaining inputs"
      operationId: createWorkflowExecution
      description: |
        Creates a LEXIS workflow execution from a LEXIS workflow.
        The name of the resulting workflow execution will be of the form `n-[projectShortName]` where `n` is the index of the workflow execution withing it's workflow.
        The workflow execution name takes on the suffix `_cron` or `_scheduled` where it is a cron or scheduled job according to the request parameters.
        For example, the workflow execution `2-dummyprj_cron` is the third workflow execution from it's workflow under the project `dummyprj` and it is a cron job.
      parameters:
        - in: path
          name: workflowId
          description: WorkflowId for WorkflowExecution to be created.
          required: true
          type: string
        - in: body
          name: workflowExecutionRequest
          description: Create LEXIS Workflow Execution request
          required: false
          schema:
            $ref: '#/definitions/CreateWorkflowExecutionRequest'
      responses:
        '201':
          description: LEXIS WorkflowExecution created and Input upload succesful
          schema:
            $ref: "#/definitions/ItemCreatedResponse"
        '400':
          description: invalid input, object invalid
          schema:
            $ref: "#/definitions/InvalidResponse"
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/AuthorizationResponse"
        '404':
          description: Required dependencies for WorkflowExecution creation not found
          schema:
            $ref: "#/definitions/MissingResponse"
        '409':
          description: LEXIS WorkflowExecution already exists (a4cApplication already deployed).
          schema:
            $ref: "#/definitions/ConflictResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /workflow/{workflowId}/executions:
    post:
      tags:
        - workflowManagement
      produces:
        - application/json
      consumes:
        - application/json
      summary: "Create a batch of LEXIS Workflow Executions from a LEXIS Workflow"
      operationId: createWorkflowExecutions
      description: "Create a batch of LEXIS WorkflowExecutions from a LEXIS Workflow given an array of WorkflowExecution parameters"
      parameters:
        - in: path
          name: workflowId
          description: WorkflowId for WorkflowExecution to be created.
          required: true
          type: string
        - in: body
          name: workflowExecutionRequests
          description: Create LEXIS Workflow Execution requests
          required: false
          schema:
            type: array
            items:
              $ref: '#/definitions/CreateWorkflowExecutionRequest'
      responses:
        '201':
          description: LEXIS WorkflowExecution created and Input upload successfull
          schema:
            type: array
            items:
              $ref: "#/definitions/ItemCreatedResponse"
        '400':
          description: invalid input, object invalid
          schema:
            $ref: "#/definitions/InvalidResponse"
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/AuthorizationResponse"
        '404':
          description: Required dependencies for WorkflowExecution creation not found
          schema:
            $ref: "#/definitions/MissingResponse"
        '409':
          description: LEXIS WorkflowExecution already exists (a4cApplication already deployed).
          schema:
            $ref: "#/definitions/ConflictResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /workflow/{workflowId}/execution/{workflowExecutionId}:
    get:
      tags:
         - workflowManagement
      produces:
        - application/json
      summary: Returns LEXIS Workflow Execution detail.
      description: "Return current LEXIS Workflow Execution detail"
      operationId: getWorkflowExecutionDetail
      parameters:
        - in: path
          name: workflowId
          description: workflowID for LEXIS Workflow Execution required
          required: true
          type: string
        - in: path
          name: workflowExecutionId
          description: workflowExecutionId for LEXIS Workflow Execution required
          required: true
          type: string
      responses:
        '200':
          description: Workflow Execution Detail
          schema:
            $ref: '#/definitions/WorkflowExecutionDetail'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/AuthorizationResponse'
        '404':
          description: The application provided does not exist.
          schema:
            $ref: '#/definitions/MissingResponse'
        '500':
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
          - workflowManagement
      summary: Cancel a LEXIS Workflow Execution.
      operationId: cancelWorkflowExecution
      description: Cancels given LEXIS Workflow Execution.
      parameters:
          - in: path
            name: workflowId
            description: workflowID for LEXIS Workflow Execution to be canceled
            required: true
            type: string
          - in: path
            name: workflowExecutionId
            description: WorkflowExecutionID for WorkflowExecution to be deleted
            required: true
            type: string
      responses:
          '200':
              description: LEXIS WorkflowExecution deletion
              schema:
                $ref: "#/definitions/DeletedResponse"
          '400':
              description: invalid input, object invalid
              schema:
                $ref: "#/definitions/InvalidResponse"
          '401':
              description: Unauthorized
              schema:
                $ref: "#/definitions/AuthorizationResponse"
          '404':
              description: LEXIS WorkflowExecution does not exist
              schema:
                $ref: "#/definitions/MissingResponse"
          '500':
              description: unexpected error
              schema:
                  $ref: '#/definitions/ErrorResponse'

  /workflow/{workflowId}/execution/{workflowExecutionId}/remove:
    post:
      tags:
          - workflowManagement
      summary: Delete a LEXIS Workflow Execution.
      operationId: deleteWorkflowExecution
      description: Removes given LEXIS Workflow Execution.
      parameters:
          - in: path
            name: workflowId
            description: workflowID for LEXIS Workflow Execution to be removed
            required: true
            type: string
          - in: path
            name: workflowExecutionId
            description: WorkflowExecutionID for WorkflowExecution to be removed
            required: true
            type: string
      responses:
        '200':
            description: LEXIS WorkflowExecution succesfully deleted
            schema:
              $ref: "#/definitions/DeletedResponse"
        '400':
            description: invalid input, object invalid
            schema:
              $ref: "#/definitions/InvalidResponse"
        '401':
            description: Unauthorized
            schema:
              $ref: "#/definitions/AuthorizationResponse"
        '404':
            description: LEXIS WorkflowExecution does not exist
            schema:
              $ref: "#/definitions/MissingResponse"
        '500':
            description: unexpected error
            schema:
                $ref: '#/definitions/ErrorResponse'

  /workflow/{workflowId}/execution/{workflowExecutionId}/status:
    get:
      tags:
        - workflowManagement
      produces:
       - application/json
      summary: Returns detailed status of Lexis Workflow Execution and its tasks.
      description: "Return Task Status' on given LEXIS Workflow Execution"
      operationId: getWorkflowExecutionStepStatus
      parameters:
        - in: path
          name: workflowId
          description: workflowID for LEXIS Workflow Execution status required
          required: true
          type: string
        - in: path
          name: workflowExecutionId
          description: workflowExecutionId for LEXIS Workflow Execution status required
          required: true
          type: string
      responses:
        '200':
          description: Status of given LEXIS WorkflowExecution
          schema:
            type: array
            items:
              $ref: '#/definitions/WorkflowExecutionStepStatus'
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/AuthorizationResponse"
        '404':
          description: The WorkflowExecutionID provided does not exist.
          schema:
            $ref: "#/definitions/MissingResponse"
        '500':
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'

  /workflow/{workflowId}/execution/{workflowExecutionId}/logs:
    get:
      tags:
        - workflowManagement
      produces:
        - application/json
      summary: Returns detailed logs of LEXIS Workflow Execution
      description: "Return logs on given LEXIS Workflow Execution"
      operationId: getWorkflowExecutionLogs
      parameters:
        - in: path
          name: workflowId
          description: workflowID for LEXIS Workflow Execution logs required
          required: true
          type: string
        - in: path
          name: workflowExecutionId
          description: workflowExecutionId for LEXIS Workflow Execution logs required
          required: true
          type: string
      responses:
        '200':
          description: Logs of given LEXIS WorkflowExecution
          schema:
            type: array
            items:
              $ref: '#/definitions/Logs'
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/AuthorizationResponse"
        '404':
          description: The WorkflowExecutionID provided does not exist.
          schema:
            $ref: "#/definitions/MissingResponse"
        '500':
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'

  /workflow/template:
    get:
      tags:
        - workflowManagement
      produces:
        - application/json
      summary: Return list of available Workflow Templates
      operationId: getWorkflowTemplates
      responses:
        '200':
          description: List of available topologies
          schema:
            type: array
            items:
              $ref: "#/definitions/WorkflowTemplate"
        '401':
            description: Authorization information is missing or invalid.
            schema:
              $ref: "#/definitions/AuthorizationResponse"
        '500':
          description: Unexpected error.
          schema:
            $ref: "#/definitions/ErrorResponse"

  /workflow/template/{workflowTemplateId}:
    get:
      tags:
        - workflowManagement
      produces:
        - application/json
      summary: Return detailed info on Workflow Template give workflowTemplateID
      description: Get the workflow template with the given workflowTemplateId
      operationId: getWorkflowTemplate
      parameters:
        - in: path
          name: workflowTemplateId
          type: string
          required: true
          description: WorkflowTemplateId for LEXIS workflowTemplate to be obtained.
      responses:
        '200':
          description: Workflow Template returned
          schema:
            $ref: "#/definitions/WorkflowTemplate"
        '401':
          description: Authorization information is missing or invalid.
          schema:
            $ref: "#/definitions/AuthorizationResponse"
        '404':
          description: WorkflowTemplate with WorkflowTemplateId not found.
          schema:
            $ref: "#/definitions/MissingResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /workflow/template/upload:
    post:
      tags:
        - workflowManagement
      consumes:
        - multipart/form-data
      produces:
        - application/json
      summary: Create a new LEXIS Workflow Template on the system
      description: "If successful returns a rest response with the id of the created LEXIS workflow template. If not successful a rest response with an error content is returned."
      operationId: uploadWorkflowTemplate
      parameters:
        - in: formData
          name: workflowTemplateFile
          description: workflowTemplatefile to be loaded.
          required: true
          type: file
      responses:
        '201':
          description: Workflow Template Uploaded Succesful
          schema:
            $ref: "#/definitions/ItemCreatedResponse"
        '400':
          description: invalid input, object invalid
          schema:
            $ref: "#/definitions/InvalidResponse"
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/AuthorizationResponse"
        '409':
          description: Workflow Template Name already exists
          schema:
            $ref: "#/definitions/ConflictResponse"
        '500':
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /heappe/ClusterInformation/ListAvailableClusters:
    get:
      tags:
        - ClusterInformation
      produces:
        - application/json
      summary: Get available clusters
      operationId: listAvailableClusters
      description: Get available clusters
      responses:
        '200':
          description: list of clusters retruend
          schema:
            type: array
            items:
              $ref: "#/definitions/HeappeCluster"
        '400':
          description: Bad Request
          schema:
            $ref: "#/definitions/HeappeBadRequest"
        '413':
          description: Client Error
          schema:
            $ref: "#/definitions/HeappeError"
        '429':
          description: Client Error
          schema:
            $ref: "#/definitions/HeappeError"
        '500':
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: query
          name: endpoint
          description: (REQUIRED) HEAppE Endpoint of the HPC Resource
          type: string

  /heappe/ClusterInformation/GetCommandTemplateParametersName:
    post:
      tags:
        - ClusterInformation
      consumes:
        - application/json
      produces:
        - application/json
      summary: Get command template parameters name
      operationId: getCommandTemplate
      description: Get command template parameters name
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              type: string
        '400':
          description: Bad Request
          schema:
            $ref: "#/definitions/HeappeBadRequest"
        '413':
          description: Client Error
          schema:
            $ref: "#/definitions/HeappeError"
        '429':
          description: Client Error
          schema:
            $ref: "#/definitions/HeappeError"
        '500':
          description: Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - in: query
          name: username
          description: (OPTIONAL) username to use on HEAppE authz, defaults to the one retrieved via keycloak token
          type: string
        - in: query
          name: endpoint
          description: (REQUIRED) HEAppE Endpoint of the HPC Resource
          type: string
        - in: body
          name: request
          description: Get command template parameters name request parameters
          schema:
            $ref: '#/definitions/HeappeRequest'

definitions:
  AuthorizationResponse:
    type: object
    properties:
      Message:
        type: string
  ConflictResponse:
    type: object
    properties:
      Message:
        type: string
  ItemCreatedResponse:
    type: object
    required:
      - Link
    properties:
      ID:
        type: string
      Link:
        type: string
  DeletedResponse:
    type: object
    properties:
      ID:
        type: string
      Message:
        type: string
  OKResponse:
    type: object
    properties:
      Message:
        type: string
  ErrorResponse:
    type: object
    required:
      - errorString
    properties:
      errorString:
        type: string
  InvalidResponse:
    type: object
    properties:
      Message:
        type: string
  MissingResponse:
    type: object
    properties:
      ID:
        type: string
      Message:
        type: string
  StringArray:
    x-go-type:
      import:
        package: "github.com/lib/pq"
      type: StringArray
  Metadata:
    type: object
    x-go-type:
      import:
        package: "gitlab.com/cyclops-utilities/datamodels"
      type: JSONdb

#HEAppE

  HeappeBadRequest:
    type: object
    properties:
      StatusCode:
        type: integer
        format: int32
        x-nullable: true

  HeappeError:
    type: object
    properties:
      type:
        type: string
        x-nullable: true
      title:
        type: string
        x-nullable: true
      status:
        type: integer
        format: int32
        x-nullable: true
      detail:
        type: string
        x-nullable: true
      instance:
        type: string
        x-nullable: true

  HeappeRequest:
    type: object
    properties:
      SessionCode:
        type: string
        x-nullable: true
      CommandTemplateID:
        type: integer
        format: int64
      UserScriptPath:
        type: string
        x-nullable: true

  HeappeCluster:
    type: object
    properties:
      ID:
        type: integer
        format: int64
        x-nullable: true
      Name:
        type: string
        x-nullable: true
      Description:
        type: string
        x-nullable: true
      NodeTypes:
        type: array
        x-nullable: true
        items:
          $ref: '#/definitions/HeappeNodeType'

  HeappeNodeType:
    type: object
    properties:
      ID:
        type: integer
        format: int64
        x-nullable: true
      Name:
        type: string
        x-nullable: true
      Description:
        type: string
        x-nullable: true
      NumberOfNodes:
        type: integer
        format: int32
        x-nullable: true
      CoresPerNode:
        type: integer
        format: int32
        x-nullable: true
      MaxWallTime:
        type: integer
        format: int32
        x-nullable: true
      CommandTemplates:
        type: array
        x-nullable: true
        items:
          $ref: '#/definitions/HeappeCommandTemplate'

  HeappeCommandTemplate:
    type: object
    properties:
      ID:
        type: integer
        format: int64
        x-nullable: true
      Name:
        type: string
        x-nullable: true
      Description:
        type: string
        x-nullable: true
      Code:
        type: string
        x-nullable: true
      TemplateParameters:
        type: array
        x-nullable: true
        items:
          $ref: '#/definitions/HeappeTemplateParameter'

  HeappeTemplateParameter:
    type: object
    properties:
      Identifier:
        type: string
        x-nullable: true
      Description:
        type: string
        x-nullable: true

#ApprovalSystemInterface
  ApprovalSystemQueue:
    type: object
    properties:
      ID:
        type: integer
        default: 0
        x-nullable: true
      Name:
        type: string
      Description:
        type: string
      Type:
        type: string
      MaxWallTime:
        type: integer
        default: 0
        x-nullable: true
      NumberOfNodes:
        type: integer
        default: 0
        x-nullable: true
      CoresPerNode:
        type: integer
        default: 0
        x-nullable: true

  ApprovalSystemResource:
    type: object
    properties:
      ID:
        type: integer
        default: 0
        x-nullable: true
      Name:
        type: string
      HostName:
        type: string
      PerformanceCoefficient:
        type: number
        format: double
        default: 0.0
        x-nullable: true
      QueueList:
        type: array
        items:
          $ref: '#/definitions/ApprovalSystemQueue'

  ApprovalSystemResourceRequest:
    type: object
    properties:
      ApprovalObjections:
        example: Some example objection.
        type: string
      ApprovalStatus:
        enum:
          - PENDING
          - ACCEPTED
          - REJECTED
        example: PENDING
      AssociatedHPCProject:
        example: DD-20-37
        type: string
      AssociatedLEXISProject:
        example: b65ef55a-970d-4f5d-9372-5928fef770a1
        format: uuid
        type: string
      AssociatedLEXISProjectName:
        example: LEXIS Example Project
        type: string
      Budget:
        default: 0.0
        example: 100
        format: double
        type: number
      CloudNetworkName:
        example: 'https://cloud.networkname.example'
        format: uri
        type: string
      CoreHoursExpected:
        default: 0.0
        example: 1000
        format: double
        type: number
      DateEnd:
        example: '2022-08-30T17:32:28Z'
        format: date-time
        type: string
      DateStart:
        example: '2022-07-21T17:32:28Z'
        format: date-time
        type: string
      HEAppEEndpoint:
        example: 'https://heappe.it4i.cz/lexis/swagger/index.html'
        format: uri
        type: string
      HPCProvider:
        enum:
          - IT4I
          - LRZ
          - ICHEC
        example: LRZ
        type: string
      HPCResourceID:
        example: DD-20-37-1
        type: string
      OpenStackEndpoint:
        example: 'https://openstack.msad.it4i.lexis.tech/'
        format: uri
        type: string
      PrimaryInvestigator:
        example: pi@example.cz
        format: email
        type: string
      ProjectContactEmail:
        example: project.contact@example.cz
        format: email
        type: string
      ResourceType:
        example: CLOUD
        type: string
      TermsConsent:
        type: boolean
      Resources:
        type: array
        items:
          $ref: '#/definitions/ApprovalSystemResourceRequestItem'
    required:
      - AssociatedLEXISProject
      - AssociatedLEXISProjectName
      - ProjectContactEmail
      - PrimaryInvestigator
      - TermsConsent
      - Budget
      - CoreHoursExpected
      - DateEnd
      - DateStart

  ApprovalSystemResourceRequestItem:
    type: object
    properties:
      ClusterID:
        type: integer
        default: 0
        x-nullable: true
      ClusterName:
        type: string
      QueueID:
        type: integer
        default: 0
        x-nullable: true
      QueueName:
        type: string

  ApprovalSystemApprovedResourceRequest:
    type: object
    properties:
      ApprovalObjections:
        example: Some example objection.
        type: string
      ApprovalStatus:
        enum:
          - PENDING
          - ACCEPTED
          - REJECTED
        example: ACCEPTED
        type: string
      AssociatedHPCProject:
        example: DD-20-37
        type: string
      AssociatedLEXISProject:
        example: b65ef55a-970d-4f5d-9372-5928fef770a1
        format: uuid
        type: string
      AssociatedLEXISProjectName:
        example: LEXIS Example Project
        type: string
      CloudNetworkName:
        example: 'https://cloud.networkname.example'
        format: uri
        type: string
      HEAppEEndpoint:
        example: 'https://heappe.it4i.cz/lexis/swagger/index.html'
        format: uri
        type: string
      HPCProvider:
        enum:
          - IT4I
          - LRZ
          - ICHEC
        example: LRZ
        type: string
      HPCResourceID:
        example: DD-20-37-1
        type: string
      OpenStackEndpoint:
        example: 'https://openstack.msad.it4i.lexis.tech/'
        format: uri
        type: string
      PrimaryInvestigator:
        example: pi@example.cz
        format: email
        type: string
      ProjectContactEmail:
        format: email
        type: string
      ResourceType:
        example: CLOUD
        type: string
      TermsConsent:
        example: true
        type: boolean
    required:
      - AssociatedLEXISProject
      - AssociatedLEXISProjectName
      - ProjectContactEmail
      - PrimaryInvestigator
      - TermsConsent
      - AssociatedHPCProject

  ApprovalSystemCreatedResponse:
    type: object
    properties:
      HPCResourceID:
        type: string

  ApprovalSystemErrorResponse:
    type: object
    required:
      - errorString
    properties:
      errorString:
        type: string

  ApprovalSystemMissingResponse:
    type: object
    properties:
      ID:
        type: string
      errorString:
        type: string

  ApprovalSystemInvalidResponse:
    type: object
    properties:
      errorString:
        type: string

#UserOrgService
  User:
    type: object
    properties:
      ID:
        type: string
        format: uuid
        description: This is an id generated by keycloak
      Username:
        type: string
      FirstName:
        type: string
      LastName:
        type: string
      RegistrationDateTime:
        type: string
        format: date-time
      EmailAddress:
        type: string
        format: email
      OrganizationID:
        type: string
        format: uuid
      AllowedOrganizations:
        $ref: '#/definitions/StringArray'
      Permissions:
        $ref: '#/definitions/Metadata'
      Projects:
        $ref: '#/definitions/StringArray'
      PGPKeyID:
        type: string
        description: This is an id for a PGP Key - what it means is still tbd
      UserStatus:
        type: string
        enum:
        - ENABLED
        - DISABLED
      AgreedToTermsOfUse:
        type: boolean
      TermsOfUseVersion:
        type: string
      DateOfAgreementToTermsOfUse:
        type: string
        format: date-time
      AgreeToUseOfCookies:
        type: boolean
      DateOfAgreementToUseOfCookies:
        type: string
        format: date-time

  Organization:
    type: object
    properties:
      ID:
        type: string
        format: uuid
      FormalName:
        type: string
      RegisteredAddress1:
        type: string
      RegisteredAddress2:
        type: string
      RegisteredAddress3:
        type: string
      RegisteredCountry:
        type: string
        format: country
      CreationDate:
        type: string
        format: date-time
      CreatedBy:
        # userid who created this organization
        type: string
        format: uuid
      Website:
        type: string
        format: url
      OrganizationEmailAddress:
        type: string
        format: email
      PrimaryTelephoneNumber:
        type: string
        format: telephone-number
      VATRegistrationNumber:
        type: string
      OrganizationStatus:
        type: string
        enum:
        - PENDING_APPROVAL
        - APPROVED
        - DISABLED
        - TERMINATED

  Project:
    type: object
    properties:
      ProjectID:
        type: string
        format: uuid
      ProjectName:
        type: string
      ProjectShortName:
        type: string
      ProjectDescription:
        type: string
      ProjectCreationTime:
        type: string
        format: date-time
      ProjectCreatedBy:
        type: string
        format: uuid
      LinkedOrganization:
        type: string
        format: uuid
      AllowedOrganizations:
        $ref: '#/definitions/StringArray'
      ProjectStatus:
        type: string
        enum:
        - PENDING
        - ACTIVE
        - DISABLED
        - TERMINATED
      ProjectContactPerson:
        type: string
        format: uuid
      ProjectStartDate:
        type: string
        format: date-time
      ProjectTerminationDate:
        type: string
        format: date-time
      ProjectMaxPrice:
        type: number
        format: double
        default: 0.0
        x-nullable: true
      NormCoreHours:
        type: integer
        default: 0
        x-nullable: true
      ProjectContactEmail:
        type: string
        format: email
      ProjectDomain:
        type: string

  HPCResource:
    type: object
    properties:
      HPCResourceID:
        type: string
      AssociatedHPCProject:
        type: string
      AssociatedLEXISProject:
        type: string
        format: uuid
      ApprovalStatus:
        type: string
        enum:
        - ACCEPTED
        - REJECTED
        - PENDING
      CloudNetworkName:
        type: string
      ProjectNetworkName:
        type: string
      HEAppEEndpoint:
        type: string
      HPCProvider:
        type: string
        enum:
        - IT4I
        - LRZ
        - ICHEC
      OpenStackEndpoint:
        type: string
      OpenStackProjectID:
        type: string
      ResourceType:
        type: string
        enum:
        - CLOUD
        - HPC
        - SMARTGW
      TermsConsent:
        type: boolean


#Cyclops
  HPCUsage:
    type: object
    properties:
      HPCProjectID:
        type: string
      HPCProjectName:
        type: string
      AccountingData:
        type: array
        items:
          $ref: '#/definitions/Metadata'

  Usage:
    type: object
    properties:
      ProjectID:
        type: string
        format: uuid
      ProjectName:
        type: string
      TimeFrom:
        type: string
        format: datetime
      TimeTo:
        type: string
        format: datetime
      HPCProjects:
        type: array
        items:
          $ref: '#/definitions/HPCUsage'

  CreditHistory:
    type: object
    properties:
      AccountID:
        type: string
      Events:
        type: array
        items:
          $ref: '#/definitions/Event'

  CreditStatus:
    type: object
    properties:
      AccountID:
        type: string
      AvailableCredit:
        type: number
        format: double
      AvailableCash:
        type: number
        format: double
      LastUpdate:
        type: string
        format: datetime

  Event:
    type: object
    properties:
      AuthorizedBy:
        type: string
      Delta:
        type: number
        format: double
      EventType:
        type: string
        default: Consumption
        enum:
        - AuthorizedIncrease
        - AuthorizedDecrease
        - Consumption
        - AutomaticCreditExpiry
        - Refund
      Timestamp:
        type: string
        format: datetime
      Medium:
        type: string
        default: CREDIT
        enum:
        - CREDIT
        - CASH

#DatasetCatalogInterface
  SteeringRequestID:
    type: object
    required:
      - request_id
    properties:
      request_id:
        type: string
        format: uuid
        example: "31279ed6-e7b1-4c9f-ab26-206c863a2264"
        description: UUID
  DatasetItemCreatedResponse:
    type: object
    required:
      - status
      - internalID
    properties:
      status:
        type: string
        pattern: '[0-9][0-9][0-9]'
        example: '201'
        description: HTTP status code
      internalID:
        type: string

  AccessMode:
    type: string
    enum:
      - public
      - project
      - user
  PushMethod:
    type: string
    enum:
      - empty
      - directupload
      - tus
  ArchiveType:
    type: string
    enum:
      - zip
      - file
  CompressMethod:
    type: string
    enum:
      - zip
      - file
  DatasetMetadata:
    type: object
    properties:
      CustomMetadata:
        type: object
      CustomMetadataSchema:
        type: array
        items:
          type: object
      creator:
        type: array
        items:
          type: string
      contributor:
        type: array
        items:
          type: string
      publisher:
        type: array
        items:
          type: string
      owner:
        type: array
        items:
          type: string
      identifier:
        type: string
        description: Datacite identifier (doi), unused for now
      AlternateIdentifier:
        type: array
        description: DataCite AlternateIdentifier
        items:
          type: array
          minItems: 2
          maxItems: 2
          description: Pairs [AlternateIdentifierType, AlternateIdentifier]
          items:
            type: string
      publicationYear:
        type: string
      resourceType:
        type: string
      resourceTypeGeneral:
        type: string
        enum:
          - "Audiovisual"
          - "Collection"
          - "DataPaper"
          - "Dataset"
          - "Event"
          - "Image"
          - "InteractiveResource"
          - "Model"
          - "PhysicalObject"
          - "Service"
          - "Software"
          - "Sound"
          - "Text"
          - "Workflow"
          - "Other"
      title:
        type: string
      relatedIdentifier:
        type: array
        items:
          type: string
      rights:
        type: array
        items:
          type: string
      rightsIdentifier:
        type: array
        items:
          type: string
      rightsURI:
        type: array
        items:
          type: string
      scope:
        type: string
      format:
        type: string
      relatedSoftware:
        type: array
        items:
          type: string
      Description:
        type: array
        items:
          type: string
      CreationDate:
        type: string
  DatasetMetadataQuery:
    type: object
    properties:
      CustomMetadata:
        type: object
      access:
        $ref: '#/definitions/AccessMode'
      project:
        type: string
      creator:
        type: string
      contributor:
        type: string
      publisher:
        type: string
      owner:
        type: string
      identifier:
        type: string
        description: DataCite identifier (DOI), unused for now
      internalID:
        type: string
        description: iRODS identifier
      AlternateIdentifier:
        description: DataCite AlternateIdentifier
        type: string
      AlternateIdentifierType:
        description: DataCite AlternateIdentifierType. Size must match AlternateIdentifier
        type: string
      publicationYear:
        type: string
      resourceType:
        type: string
      resourceTypeGeneral:
        type: string
      title:
        type: string
      relatedIdentifier:
        type: string
      rights:
        type: string
      rightsIdentifier:
        type: string
      rightsURI:
        type: string
      PID:
        type: string
      EUDAT/FIO:
        type: string
      EUDAT/PARENT:
        type: string
      EUDAT/ROR:
        type: string
      EUDAT/FIXED_CONTENT:
        type: string
      "EUDAT/REPLICA":
        type: string
      scope:
        type: string
      format:
        type: string
      relatedSoftware:
        type: string
      Description:
        type: string
      CreationDate:
        type: string
  Location:
    type: object
    required:
      - access
      - project
      - internalID
      - zone
    properties:
      access:
        $ref: '#/definitions/AccessMode'
      project:
        type: string
      internalID:
        type: string
      zone:
        type: string
        example: LRZLexisZone
  Eudat:
    type: object
    properties:
      "EUDAT/FIO":
        type: string
      "EUDAT/FIXED_CONTENT":
        type: string
      "EUDAT/PARENT":
        type: string
      "EUDAT/ROR":
        type: string
      "PID":
        type: string
      "EUDAT/REPLICA":
        type: string
  DatasetFlags:
    type: object
    properties:
      "encryption":
        type: string
      "compression":
        type: string
  DatasetMetadataQueryResponse:
    type: object
    required:
      - location
      - metadata
      - flags
    properties:
      location:
        $ref: '#/definitions/Location'
      metadata:
        $ref: '#/definitions/DatasetMetadata'
      eudat:
        $ref: '#/definitions/Eudat'
      flags:
        $ref: '#/definitions/DatasetFlags'
  UserInProject:
    type: object
    required:
      - username
      - projectname
    properties:
      username:
        type: string
        description: Username (in iRODS and keycloak)
      projectname:
        type: string
        description: Project name (Keycloak group)

  DatasetContent:
    type: object
    required:
      - name
      - type
    properties:
      name:
        type: string
        description: filename
      type:
        type: string
        description: directory or file
      size:
        type: integer
      create_time:
        type: string
      checksum:
        type: string
      contents:
        type: array
        items:
          $ref: '#/definitions/DatasetContent'
  DataReplication:
    type: object
    required:
      - status
    properties:
      status:
        type: string
        description: Status of the data replication process
        example: "Replication completed"
      PID:
        type: string
        description: EUDAT PID of the replicated data
        example: "1001/e4495e44-dc84-11ea-9c37-0050568f81d2"
      target_path:
        type: string
        description: Path to where the data are replicated
        example: "/IT4ILexisZone/project/proj1fc54ae5e387be0d369eddddc2010e5e/datasetL4988"
  DataSize:
    type: object
    required:
      - result
    properties:
      result:
        type: string
        description: Status of the datasize get process
        example: "Done"
      size:
        type: string
        description: dataset size
        example: "45645352354"
      totalfiles:
        type: string
        description: dataset files
        example: "343"
      smallfiles:
        type: string
        description: dataset files smaller than 32 MB
        example: "2"

#Alien4Cloud
  WorkflowTemplate:
    type: object
    properties:
      workflowTemplateName:
        type: string
      workflowTemplateID:
        type: string
      description:
        type: string
      inputParameters:
        type: array
        items:
          $ref: '#/definitions/InputParameter'
      inputFiles:
        type: array
        items:
          $ref: '#/definitions/InputFile'
      nodeTemplates:
        type: array
        items:
          $ref: '#/definitions/NodeTemplate'

  InputParameter:
    type: object
    properties:
      inputParamName:
        type: string
      inputParamType:
        type: string
      inputParamRequired:
        type: boolean
      displayName:
        type: string
      description:
        type: string
      inputParamDefaultValue:
        type: string
      task:
        type: string
      isDataset:
        type: boolean
      isDatasetId:
        type: boolean
      isDatasetPath:
        type: boolean
      inputParamValue:
        type: object

  InputFile:
    type: object
    properties:
      inputFileName:
        type: string
      inputFileType:
        type: string
      description:
        type: string
      path:
        type: string

  Workflow:
    type: object
    properties:
      workflowID:
        type: string
      workflowName:
        type: string
      projectID:
        type: string
      projectName:
        type: string
      workflowTemplateID:
        type: string
      description:
        type: string
      creationTime:
        type: string
      createdBy:
        type: string

  WorkflowDetail:
    type: object
    properties:
      workflowID:
        type: string
      workflowName:
        type: string
      projectID:
        type: string
      projectName:
        type: string
      projectShortName:
        type: string
      workflowTemplateID:
        type: string
      description:
        type: string
      createdBy:
        type: string
      creationTime:
        type: string
      inputParameters:
        type: array
        items:
          $ref: '#/definitions/InputParameter'
      inputFiles:
        type: array
        items:
          $ref: '#/definitions/InputFile'
      nodeTemplates:
        type: array
        items:
          $ref: '#/definitions/NodeTemplate'

  CreateWorkflowExecutionRequest:
    type: object
    properties:
      workflowTemplateID:
        type: string
      isCronJob:
        type: boolean
      isScheduledJob:
        type: boolean
      isBatchJob:
        type: boolean
      inputFiles:
        type: array
        items:
          $ref: '#/definitions/InputFile'
      inputParameters:
        type: object
        additionalProperties:
          type: object

  #Remove nested object here, also needs to be done in interface at same time.
  WorkflowRequest:
    type: object
    required:
      - workflowName
      - workflowTemplateID
      - projectID
      - description
    properties:
      workflowID:
        type: string
      workflowName:
        type: string
      projectID:
        type: string
      workflowTemplateID:
        type: string
      description:
        type: string

  NodeTemplate:
      type: object
      properties:
        nodeName:
          type: string
        nodeType:
          type: string
        tags:
          type: array
          items:
            $ref: '#/definitions/Tag'

  Tag:
    type: object
    properties:
      key:
        type: string
      value:
        type: string

  WorkflowExecution:
    type: object
    properties:
      workflowExecutionID:
        type: string
      workflowExecutionName:
        type: string
      workflowExecutionStatus:
        type: string
      workflowID:
        type: string
      workflowName:
        type: string
      a4cApplicationName:
        type: string
      a4cApplicationID:
        type: string
      creationTime:
        type: string

  WorkflowExecutionDetail:
    type: object
    required:
      -  workflowExecutionID
      -  workflowExecutionStatus
    properties:
      workflowID:
        description: Name of application
        type: string
      workflowExecutionStatus:
        description: Status of workflowExecution, ready, running, finished, failed
        type: string
      workflowExecutionID:
        description: workflowExecution ID
        type: string
      workflowExecutionName:
        description: workflowExecution ID
        type: string
      workflowExecutionStage:
        description: Name of workflow
        type: string
      workflowExecutionStageStatus:
        description: Status of workflow
        type: string
      creationTime:
        type: string
      createdBy:
        type: string
      outputProperties:
        type: array
        items:
          $ref: '#/definitions/OutputProperty'
      inputParameters:
        type: array
        items:
          $ref: '#/definitions/InputParameter'
      uploadedInputFiles:
        type: array
        items:
          $ref: '#/definitions/InputFile'
      nodeTemplates:
        type: array
        items:
          $ref: '#/definitions/NodeTemplate'

  OutputProperty:
    type: object
    properties:
      nodeName:
        type: string
      attributeName:
        type: string
      attributeValue:
        type: string

  WorkflowExecutionStepStatus:
    type: object
    properties:
      step:
        type: string
      precedingSteps:
        type: array
        items:
          type: string
      succeedingSteps:
        type: array
        items:
          type: string
      status:
        type: string
      stage:
        type: integer
      index:
        type: integer
      nodeName:
        type: string
      nodeType:
        type: string
      task:
        type: string
      location:
        type: string
      activityType:
        type: array
        items:
          type: string

  Logs:
    type: object
    properties:
      deploymentID:
        description: Deployment ID
        type: string
      deploymentPaaSID:
        description: deployment PaaS ID
        type: string
      level:
        description: Level
        type: string
      timestamp:
        description: Timestamp of log
        type: string
      workflowExecutionStage:
        description: WorkflowExecution Stage
        type: string
      executionID:
        description: execution ID
        type: string
      nodeID:
        description: Node ID
        type: string
      instanceID:
        description: Instance ID
        type: string
      interfaceName:
        description: Interface Name
        type: string
      operationName:
        description: Operation Name
        type: string
      content:
        description: Content of log message
        type: string

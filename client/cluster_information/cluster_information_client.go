// Code generated by go-swagger; DO NOT EDIT.

package cluster_information

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the cluster information client
type API interface {
	/*
	   GetCommandTemplate gets command template parameters name

	   Get command template parameters name*/
	GetCommandTemplate(ctx context.Context, params *GetCommandTemplateParams) (*GetCommandTemplateOK, error)
	/*
	   ListAvailableClusters gets available clusters

	   Get available clusters*/
	ListAvailableClusters(ctx context.Context, params *ListAvailableClustersParams) (*ListAvailableClustersOK, error)
}

// New creates a new cluster information API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for cluster information API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
GetCommandTemplate gets command template parameters name

Get command template parameters name
*/
func (a *Client) GetCommandTemplate(ctx context.Context, params *GetCommandTemplateParams) (*GetCommandTemplateOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCommandTemplate",
		Method:             "POST",
		PathPattern:        "/heappe/ClusterInformation/GetCommandTemplateParametersName",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCommandTemplateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCommandTemplateOK), nil

}

/*
ListAvailableClusters gets available clusters

Get available clusters
*/
func (a *Client) ListAvailableClusters(ctx context.Context, params *ListAvailableClustersParams) (*ListAvailableClustersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAvailableClusters",
		Method:             "GET",
		PathPattern:        "/heappe/ClusterInformation/ListAvailableClusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAvailableClustersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAvailableClustersOK), nil

}

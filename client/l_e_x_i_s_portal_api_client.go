// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"net/url"

	"github.com/go-openapi/runtime"
	rtclient "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/lexis-project/lexis-backend-services-api.git/client/approval_system_management"
	"github.com/lexis-project/lexis-backend-services-api.git/client/cluster_information"
	"github.com/lexis-project/lexis-backend-services-api.git/client/data_set_management"
	"github.com/lexis-project/lexis-backend-services-api.git/client/staging"
	"github.com/lexis-project/lexis-backend-services-api.git/client/usage_management"
	"github.com/lexis-project/lexis-backend-services-api.git/client/user_org_management"
	"github.com/lexis-project/lexis-backend-services-api.git/client/workflow_management"
)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "localhost"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/api/v0.2"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"http"}

type Config struct {
	// URL is the base URL of the upstream server
	URL *url.URL
	// Transport is an inner transport for the client
	Transport http.RoundTripper
	// AuthInfo is for authentication
	AuthInfo runtime.ClientAuthInfoWriter
}

// New creates a new l e x i s portal API HTTP client.
func New(c Config) *LEXISPortalAPI {
	var (
		host     = DefaultHost
		basePath = DefaultBasePath
		schemes  = DefaultSchemes
	)

	if c.URL != nil {
		host = c.URL.Host
		basePath = c.URL.Path
		schemes = []string{c.URL.Scheme}
	}

	transport := rtclient.New(host, basePath, schemes)
	if c.Transport != nil {
		transport.Transport = c.Transport
	}

	cli := new(LEXISPortalAPI)
	cli.Transport = transport
	cli.ApprovalSystemManagement = approval_system_management.New(transport, strfmt.Default, c.AuthInfo)
	cli.ClusterInformation = cluster_information.New(transport, strfmt.Default, c.AuthInfo)
	cli.DataSetManagement = data_set_management.New(transport, strfmt.Default, c.AuthInfo)
	cli.Staging = staging.New(transport, strfmt.Default, c.AuthInfo)
	cli.UsageManagement = usage_management.New(transport, strfmt.Default, c.AuthInfo)
	cli.UserOrgManagement = user_org_management.New(transport, strfmt.Default, c.AuthInfo)
	cli.WorkflowManagement = workflow_management.New(transport, strfmt.Default, c.AuthInfo)
	return cli
}

// LEXISPortalAPI is a client for l e x i s portal API
type LEXISPortalAPI struct {
	ApprovalSystemManagement *approval_system_management.Client
	ClusterInformation       *cluster_information.Client
	DataSetManagement        *data_set_management.Client
	Staging                  *staging.Client
	UsageManagement          *usage_management.Client
	UserOrgManagement        *user_org_management.Client
	WorkflowManagement       *workflow_management.Client
	Transport                runtime.ClientTransport
}

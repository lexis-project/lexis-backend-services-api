// Code generated by go-swagger; DO NOT EDIT.

package user_org_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// AddRoleReader is a Reader for the AddRole structure.
type AddRoleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddRoleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddRoleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAddRoleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddRoleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddRoleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAddRoleOK creates a AddRoleOK with default headers values
func NewAddRoleOK() *AddRoleOK {
	return &AddRoleOK{}
}

/*AddRoleOK handles this case with default header values.

Role added successfully
*/
type AddRoleOK struct {
	Payload *models.AuthorizationResponse
}

func (o *AddRoleOK) Error() string {
	return fmt.Sprintf("[POST /authz/{userID}/add/{role}][%d] addRoleOK  %+v", 200, o.Payload)
}

func (o *AddRoleOK) GetPayload() *models.AuthorizationResponse {
	return o.Payload
}

func (o *AddRoleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthorizationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddRoleUnauthorized creates a AddRoleUnauthorized with default headers values
func NewAddRoleUnauthorized() *AddRoleUnauthorized {
	return &AddRoleUnauthorized{}
}

/*AddRoleUnauthorized handles this case with default header values.

Unauthorized
*/
type AddRoleUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *AddRoleUnauthorized) Error() string {
	return fmt.Sprintf("[POST /authz/{userID}/add/{role}][%d] addRoleUnauthorized  %+v", 401, o.Payload)
}

func (o *AddRoleUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddRoleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddRoleForbidden creates a AddRoleForbidden with default headers values
func NewAddRoleForbidden() *AddRoleForbidden {
	return &AddRoleForbidden{}
}

/*AddRoleForbidden handles this case with default header values.

Forbidden
*/
type AddRoleForbidden struct {
	Payload *models.ErrorResponse
}

func (o *AddRoleForbidden) Error() string {
	return fmt.Sprintf("[POST /authz/{userID}/add/{role}][%d] addRoleForbidden  %+v", 403, o.Payload)
}

func (o *AddRoleForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddRoleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddRoleInternalServerError creates a AddRoleInternalServerError with default headers values
func NewAddRoleInternalServerError() *AddRoleInternalServerError {
	return &AddRoleInternalServerError{}
}

/*AddRoleInternalServerError handles this case with default header values.

unexpected error
*/
type AddRoleInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *AddRoleInternalServerError) Error() string {
	return fmt.Sprintf("[POST /authz/{userID}/add/{role}][%d] addRoleInternalServerError  %+v", 500, o.Payload)
}

func (o *AddRoleInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddRoleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package user_org_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// UpdateHPCResourceReader is a Reader for the UpdateHPCResource structure.
type UpdateHPCResourceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateHPCResourceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateHPCResourceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateHPCResourceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateHPCResourceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateHPCResourceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateHPCResourceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateHPCResourceOK creates a UpdateHPCResourceOK with default headers values
func NewUpdateHPCResourceOK() *UpdateHPCResourceOK {
	return &UpdateHPCResourceOK{}
}

/*UpdateHPCResourceOK handles this case with default header values.

updated HPCResource
*/
type UpdateHPCResourceOK struct {
	Payload *models.HPCResource
}

func (o *UpdateHPCResourceOK) Error() string {
	return fmt.Sprintf("[PUT /hpc/resource/{id}][%d] updateHPCResourceOK  %+v", 200, o.Payload)
}

func (o *UpdateHPCResourceOK) GetPayload() *models.HPCResource {
	return o.Payload
}

func (o *UpdateHPCResourceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HPCResource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateHPCResourceUnauthorized creates a UpdateHPCResourceUnauthorized with default headers values
func NewUpdateHPCResourceUnauthorized() *UpdateHPCResourceUnauthorized {
	return &UpdateHPCResourceUnauthorized{}
}

/*UpdateHPCResourceUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateHPCResourceUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *UpdateHPCResourceUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /hpc/resource/{id}][%d] updateHPCResourceUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateHPCResourceUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateHPCResourceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateHPCResourceForbidden creates a UpdateHPCResourceForbidden with default headers values
func NewUpdateHPCResourceForbidden() *UpdateHPCResourceForbidden {
	return &UpdateHPCResourceForbidden{}
}

/*UpdateHPCResourceForbidden handles this case with default header values.

Forbidden
*/
type UpdateHPCResourceForbidden struct {
	Payload *models.ErrorResponse
}

func (o *UpdateHPCResourceForbidden) Error() string {
	return fmt.Sprintf("[PUT /hpc/resource/{id}][%d] updateHPCResourceForbidden  %+v", 403, o.Payload)
}

func (o *UpdateHPCResourceForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateHPCResourceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateHPCResourceNotFound creates a UpdateHPCResourceNotFound with default headers values
func NewUpdateHPCResourceNotFound() *UpdateHPCResourceNotFound {
	return &UpdateHPCResourceNotFound{}
}

/*UpdateHPCResourceNotFound handles this case with default header values.

HPCResource with not found
*/
type UpdateHPCResourceNotFound struct {
	Payload *models.ErrorResponse
}

func (o *UpdateHPCResourceNotFound) Error() string {
	return fmt.Sprintf("[PUT /hpc/resource/{id}][%d] updateHPCResourceNotFound  %+v", 404, o.Payload)
}

func (o *UpdateHPCResourceNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateHPCResourceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateHPCResourceInternalServerError creates a UpdateHPCResourceInternalServerError with default headers values
func NewUpdateHPCResourceInternalServerError() *UpdateHPCResourceInternalServerError {
	return &UpdateHPCResourceInternalServerError{}
}

/*UpdateHPCResourceInternalServerError handles this case with default header values.

unexpected error
*/
type UpdateHPCResourceInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *UpdateHPCResourceInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /hpc/resource/{id}][%d] updateHPCResourceInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateHPCResourceInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateHPCResourceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package user_org_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// AddUserToProjectReader is a Reader for the AddUserToProject structure.
type AddUserToProjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddUserToProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddUserToProjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAddUserToProjectUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddUserToProjectForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddUserToProjectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddUserToProjectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAddUserToProjectOK creates a AddUserToProjectOK with default headers values
func NewAddUserToProjectOK() *AddUserToProjectOK {
	return &AddUserToProjectOK{}
}

/*AddUserToProjectOK handles this case with default header values.

user updated
*/
type AddUserToProjectOK struct {
	Payload *models.OKResponse
}

func (o *AddUserToProjectOK) Error() string {
	return fmt.Sprintf("[PUT /project/{id}/user/{userID}][%d] addUserToProjectOK  %+v", 200, o.Payload)
}

func (o *AddUserToProjectOK) GetPayload() *models.OKResponse {
	return o.Payload
}

func (o *AddUserToProjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OKResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUserToProjectUnauthorized creates a AddUserToProjectUnauthorized with default headers values
func NewAddUserToProjectUnauthorized() *AddUserToProjectUnauthorized {
	return &AddUserToProjectUnauthorized{}
}

/*AddUserToProjectUnauthorized handles this case with default header values.

Authorization error
*/
type AddUserToProjectUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *AddUserToProjectUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /project/{id}/user/{userID}][%d] addUserToProjectUnauthorized  %+v", 401, o.Payload)
}

func (o *AddUserToProjectUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddUserToProjectUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUserToProjectForbidden creates a AddUserToProjectForbidden with default headers values
func NewAddUserToProjectForbidden() *AddUserToProjectForbidden {
	return &AddUserToProjectForbidden{}
}

/*AddUserToProjectForbidden handles this case with default header values.

Authorization error
*/
type AddUserToProjectForbidden struct {
	Payload *models.ErrorResponse
}

func (o *AddUserToProjectForbidden) Error() string {
	return fmt.Sprintf("[PUT /project/{id}/user/{userID}][%d] addUserToProjectForbidden  %+v", 403, o.Payload)
}

func (o *AddUserToProjectForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddUserToProjectForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUserToProjectNotFound creates a AddUserToProjectNotFound with default headers values
func NewAddUserToProjectNotFound() *AddUserToProjectNotFound {
	return &AddUserToProjectNotFound{}
}

/*AddUserToProjectNotFound handles this case with default header values.

project with not found
*/
type AddUserToProjectNotFound struct {
	Payload *models.ErrorResponse
}

func (o *AddUserToProjectNotFound) Error() string {
	return fmt.Sprintf("[PUT /project/{id}/user/{userID}][%d] addUserToProjectNotFound  %+v", 404, o.Payload)
}

func (o *AddUserToProjectNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddUserToProjectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUserToProjectInternalServerError creates a AddUserToProjectInternalServerError with default headers values
func NewAddUserToProjectInternalServerError() *AddUserToProjectInternalServerError {
	return &AddUserToProjectInternalServerError{}
}

/*AddUserToProjectInternalServerError handles this case with default header values.

unexpected error
*/
type AddUserToProjectInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *AddUserToProjectInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /project/{id}/user/{userID}][%d] addUserToProjectInternalServerError  %+v", 500, o.Payload)
}

func (o *AddUserToProjectInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddUserToProjectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

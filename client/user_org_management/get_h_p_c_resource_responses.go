// Code generated by go-swagger; DO NOT EDIT.

package user_org_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// GetHPCResourceReader is a Reader for the GetHPCResource structure.
type GetHPCResourceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetHPCResourceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetHPCResourceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetHPCResourceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetHPCResourceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetHPCResourceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetHPCResourceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetHPCResourceOK creates a GetHPCResourceOK with default headers values
func NewGetHPCResourceOK() *GetHPCResourceOK {
	return &GetHPCResourceOK{}
}

/*GetHPCResourceOK handles this case with default header values.

HPCResource returned
*/
type GetHPCResourceOK struct {
	Payload *models.HPCResource
}

func (o *GetHPCResourceOK) Error() string {
	return fmt.Sprintf("[GET /hpc/resource/{id}][%d] getHPCResourceOK  %+v", 200, o.Payload)
}

func (o *GetHPCResourceOK) GetPayload() *models.HPCResource {
	return o.Payload
}

func (o *GetHPCResourceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HPCResource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHPCResourceUnauthorized creates a GetHPCResourceUnauthorized with default headers values
func NewGetHPCResourceUnauthorized() *GetHPCResourceUnauthorized {
	return &GetHPCResourceUnauthorized{}
}

/*GetHPCResourceUnauthorized handles this case with default header values.

Unauthorized
*/
type GetHPCResourceUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *GetHPCResourceUnauthorized) Error() string {
	return fmt.Sprintf("[GET /hpc/resource/{id}][%d] getHPCResourceUnauthorized  %+v", 401, o.Payload)
}

func (o *GetHPCResourceUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetHPCResourceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHPCResourceForbidden creates a GetHPCResourceForbidden with default headers values
func NewGetHPCResourceForbidden() *GetHPCResourceForbidden {
	return &GetHPCResourceForbidden{}
}

/*GetHPCResourceForbidden handles this case with default header values.

Forbidden
*/
type GetHPCResourceForbidden struct {
	Payload *models.ErrorResponse
}

func (o *GetHPCResourceForbidden) Error() string {
	return fmt.Sprintf("[GET /hpc/resource/{id}][%d] getHPCResourceForbidden  %+v", 403, o.Payload)
}

func (o *GetHPCResourceForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetHPCResourceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHPCResourceNotFound creates a GetHPCResourceNotFound with default headers values
func NewGetHPCResourceNotFound() *GetHPCResourceNotFound {
	return &GetHPCResourceNotFound{}
}

/*GetHPCResourceNotFound handles this case with default header values.

HPCResource with not found
*/
type GetHPCResourceNotFound struct {
	Payload *models.ErrorResponse
}

func (o *GetHPCResourceNotFound) Error() string {
	return fmt.Sprintf("[GET /hpc/resource/{id}][%d] getHPCResourceNotFound  %+v", 404, o.Payload)
}

func (o *GetHPCResourceNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetHPCResourceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHPCResourceInternalServerError creates a GetHPCResourceInternalServerError with default headers values
func NewGetHPCResourceInternalServerError() *GetHPCResourceInternalServerError {
	return &GetHPCResourceInternalServerError{}
}

/*GetHPCResourceInternalServerError handles this case with default header values.

unexpected error
*/
type GetHPCResourceInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *GetHPCResourceInternalServerError) Error() string {
	return fmt.Sprintf("[GET /hpc/resource/{id}][%d] getHPCResourceInternalServerError  %+v", 500, o.Payload)
}

func (o *GetHPCResourceInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetHPCResourceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

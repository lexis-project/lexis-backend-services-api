// Code generated by go-swagger; DO NOT EDIT.

package user_org_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewListProjectsParams creates a new ListProjectsParams object
// with the default values initialized.
func NewListProjectsParams() *ListProjectsParams {
	var (
		scopeDefault = string("ALL")
	)
	return &ListProjectsParams{
		Scope: &scopeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewListProjectsParamsWithTimeout creates a new ListProjectsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListProjectsParamsWithTimeout(timeout time.Duration) *ListProjectsParams {
	var (
		scopeDefault = string("ALL")
	)
	return &ListProjectsParams{
		Scope: &scopeDefault,

		timeout: timeout,
	}
}

// NewListProjectsParamsWithContext creates a new ListProjectsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListProjectsParamsWithContext(ctx context.Context) *ListProjectsParams {
	var (
		scopeDefault = string("ALL")
	)
	return &ListProjectsParams{
		Scope: &scopeDefault,

		Context: ctx,
	}
}

// NewListProjectsParamsWithHTTPClient creates a new ListProjectsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListProjectsParamsWithHTTPClient(client *http.Client) *ListProjectsParams {
	var (
		scopeDefault = string("ALL")
	)
	return &ListProjectsParams{
		Scope:      &scopeDefault,
		HTTPClient: client,
	}
}

/*ListProjectsParams contains all the parameters to send to the API endpoint
for the list projects operation typically these are written to a http.Request
*/
type ListProjectsParams struct {

	/*Scope
	  project scope switch

	*/
	Scope *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list projects params
func (o *ListProjectsParams) WithTimeout(timeout time.Duration) *ListProjectsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list projects params
func (o *ListProjectsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list projects params
func (o *ListProjectsParams) WithContext(ctx context.Context) *ListProjectsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list projects params
func (o *ListProjectsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list projects params
func (o *ListProjectsParams) WithHTTPClient(client *http.Client) *ListProjectsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list projects params
func (o *ListProjectsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithScope adds the scope to the list projects params
func (o *ListProjectsParams) WithScope(scope *string) *ListProjectsParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the list projects params
func (o *ListProjectsParams) SetScope(scope *string) {
	o.Scope = scope
}

// WriteToRequest writes these params to a swagger request
func (o *ListProjectsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Scope != nil {

		// query param scope
		var qrScope string
		if o.Scope != nil {
			qrScope = *o.Scope
		}
		qScope := qrScope
		if qScope != "" {
			if err := r.SetQueryParam("scope", qScope); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

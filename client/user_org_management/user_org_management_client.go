// Code generated by go-swagger; DO NOT EDIT.

package user_org_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the user org management client
type API interface {
	/*
	   AddRole adds a role to the specified user

	   It adds a role to the user, when assigning user role to project, then projectShortName and projectID are required*/
	AddRole(ctx context.Context, params *AddRoleParams) (*AddRoleOK, error)
	/*
	   AddUserToOrganization adds user to organization

	   Adds user to organization*/
	AddUserToOrganization(ctx context.Context, params *AddUserToOrganizationParams) (*AddUserToOrganizationOK, error)
	/*
	   AddUserToProject adds user to project

	   Add user to project*/
	AddUserToProject(ctx context.Context, params *AddUserToProjectParams) (*AddUserToProjectOK, error)
	/*
	   ClearRole clears the actual role of the user and assignes a end user one

	   It clears the actual role of the user and assignes a end_user one*/
	ClearRole(ctx context.Context, params *ClearRoleParams) (*ClearRoleOK, error)
	/*
	   CreateHPCResource creates h p c resource

	   Creates a new HPCResource*/
	CreateHPCResource(ctx context.Context, params *CreateHPCResourceParams) (*CreateHPCResourceCreated, error)
	/*
	   CreateOrganization creates organization

	   Creates a new organization*/
	CreateOrganization(ctx context.Context, params *CreateOrganizationParams) (*CreateOrganizationCreated, error)
	/*
	   CreateProject creates project

	   Creates a new project*/
	CreateProject(ctx context.Context, params *CreateProjectParams) (*CreateProjectCreated, error)
	/*
	   CreateUser creates a user

	   Creates a new user*/
	CreateUser(ctx context.Context, params *CreateUserParams) (*CreateUserCreated, error)
	/*
	   DeleteHPCResource deletes specific h p c resource

	   Delete HPCResource with given id*/
	DeleteHPCResource(ctx context.Context, params *DeleteHPCResourceParams) (*DeleteHPCResourceOK, error)
	/*
	   DeleteOrganization deletes specific organization

	   Delete organization with given organizationId*/
	DeleteOrganization(ctx context.Context, params *DeleteOrganizationParams) (*DeleteOrganizationOK, error)
	/*
	   DeleteProject deletes specific project

	   Delete project with given id*/
	DeleteProject(ctx context.Context, params *DeleteProjectParams) (*DeleteProjectOK, error)
	/*
	   DeleteUser deletes specific user

	   Delete user with given userId*/
	DeleteUser(ctx context.Context, params *DeleteUserParams) (*DeleteUserOK, error)
	/*
	   DeleteUserFromOrganization deletes user from organization

	   Delete user from organization*/
	DeleteUserFromOrganization(ctx context.Context, params *DeleteUserFromOrganizationParams) (*DeleteUserFromOrganizationOK, error)
	/*
	   DeleteUserFromProject deletes user from project

	   Delete user from project*/
	DeleteUserFromProject(ctx context.Context, params *DeleteUserFromProjectParams) (*DeleteUserFromProjectOK, error)
	/*
	   GetHPCResource gets specific h p c resource

	   get HPCResource with given id*/
	GetHPCResource(ctx context.Context, params *GetHPCResourceParams) (*GetHPCResourceOK, error)
	/*
	   GetOrganization gets specific organization

	   get organization with given organizationId*/
	GetOrganization(ctx context.Context, params *GetOrganizationParams) (*GetOrganizationOK, error)
	/*
	   GetProject gets specific project

	   get project with given id*/
	GetProject(ctx context.Context, params *GetProjectParams) (*GetProjectOK, error)
	/*
	   GetUser gets specific user

	   get user with given userId*/
	GetUser(ctx context.Context, params *GetUserParams) (*GetUserOK, error)
	/*
	   ListHPCResources lists h p c resource

	   lists all HPCResources*/
	ListHPCResources(ctx context.Context, params *ListHPCResourcesParams) (*ListHPCResourcesOK, error)
	/*
	   ListOrganizations lists organizations

	   lists all organizations*/
	ListOrganizations(ctx context.Context, params *ListOrganizationsParams) (*ListOrganizationsOK, error)
	/*
	   ListProjects lists projects

	   lists all projects*/
	ListProjects(ctx context.Context, params *ListProjectsParams) (*ListProjectsOK, error)
	/*
	   ListUsers lists all users

	   lists all users (tbd - pagination?)*/
	ListUsers(ctx context.Context, params *ListUsersParams) (*ListUsersOK, error)
	/*
	   UpdateHPCResource updates specific h p c resource

	   Update HPCResource with given id*/
	UpdateHPCResource(ctx context.Context, params *UpdateHPCResourceParams) (*UpdateHPCResourceOK, error)
	/*
	   UpdateOrganization updates specific organization

	   Update organization with given organizationId*/
	UpdateOrganization(ctx context.Context, params *UpdateOrganizationParams) (*UpdateOrganizationOK, error)
	/*
	   UpdateProject updates specific project

	   Update project with given id*/
	UpdateProject(ctx context.Context, params *UpdateProjectParams) (*UpdateProjectOK, error)
	/*
	   UpdateUser updates specific user

	   Update user with given userId*/
	UpdateUser(ctx context.Context, params *UpdateUserParams) (*UpdateUserOK, error)
}

// New creates a new user org management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for user org management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
AddRole adds a role to the specified user

It adds a role to the user, when assigning user role to project, then projectShortName and projectID are required
*/
func (a *Client) AddRole(ctx context.Context, params *AddRoleParams) (*AddRoleOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addRole",
		Method:             "POST",
		PathPattern:        "/authz/{userID}/add/{role}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddRoleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddRoleOK), nil

}

/*
AddUserToOrganization adds user to organization

Adds user to organization
*/
func (a *Client) AddUserToOrganization(ctx context.Context, params *AddUserToOrganizationParams) (*AddUserToOrganizationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addUserToOrganization",
		Method:             "PUT",
		PathPattern:        "/organization/{id}/user/{userID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddUserToOrganizationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddUserToOrganizationOK), nil

}

/*
AddUserToProject adds user to project

Add user to project
*/
func (a *Client) AddUserToProject(ctx context.Context, params *AddUserToProjectParams) (*AddUserToProjectOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addUserToProject",
		Method:             "PUT",
		PathPattern:        "/project/{id}/user/{userID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddUserToProjectReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddUserToProjectOK), nil

}

/*
ClearRole clears the actual role of the user and assignes a end user one

It clears the actual role of the user and assignes a end_user one
*/
func (a *Client) ClearRole(ctx context.Context, params *ClearRoleParams) (*ClearRoleOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "clearRole",
		Method:             "POST",
		PathPattern:        "/authz/{userID}/clear",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ClearRoleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ClearRoleOK), nil

}

/*
CreateHPCResource creates h p c resource

Creates a new HPCResource
*/
func (a *Client) CreateHPCResource(ctx context.Context, params *CreateHPCResourceParams) (*CreateHPCResourceCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createHPCResource",
		Method:             "POST",
		PathPattern:        "/hpc/resource",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateHPCResourceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateHPCResourceCreated), nil

}

/*
CreateOrganization creates organization

Creates a new organization
*/
func (a *Client) CreateOrganization(ctx context.Context, params *CreateOrganizationParams) (*CreateOrganizationCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createOrganization",
		Method:             "POST",
		PathPattern:        "/organization",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateOrganizationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateOrganizationCreated), nil

}

/*
CreateProject creates project

Creates a new project
*/
func (a *Client) CreateProject(ctx context.Context, params *CreateProjectParams) (*CreateProjectCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProject",
		Method:             "POST",
		PathPattern:        "/project",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateProjectReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateProjectCreated), nil

}

/*
CreateUser creates a user

Creates a new user
*/
func (a *Client) CreateUser(ctx context.Context, params *CreateUserParams) (*CreateUserCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createUser",
		Method:             "POST",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateUserReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateUserCreated), nil

}

/*
DeleteHPCResource deletes specific h p c resource

Delete HPCResource with given id
*/
func (a *Client) DeleteHPCResource(ctx context.Context, params *DeleteHPCResourceParams) (*DeleteHPCResourceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteHPCResource",
		Method:             "DELETE",
		PathPattern:        "/hpc/resource/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteHPCResourceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteHPCResourceOK), nil

}

/*
DeleteOrganization deletes specific organization

Delete organization with given organizationId
*/
func (a *Client) DeleteOrganization(ctx context.Context, params *DeleteOrganizationParams) (*DeleteOrganizationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOrganization",
		Method:             "DELETE",
		PathPattern:        "/organization/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOrganizationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOrganizationOK), nil

}

/*
DeleteProject deletes specific project

Delete project with given id
*/
func (a *Client) DeleteProject(ctx context.Context, params *DeleteProjectParams) (*DeleteProjectOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProject",
		Method:             "DELETE",
		PathPattern:        "/project/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProjectReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteProjectOK), nil

}

/*
DeleteUser deletes specific user

Delete user with given userId
*/
func (a *Client) DeleteUser(ctx context.Context, params *DeleteUserParams) (*DeleteUserOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUser",
		Method:             "DELETE",
		PathPattern:        "/user/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUserReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserOK), nil

}

/*
DeleteUserFromOrganization deletes user from organization

Delete user from organization
*/
func (a *Client) DeleteUserFromOrganization(ctx context.Context, params *DeleteUserFromOrganizationParams) (*DeleteUserFromOrganizationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUserFromOrganization",
		Method:             "DELETE",
		PathPattern:        "/organization/{id}/user/{userID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUserFromOrganizationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserFromOrganizationOK), nil

}

/*
DeleteUserFromProject deletes user from project

Delete user from project
*/
func (a *Client) DeleteUserFromProject(ctx context.Context, params *DeleteUserFromProjectParams) (*DeleteUserFromProjectOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUserFromProject",
		Method:             "DELETE",
		PathPattern:        "/project/{id}/user/{userID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUserFromProjectReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserFromProjectOK), nil

}

/*
GetHPCResource gets specific h p c resource

get HPCResource with given id
*/
func (a *Client) GetHPCResource(ctx context.Context, params *GetHPCResourceParams) (*GetHPCResourceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getHPCResource",
		Method:             "GET",
		PathPattern:        "/hpc/resource/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHPCResourceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetHPCResourceOK), nil

}

/*
GetOrganization gets specific organization

get organization with given organizationId
*/
func (a *Client) GetOrganization(ctx context.Context, params *GetOrganizationParams) (*GetOrganizationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganization",
		Method:             "GET",
		PathPattern:        "/organization/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOrganizationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrganizationOK), nil

}

/*
GetProject gets specific project

get project with given id
*/
func (a *Client) GetProject(ctx context.Context, params *GetProjectParams) (*GetProjectOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProject",
		Method:             "GET",
		PathPattern:        "/project/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProjectReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProjectOK), nil

}

/*
GetUser gets specific user

get user with given userId
*/
func (a *Client) GetUser(ctx context.Context, params *GetUserParams) (*GetUserOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUser",
		Method:             "GET",
		PathPattern:        "/user/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserOK), nil

}

/*
ListHPCResources lists h p c resource

lists all HPCResources
*/
func (a *Client) ListHPCResources(ctx context.Context, params *ListHPCResourcesParams) (*ListHPCResourcesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listHPCResources",
		Method:             "GET",
		PathPattern:        "/hpc/resource",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListHPCResourcesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListHPCResourcesOK), nil

}

/*
ListOrganizations lists organizations

lists all organizations
*/
func (a *Client) ListOrganizations(ctx context.Context, params *ListOrganizationsParams) (*ListOrganizationsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listOrganizations",
		Method:             "GET",
		PathPattern:        "/organization",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListOrganizationsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListOrganizationsOK), nil

}

/*
ListProjects lists projects

lists all projects
*/
func (a *Client) ListProjects(ctx context.Context, params *ListProjectsParams) (*ListProjectsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listProjects",
		Method:             "GET",
		PathPattern:        "/project",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListProjectsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListProjectsOK), nil

}

/*
ListUsers lists all users

lists all users (tbd - pagination?)
*/
func (a *Client) ListUsers(ctx context.Context, params *ListUsersParams) (*ListUsersOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listUsers",
		Method:             "GET",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListUsersReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListUsersOK), nil

}

/*
UpdateHPCResource updates specific h p c resource

Update HPCResource with given id
*/
func (a *Client) UpdateHPCResource(ctx context.Context, params *UpdateHPCResourceParams) (*UpdateHPCResourceOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateHPCResource",
		Method:             "PUT",
		PathPattern:        "/hpc/resource/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateHPCResourceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateHPCResourceOK), nil

}

/*
UpdateOrganization updates specific organization

Update organization with given organizationId
*/
func (a *Client) UpdateOrganization(ctx context.Context, params *UpdateOrganizationParams) (*UpdateOrganizationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateOrganization",
		Method:             "PUT",
		PathPattern:        "/organization/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateOrganizationReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateOrganizationOK), nil

}

/*
UpdateProject updates specific project

Update project with given id
*/
func (a *Client) UpdateProject(ctx context.Context, params *UpdateProjectParams) (*UpdateProjectOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateProject",
		Method:             "PUT",
		PathPattern:        "/project/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateProjectReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateProjectOK), nil

}

/*
UpdateUser updates specific user

Update user with given userId
*/
func (a *Client) UpdateUser(ctx context.Context, params *UpdateUserParams) (*UpdateUserOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateUser",
		Method:             "PUT",
		PathPattern:        "/user/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateUserReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateUserOK), nil

}

// Code generated by go-swagger; DO NOT EDIT.

package workflow_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// NewCreateWorkflowExecutionParams creates a new CreateWorkflowExecutionParams object
// with the default values initialized.
func NewCreateWorkflowExecutionParams() *CreateWorkflowExecutionParams {
	var ()
	return &CreateWorkflowExecutionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateWorkflowExecutionParamsWithTimeout creates a new CreateWorkflowExecutionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateWorkflowExecutionParamsWithTimeout(timeout time.Duration) *CreateWorkflowExecutionParams {
	var ()
	return &CreateWorkflowExecutionParams{

		timeout: timeout,
	}
}

// NewCreateWorkflowExecutionParamsWithContext creates a new CreateWorkflowExecutionParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateWorkflowExecutionParamsWithContext(ctx context.Context) *CreateWorkflowExecutionParams {
	var ()
	return &CreateWorkflowExecutionParams{

		Context: ctx,
	}
}

// NewCreateWorkflowExecutionParamsWithHTTPClient creates a new CreateWorkflowExecutionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateWorkflowExecutionParamsWithHTTPClient(client *http.Client) *CreateWorkflowExecutionParams {
	var ()
	return &CreateWorkflowExecutionParams{
		HTTPClient: client,
	}
}

/*CreateWorkflowExecutionParams contains all the parameters to send to the API endpoint
for the create workflow execution operation typically these are written to a http.Request
*/
type CreateWorkflowExecutionParams struct {

	/*WorkflowExecutionRequest
	  Create LEXIS Workflow Execution request

	*/
	WorkflowExecutionRequest *models.CreateWorkflowExecutionRequest
	/*WorkflowID
	  WorkflowId for WorkflowExecution to be created.

	*/
	WorkflowID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create workflow execution params
func (o *CreateWorkflowExecutionParams) WithTimeout(timeout time.Duration) *CreateWorkflowExecutionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create workflow execution params
func (o *CreateWorkflowExecutionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create workflow execution params
func (o *CreateWorkflowExecutionParams) WithContext(ctx context.Context) *CreateWorkflowExecutionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create workflow execution params
func (o *CreateWorkflowExecutionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create workflow execution params
func (o *CreateWorkflowExecutionParams) WithHTTPClient(client *http.Client) *CreateWorkflowExecutionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create workflow execution params
func (o *CreateWorkflowExecutionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithWorkflowExecutionRequest adds the workflowExecutionRequest to the create workflow execution params
func (o *CreateWorkflowExecutionParams) WithWorkflowExecutionRequest(workflowExecutionRequest *models.CreateWorkflowExecutionRequest) *CreateWorkflowExecutionParams {
	o.SetWorkflowExecutionRequest(workflowExecutionRequest)
	return o
}

// SetWorkflowExecutionRequest adds the workflowExecutionRequest to the create workflow execution params
func (o *CreateWorkflowExecutionParams) SetWorkflowExecutionRequest(workflowExecutionRequest *models.CreateWorkflowExecutionRequest) {
	o.WorkflowExecutionRequest = workflowExecutionRequest
}

// WithWorkflowID adds the workflowID to the create workflow execution params
func (o *CreateWorkflowExecutionParams) WithWorkflowID(workflowID string) *CreateWorkflowExecutionParams {
	o.SetWorkflowID(workflowID)
	return o
}

// SetWorkflowID adds the workflowId to the create workflow execution params
func (o *CreateWorkflowExecutionParams) SetWorkflowID(workflowID string) {
	o.WorkflowID = workflowID
}

// WriteToRequest writes these params to a swagger request
func (o *CreateWorkflowExecutionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.WorkflowExecutionRequest != nil {
		if err := r.SetBodyParam(o.WorkflowExecutionRequest); err != nil {
			return err
		}
	}

	// path param workflowId
	if err := r.SetPathParam("workflowId", o.WorkflowID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

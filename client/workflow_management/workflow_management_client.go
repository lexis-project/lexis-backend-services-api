// Code generated by go-swagger; DO NOT EDIT.

package workflow_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the workflow management client
type API interface {
	/*
	   DeleteWorkflow deletes l e x i s workflow on the system

	   Delete an already existing workflow on the system*/
	DeleteWorkflow(ctx context.Context, params *DeleteWorkflowParams) (*DeleteWorkflowOK, error)
	/*
	   CancelWorkflowExecution cancels a l e x i s workflow execution

	   Cancels given LEXIS Workflow Execution.*/
	CancelWorkflowExecution(ctx context.Context, params *CancelWorkflowExecutionParams) (*CancelWorkflowExecutionOK, error)
	/*
	   CreateWorkflow creates a new l e x i s workflow on the system

	   If successfull returns a rest response with the id of the created LEXIS workflow in data. If not successful a rest response with an error content is returned.*/
	CreateWorkflow(ctx context.Context, params *CreateWorkflowParams) (*CreateWorkflowCreated, error)
	/*
	   CreateWorkflowExecution ts o d o needs implemented with t o s c a 1 3 capabilitise create a new l e x i s workflow execution by providing remaining inputs

	   Creates a LEXIS workflow execution from a LEXIS workflow.
	   The name of the resulting workflow execution will be of the form `n-[projectShortName]` where `n` is the index of the workflow execution withing it's workflow.
	   The workflow execution name takes on the suffix `_cron` or `_scheduled` where it is a cron or scheduled job according to the request parameters.
	   For example, the workflow execution `2-dummyprj_cron` is the third workflow execution from it's workflow under the project `dummyprj` and it is a cron job.
	*/
	CreateWorkflowExecution(ctx context.Context, params *CreateWorkflowExecutionParams) (*CreateWorkflowExecutionCreated, error)
	/*
	   CreateWorkflowExecutions creates a batch of l e x i s workflow executions from a l e x i s workflow

	   Create a batch of LEXIS WorkflowExecutions from a LEXIS Workflow given an array of WorkflowExecution parameters*/
	CreateWorkflowExecutions(ctx context.Context, params *CreateWorkflowExecutionsParams) (*CreateWorkflowExecutionsCreated, error)
	/*
	   DeleteWorkflowExecution deletes a l e x i s workflow execution

	   Removes given LEXIS Workflow Execution.*/
	DeleteWorkflowExecution(ctx context.Context, params *DeleteWorkflowExecutionParams) (*DeleteWorkflowExecutionOK, error)
	/*
	   GetWorkflow returns detailed info on l e x i s workflow for given workflow ID

	   Get the workflow with the given workflowId*/
	GetWorkflow(ctx context.Context, params *GetWorkflowParams) (*GetWorkflowOK, error)
	/*
	   GetWorkflowExecutionDetail returns l e x i s workflow execution detail

	   Return current LEXIS Workflow Execution detail*/
	GetWorkflowExecutionDetail(ctx context.Context, params *GetWorkflowExecutionDetailParams) (*GetWorkflowExecutionDetailOK, error)
	/*
	   GetWorkflowExecutionLogs returns detailed logs of l e x i s workflow execution

	   Return logs on given LEXIS Workflow Execution*/
	GetWorkflowExecutionLogs(ctx context.Context, params *GetWorkflowExecutionLogsParams) (*GetWorkflowExecutionLogsOK, error)
	/*
	   GetWorkflowExecutionStepStatus returns detailed status of lexis workflow execution and its tasks

	   Return Task Status' on given LEXIS Workflow Execution*/
	GetWorkflowExecutionStepStatus(ctx context.Context, params *GetWorkflowExecutionStepStatusParams) (*GetWorkflowExecutionStepStatusOK, error)
	/*
	   GetWorkflowTemplate returns detailed info on workflow template give workflow template ID

	   Get the workflow template with the given workflowTemplateId*/
	GetWorkflowTemplate(ctx context.Context, params *GetWorkflowTemplateParams) (*GetWorkflowTemplateOK, error)
	/*
	   GetWorkflowTemplates returns list of available workflow templates*/
	GetWorkflowTemplates(ctx context.Context, params *GetWorkflowTemplatesParams) (*GetWorkflowTemplatesOK, error)
	/*
	   GetWorkflows returns list of available l e x i s workflows*/
	GetWorkflows(ctx context.Context, params *GetWorkflowsParams) (*GetWorkflowsOK, error)
	/*
	   ListWorkflowExecutions lists the current available l e x i s workflow executions

	   List the current available LEXIS Workflow Executions for the given user.*/
	ListWorkflowExecutions(ctx context.Context, params *ListWorkflowExecutionsParams) (*ListWorkflowExecutionsOK, error)
	/*
	   UploadWorkflowTemplate creates a new l e x i s workflow template on the system

	   If successful returns a rest response with the id of the created LEXIS workflow template. If not successful a rest response with an error content is returned.*/
	UploadWorkflowTemplate(ctx context.Context, params *UploadWorkflowTemplateParams) (*UploadWorkflowTemplateCreated, error)
}

// New creates a new workflow management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for workflow management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteWorkflow deletes l e x i s workflow on the system

Delete an already existing workflow on the system
*/
func (a *Client) DeleteWorkflow(ctx context.Context, params *DeleteWorkflowParams) (*DeleteWorkflowOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteWorkflow",
		Method:             "DELETE",
		PathPattern:        "/workflow/{workflowId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteWorkflowReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWorkflowOK), nil

}

/*
CancelWorkflowExecution cancels a l e x i s workflow execution

Cancels given LEXIS Workflow Execution.
*/
func (a *Client) CancelWorkflowExecution(ctx context.Context, params *CancelWorkflowExecutionParams) (*CancelWorkflowExecutionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cancelWorkflowExecution",
		Method:             "DELETE",
		PathPattern:        "/workflow/{workflowId}/execution/{workflowExecutionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CancelWorkflowExecutionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CancelWorkflowExecutionOK), nil

}

/*
CreateWorkflow creates a new l e x i s workflow on the system

If successfull returns a rest response with the id of the created LEXIS workflow in data. If not successful a rest response with an error content is returned.
*/
func (a *Client) CreateWorkflow(ctx context.Context, params *CreateWorkflowParams) (*CreateWorkflowCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createWorkflow",
		Method:             "POST",
		PathPattern:        "/workflow",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateWorkflowReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateWorkflowCreated), nil

}

/*
CreateWorkflowExecution ts o d o needs implemented with t o s c a 1 3 capabilitise create a new l e x i s workflow execution by providing remaining inputs

Creates a LEXIS workflow execution from a LEXIS workflow.
The name of the resulting workflow execution will be of the form `n-[projectShortName]` where `n` is the index of the workflow execution withing it's workflow.
The workflow execution name takes on the suffix `_cron` or `_scheduled` where it is a cron or scheduled job according to the request parameters.
For example, the workflow execution `2-dummyprj_cron` is the third workflow execution from it's workflow under the project `dummyprj` and it is a cron job.

*/
func (a *Client) CreateWorkflowExecution(ctx context.Context, params *CreateWorkflowExecutionParams) (*CreateWorkflowExecutionCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createWorkflowExecution",
		Method:             "POST",
		PathPattern:        "/workflow/{workflowId}/execution",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateWorkflowExecutionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateWorkflowExecutionCreated), nil

}

/*
CreateWorkflowExecutions creates a batch of l e x i s workflow executions from a l e x i s workflow

Create a batch of LEXIS WorkflowExecutions from a LEXIS Workflow given an array of WorkflowExecution parameters
*/
func (a *Client) CreateWorkflowExecutions(ctx context.Context, params *CreateWorkflowExecutionsParams) (*CreateWorkflowExecutionsCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createWorkflowExecutions",
		Method:             "POST",
		PathPattern:        "/workflow/{workflowId}/executions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateWorkflowExecutionsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateWorkflowExecutionsCreated), nil

}

/*
DeleteWorkflowExecution deletes a l e x i s workflow execution

Removes given LEXIS Workflow Execution.
*/
func (a *Client) DeleteWorkflowExecution(ctx context.Context, params *DeleteWorkflowExecutionParams) (*DeleteWorkflowExecutionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWorkflowExecution",
		Method:             "POST",
		PathPattern:        "/workflow/{workflowId}/execution/{workflowExecutionId}/remove",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteWorkflowExecutionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWorkflowExecutionOK), nil

}

/*
GetWorkflow returns detailed info on l e x i s workflow for given workflow ID

Get the workflow with the given workflowId
*/
func (a *Client) GetWorkflow(ctx context.Context, params *GetWorkflowParams) (*GetWorkflowOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkflow",
		Method:             "GET",
		PathPattern:        "/workflow/{workflowId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkflowReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkflowOK), nil

}

/*
GetWorkflowExecutionDetail returns l e x i s workflow execution detail

Return current LEXIS Workflow Execution detail
*/
func (a *Client) GetWorkflowExecutionDetail(ctx context.Context, params *GetWorkflowExecutionDetailParams) (*GetWorkflowExecutionDetailOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkflowExecutionDetail",
		Method:             "GET",
		PathPattern:        "/workflow/{workflowId}/execution/{workflowExecutionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkflowExecutionDetailReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkflowExecutionDetailOK), nil

}

/*
GetWorkflowExecutionLogs returns detailed logs of l e x i s workflow execution

Return logs on given LEXIS Workflow Execution
*/
func (a *Client) GetWorkflowExecutionLogs(ctx context.Context, params *GetWorkflowExecutionLogsParams) (*GetWorkflowExecutionLogsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkflowExecutionLogs",
		Method:             "GET",
		PathPattern:        "/workflow/{workflowId}/execution/{workflowExecutionId}/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkflowExecutionLogsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkflowExecutionLogsOK), nil

}

/*
GetWorkflowExecutionStepStatus returns detailed status of lexis workflow execution and its tasks

Return Task Status' on given LEXIS Workflow Execution
*/
func (a *Client) GetWorkflowExecutionStepStatus(ctx context.Context, params *GetWorkflowExecutionStepStatusParams) (*GetWorkflowExecutionStepStatusOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkflowExecutionStepStatus",
		Method:             "GET",
		PathPattern:        "/workflow/{workflowId}/execution/{workflowExecutionId}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkflowExecutionStepStatusReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkflowExecutionStepStatusOK), nil

}

/*
GetWorkflowTemplate returns detailed info on workflow template give workflow template ID

Get the workflow template with the given workflowTemplateId
*/
func (a *Client) GetWorkflowTemplate(ctx context.Context, params *GetWorkflowTemplateParams) (*GetWorkflowTemplateOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkflowTemplate",
		Method:             "GET",
		PathPattern:        "/workflow/template/{workflowTemplateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkflowTemplateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkflowTemplateOK), nil

}

/*
GetWorkflowTemplates returns list of available workflow templates
*/
func (a *Client) GetWorkflowTemplates(ctx context.Context, params *GetWorkflowTemplatesParams) (*GetWorkflowTemplatesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkflowTemplates",
		Method:             "GET",
		PathPattern:        "/workflow/template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkflowTemplatesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkflowTemplatesOK), nil

}

/*
GetWorkflows returns list of available l e x i s workflows
*/
func (a *Client) GetWorkflows(ctx context.Context, params *GetWorkflowsParams) (*GetWorkflowsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkflows",
		Method:             "GET",
		PathPattern:        "/workflow",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkflowsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkflowsOK), nil

}

/*
ListWorkflowExecutions lists the current available l e x i s workflow executions

List the current available LEXIS Workflow Executions for the given user.
*/
func (a *Client) ListWorkflowExecutions(ctx context.Context, params *ListWorkflowExecutionsParams) (*ListWorkflowExecutionsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listWorkflowExecutions",
		Method:             "GET",
		PathPattern:        "/workflow/{workflowId}/execution",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListWorkflowExecutionsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListWorkflowExecutionsOK), nil

}

/*
UploadWorkflowTemplate creates a new l e x i s workflow template on the system

If successful returns a rest response with the id of the created LEXIS workflow template. If not successful a rest response with an error content is returned.
*/
func (a *Client) UploadWorkflowTemplate(ctx context.Context, params *UploadWorkflowTemplateParams) (*UploadWorkflowTemplateCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "uploadWorkflowTemplate",
		Method:             "POST",
		PathPattern:        "/workflow/template/upload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UploadWorkflowTemplateReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UploadWorkflowTemplateCreated), nil

}

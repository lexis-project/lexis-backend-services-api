// Code generated by go-swagger; DO NOT EDIT.

package workflow_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// CreateWorkflowReader is a Reader for the CreateWorkflow structure.
type CreateWorkflowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateWorkflowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateWorkflowCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateWorkflowBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateWorkflowUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateWorkflowConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateWorkflowInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateWorkflowCreated creates a CreateWorkflowCreated with default headers values
func NewCreateWorkflowCreated() *CreateWorkflowCreated {
	return &CreateWorkflowCreated{}
}

/*CreateWorkflowCreated handles this case with default header values.

Workflow Created
*/
type CreateWorkflowCreated struct {
	Payload *models.ItemCreatedResponse
}

func (o *CreateWorkflowCreated) Error() string {
	return fmt.Sprintf("[POST /workflow][%d] createWorkflowCreated  %+v", 201, o.Payload)
}

func (o *CreateWorkflowCreated) GetPayload() *models.ItemCreatedResponse {
	return o.Payload
}

func (o *CreateWorkflowCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ItemCreatedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateWorkflowBadRequest creates a CreateWorkflowBadRequest with default headers values
func NewCreateWorkflowBadRequest() *CreateWorkflowBadRequest {
	return &CreateWorkflowBadRequest{}
}

/*CreateWorkflowBadRequest handles this case with default header values.

invalid input, object invalid
*/
type CreateWorkflowBadRequest struct {
	Payload *models.InvalidResponse
}

func (o *CreateWorkflowBadRequest) Error() string {
	return fmt.Sprintf("[POST /workflow][%d] createWorkflowBadRequest  %+v", 400, o.Payload)
}

func (o *CreateWorkflowBadRequest) GetPayload() *models.InvalidResponse {
	return o.Payload
}

func (o *CreateWorkflowBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InvalidResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateWorkflowUnauthorized creates a CreateWorkflowUnauthorized with default headers values
func NewCreateWorkflowUnauthorized() *CreateWorkflowUnauthorized {
	return &CreateWorkflowUnauthorized{}
}

/*CreateWorkflowUnauthorized handles this case with default header values.

Unauthorized
*/
type CreateWorkflowUnauthorized struct {
	Payload *models.AuthorizationResponse
}

func (o *CreateWorkflowUnauthorized) Error() string {
	return fmt.Sprintf("[POST /workflow][%d] createWorkflowUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateWorkflowUnauthorized) GetPayload() *models.AuthorizationResponse {
	return o.Payload
}

func (o *CreateWorkflowUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthorizationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateWorkflowConflict creates a CreateWorkflowConflict with default headers values
func NewCreateWorkflowConflict() *CreateWorkflowConflict {
	return &CreateWorkflowConflict{}
}

/*CreateWorkflowConflict handles this case with default header values.

Workflow Name already exists
*/
type CreateWorkflowConflict struct {
	Payload *models.ConflictResponse
}

func (o *CreateWorkflowConflict) Error() string {
	return fmt.Sprintf("[POST /workflow][%d] createWorkflowConflict  %+v", 409, o.Payload)
}

func (o *CreateWorkflowConflict) GetPayload() *models.ConflictResponse {
	return o.Payload
}

func (o *CreateWorkflowConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConflictResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateWorkflowInternalServerError creates a CreateWorkflowInternalServerError with default headers values
func NewCreateWorkflowInternalServerError() *CreateWorkflowInternalServerError {
	return &CreateWorkflowInternalServerError{}
}

/*CreateWorkflowInternalServerError handles this case with default header values.

unexpected error
*/
type CreateWorkflowInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *CreateWorkflowInternalServerError) Error() string {
	return fmt.Sprintf("[POST /workflow][%d] createWorkflowInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateWorkflowInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateWorkflowInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package workflow_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetWorkflowExecutionDetailParams creates a new GetWorkflowExecutionDetailParams object
// with the default values initialized.
func NewGetWorkflowExecutionDetailParams() *GetWorkflowExecutionDetailParams {
	var ()
	return &GetWorkflowExecutionDetailParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetWorkflowExecutionDetailParamsWithTimeout creates a new GetWorkflowExecutionDetailParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetWorkflowExecutionDetailParamsWithTimeout(timeout time.Duration) *GetWorkflowExecutionDetailParams {
	var ()
	return &GetWorkflowExecutionDetailParams{

		timeout: timeout,
	}
}

// NewGetWorkflowExecutionDetailParamsWithContext creates a new GetWorkflowExecutionDetailParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetWorkflowExecutionDetailParamsWithContext(ctx context.Context) *GetWorkflowExecutionDetailParams {
	var ()
	return &GetWorkflowExecutionDetailParams{

		Context: ctx,
	}
}

// NewGetWorkflowExecutionDetailParamsWithHTTPClient creates a new GetWorkflowExecutionDetailParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetWorkflowExecutionDetailParamsWithHTTPClient(client *http.Client) *GetWorkflowExecutionDetailParams {
	var ()
	return &GetWorkflowExecutionDetailParams{
		HTTPClient: client,
	}
}

/*GetWorkflowExecutionDetailParams contains all the parameters to send to the API endpoint
for the get workflow execution detail operation typically these are written to a http.Request
*/
type GetWorkflowExecutionDetailParams struct {

	/*WorkflowExecutionID
	  workflowExecutionId for LEXIS Workflow Execution required

	*/
	WorkflowExecutionID string
	/*WorkflowID
	  workflowID for LEXIS Workflow Execution required

	*/
	WorkflowID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get workflow execution detail params
func (o *GetWorkflowExecutionDetailParams) WithTimeout(timeout time.Duration) *GetWorkflowExecutionDetailParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get workflow execution detail params
func (o *GetWorkflowExecutionDetailParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get workflow execution detail params
func (o *GetWorkflowExecutionDetailParams) WithContext(ctx context.Context) *GetWorkflowExecutionDetailParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get workflow execution detail params
func (o *GetWorkflowExecutionDetailParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get workflow execution detail params
func (o *GetWorkflowExecutionDetailParams) WithHTTPClient(client *http.Client) *GetWorkflowExecutionDetailParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get workflow execution detail params
func (o *GetWorkflowExecutionDetailParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithWorkflowExecutionID adds the workflowExecutionID to the get workflow execution detail params
func (o *GetWorkflowExecutionDetailParams) WithWorkflowExecutionID(workflowExecutionID string) *GetWorkflowExecutionDetailParams {
	o.SetWorkflowExecutionID(workflowExecutionID)
	return o
}

// SetWorkflowExecutionID adds the workflowExecutionId to the get workflow execution detail params
func (o *GetWorkflowExecutionDetailParams) SetWorkflowExecutionID(workflowExecutionID string) {
	o.WorkflowExecutionID = workflowExecutionID
}

// WithWorkflowID adds the workflowID to the get workflow execution detail params
func (o *GetWorkflowExecutionDetailParams) WithWorkflowID(workflowID string) *GetWorkflowExecutionDetailParams {
	o.SetWorkflowID(workflowID)
	return o
}

// SetWorkflowID adds the workflowId to the get workflow execution detail params
func (o *GetWorkflowExecutionDetailParams) SetWorkflowID(workflowID string) {
	o.WorkflowID = workflowID
}

// WriteToRequest writes these params to a swagger request
func (o *GetWorkflowExecutionDetailParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param workflowExecutionId
	if err := r.SetPathParam("workflowExecutionId", o.WorkflowExecutionID); err != nil {
		return err
	}

	// path param workflowId
	if err := r.SetPathParam("workflowId", o.WorkflowID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

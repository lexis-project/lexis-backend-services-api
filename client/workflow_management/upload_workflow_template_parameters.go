// Code generated by go-swagger; DO NOT EDIT.

package workflow_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewUploadWorkflowTemplateParams creates a new UploadWorkflowTemplateParams object
// with the default values initialized.
func NewUploadWorkflowTemplateParams() *UploadWorkflowTemplateParams {
	var ()
	return &UploadWorkflowTemplateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUploadWorkflowTemplateParamsWithTimeout creates a new UploadWorkflowTemplateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUploadWorkflowTemplateParamsWithTimeout(timeout time.Duration) *UploadWorkflowTemplateParams {
	var ()
	return &UploadWorkflowTemplateParams{

		timeout: timeout,
	}
}

// NewUploadWorkflowTemplateParamsWithContext creates a new UploadWorkflowTemplateParams object
// with the default values initialized, and the ability to set a context for a request
func NewUploadWorkflowTemplateParamsWithContext(ctx context.Context) *UploadWorkflowTemplateParams {
	var ()
	return &UploadWorkflowTemplateParams{

		Context: ctx,
	}
}

// NewUploadWorkflowTemplateParamsWithHTTPClient creates a new UploadWorkflowTemplateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUploadWorkflowTemplateParamsWithHTTPClient(client *http.Client) *UploadWorkflowTemplateParams {
	var ()
	return &UploadWorkflowTemplateParams{
		HTTPClient: client,
	}
}

/*UploadWorkflowTemplateParams contains all the parameters to send to the API endpoint
for the upload workflow template operation typically these are written to a http.Request
*/
type UploadWorkflowTemplateParams struct {

	/*WorkflowTemplateFile
	  workflowTemplatefile to be loaded.

	*/
	WorkflowTemplateFile runtime.NamedReadCloser

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the upload workflow template params
func (o *UploadWorkflowTemplateParams) WithTimeout(timeout time.Duration) *UploadWorkflowTemplateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the upload workflow template params
func (o *UploadWorkflowTemplateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the upload workflow template params
func (o *UploadWorkflowTemplateParams) WithContext(ctx context.Context) *UploadWorkflowTemplateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the upload workflow template params
func (o *UploadWorkflowTemplateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the upload workflow template params
func (o *UploadWorkflowTemplateParams) WithHTTPClient(client *http.Client) *UploadWorkflowTemplateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the upload workflow template params
func (o *UploadWorkflowTemplateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithWorkflowTemplateFile adds the workflowTemplateFile to the upload workflow template params
func (o *UploadWorkflowTemplateParams) WithWorkflowTemplateFile(workflowTemplateFile runtime.NamedReadCloser) *UploadWorkflowTemplateParams {
	o.SetWorkflowTemplateFile(workflowTemplateFile)
	return o
}

// SetWorkflowTemplateFile adds the workflowTemplateFile to the upload workflow template params
func (o *UploadWorkflowTemplateParams) SetWorkflowTemplateFile(workflowTemplateFile runtime.NamedReadCloser) {
	o.WorkflowTemplateFile = workflowTemplateFile
}

// WriteToRequest writes these params to a swagger request
func (o *UploadWorkflowTemplateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form file param workflowTemplateFile
	if err := r.SetFileParam("workflowTemplateFile", o.WorkflowTemplateFile); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

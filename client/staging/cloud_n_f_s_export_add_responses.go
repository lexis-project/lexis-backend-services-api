// Code generated by go-swagger; DO NOT EDIT.

package staging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// CloudNFSExportAddReader is a Reader for the CloudNFSExportAdd structure.
type CloudNFSExportAddReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CloudNFSExportAddReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCloudNFSExportAddCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCloudNFSExportAddBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCloudNFSExportAddUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCloudNFSExportAddForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 414:
		result := NewCloudNFSExportAddRequestURITooLong()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCloudNFSExportAddInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCloudNFSExportAddCreated creates a CloudNFSExportAddCreated with default headers values
func NewCloudNFSExportAddCreated() *CloudNFSExportAddCreated {
	return &CloudNFSExportAddCreated{}
}

/*CloudNFSExportAddCreated handles this case with default header values.

The response code means that the request for addition has been initiated. Status of the addition process can be checked by querying the status.
*/
type CloudNFSExportAddCreated struct {
	Payload *models.SteeringRequestID
}

func (o *CloudNFSExportAddCreated) Error() string {
	return fmt.Sprintf("[POST /dataset/cloud/add/{param}][%d] cloudNFSExportAddCreated  %+v", 201, o.Payload)
}

func (o *CloudNFSExportAddCreated) GetPayload() *models.SteeringRequestID {
	return o.Payload
}

func (o *CloudNFSExportAddCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SteeringRequestID)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloudNFSExportAddBadRequest creates a CloudNFSExportAddBadRequest with default headers values
func NewCloudNFSExportAddBadRequest() *CloudNFSExportAddBadRequest {
	return &CloudNFSExportAddBadRequest{}
}

/*CloudNFSExportAddBadRequest handles this case with default header values.

This means that the request ID given by the user is incorrect.
*/
type CloudNFSExportAddBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *CloudNFSExportAddBadRequest) Error() string {
	return fmt.Sprintf("[POST /dataset/cloud/add/{param}][%d] cloudNFSExportAddBadRequest  %+v", 400, o.Payload)
}

func (o *CloudNFSExportAddBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CloudNFSExportAddBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloudNFSExportAddUnauthorized creates a CloudNFSExportAddUnauthorized with default headers values
func NewCloudNFSExportAddUnauthorized() *CloudNFSExportAddUnauthorized {
	return &CloudNFSExportAddUnauthorized{}
}

/*CloudNFSExportAddUnauthorized handles this case with default header values.

This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user
*/
type CloudNFSExportAddUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *CloudNFSExportAddUnauthorized) Error() string {
	return fmt.Sprintf("[POST /dataset/cloud/add/{param}][%d] cloudNFSExportAddUnauthorized  %+v", 401, o.Payload)
}

func (o *CloudNFSExportAddUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CloudNFSExportAddUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloudNFSExportAddForbidden creates a CloudNFSExportAddForbidden with default headers values
func NewCloudNFSExportAddForbidden() *CloudNFSExportAddForbidden {
	return &CloudNFSExportAddForbidden{}
}

/*CloudNFSExportAddForbidden handles this case with default header values.

The IP is outside of the allowed range
*/
type CloudNFSExportAddForbidden struct {
	Payload *models.ErrorResponse
}

func (o *CloudNFSExportAddForbidden) Error() string {
	return fmt.Sprintf("[POST /dataset/cloud/add/{param}][%d] cloudNFSExportAddForbidden  %+v", 403, o.Payload)
}

func (o *CloudNFSExportAddForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CloudNFSExportAddForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloudNFSExportAddRequestURITooLong creates a CloudNFSExportAddRequestURITooLong with default headers values
func NewCloudNFSExportAddRequestURITooLong() *CloudNFSExportAddRequestURITooLong {
	return &CloudNFSExportAddRequestURITooLong{}
}

/*CloudNFSExportAddRequestURITooLong handles this case with default header values.

This means that the the request ID is longer than the server is willing to interpret.
*/
type CloudNFSExportAddRequestURITooLong struct {
	Payload *models.ErrorResponse
}

func (o *CloudNFSExportAddRequestURITooLong) Error() string {
	return fmt.Sprintf("[POST /dataset/cloud/add/{param}][%d] cloudNFSExportAddRequestUriTooLong  %+v", 414, o.Payload)
}

func (o *CloudNFSExportAddRequestURITooLong) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CloudNFSExportAddRequestURITooLong) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloudNFSExportAddInternalServerError creates a CloudNFSExportAddInternalServerError with default headers values
func NewCloudNFSExportAddInternalServerError() *CloudNFSExportAddInternalServerError {
	return &CloudNFSExportAddInternalServerError{}
}

/*CloudNFSExportAddInternalServerError handles this case with default header values.

This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.
*/
type CloudNFSExportAddInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *CloudNFSExportAddInternalServerError) Error() string {
	return fmt.Sprintf("[POST /dataset/cloud/add/{param}][%d] cloudNFSExportAddInternalServerError  %+v", 500, o.Payload)
}

func (o *CloudNFSExportAddInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CloudNFSExportAddInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

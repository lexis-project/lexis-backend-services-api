// Code generated by go-swagger; DO NOT EDIT.

package staging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// StageReader is a Reader for the Stage structure.
type StageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewStageCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewStageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStageForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 414:
		result := NewStageRequestURITooLong()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewStageTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewStageCreated creates a StageCreated with default headers values
func NewStageCreated() *StageCreated {
	return &StageCreated{}
}

/*StageCreated handles this case with default header values.

The response code means that the data transfer has been initiated. Status of the transfer can be checked by querying the status.
*/
type StageCreated struct {
	Payload *models.SteeringRequestID
}

func (o *StageCreated) Error() string {
	return fmt.Sprintf("[POST /dataset/staging/stage][%d] stageCreated  %+v", 201, o.Payload)
}

func (o *StageCreated) GetPayload() *models.SteeringRequestID {
	return o.Payload
}

func (o *StageCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SteeringRequestID)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStageBadRequest creates a StageBadRequest with default headers values
func NewStageBadRequest() *StageBadRequest {
	return &StageBadRequest{}
}

/*StageBadRequest handles this case with default header values.

This means that there's something wrong in the input parameters and the server couldn't understand the request.
*/
type StageBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *StageBadRequest) Error() string {
	return fmt.Sprintf("[POST /dataset/staging/stage][%d] stageBadRequest  %+v", 400, o.Payload)
}

func (o *StageBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *StageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStageUnauthorized creates a StageUnauthorized with default headers values
func NewStageUnauthorized() *StageUnauthorized {
	return &StageUnauthorized{}
}

/*StageUnauthorized handles this case with default header values.

This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user
*/
type StageUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *StageUnauthorized) Error() string {
	return fmt.Sprintf("[POST /dataset/staging/stage][%d] stageUnauthorized  %+v", 401, o.Payload)
}

func (o *StageUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *StageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStageForbidden creates a StageForbidden with default headers values
func NewStageForbidden() *StageForbidden {
	return &StageForbidden{}
}

/*StageForbidden handles this case with default header values.

This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.
*/
type StageForbidden struct {
	Payload *models.ErrorResponse
}

func (o *StageForbidden) Error() string {
	return fmt.Sprintf("[POST /dataset/staging/stage][%d] stageForbidden  %+v", 403, o.Payload)
}

func (o *StageForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *StageForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStageNotFound creates a StageNotFound with default headers values
func NewStageNotFound() *StageNotFound {
	return &StageNotFound{}
}

/*StageNotFound handles this case with default header values.

This means that either the source path or the the target path on the system doesn't exist.
*/
type StageNotFound struct {
	Payload *models.ErrorResponse
}

func (o *StageNotFound) Error() string {
	return fmt.Sprintf("[POST /dataset/staging/stage][%d] stageNotFound  %+v", 404, o.Payload)
}

func (o *StageNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *StageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStageRequestURITooLong creates a StageRequestURITooLong with default headers values
func NewStageRequestURITooLong() *StageRequestURITooLong {
	return &StageRequestURITooLong{}
}

/*StageRequestURITooLong handles this case with default header values.

This means that the either the source path or the target path is longer than the server is willing to interpret.
*/
type StageRequestURITooLong struct {
	Payload *models.ErrorResponse
}

func (o *StageRequestURITooLong) Error() string {
	return fmt.Sprintf("[POST /dataset/staging/stage][%d] stageRequestUriTooLong  %+v", 414, o.Payload)
}

func (o *StageRequestURITooLong) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *StageRequestURITooLong) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStageTooManyRequests creates a StageTooManyRequests with default headers values
func NewStageTooManyRequests() *StageTooManyRequests {
	return &StageTooManyRequests{}
}

/*StageTooManyRequests handles this case with default header values.

This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.
*/
type StageTooManyRequests struct {
	Payload *models.ErrorResponse
}

func (o *StageTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /dataset/staging/stage][%d] stageTooManyRequests  %+v", 429, o.Payload)
}

func (o *StageTooManyRequests) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *StageTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStageInternalServerError creates a StageInternalServerError with default headers values
func NewStageInternalServerError() *StageInternalServerError {
	return &StageInternalServerError{}
}

/*StageInternalServerError handles this case with default header values.

This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.
*/
type StageInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *StageInternalServerError) Error() string {
	return fmt.Sprintf("[POST /dataset/staging/stage][%d] stageInternalServerError  %+v", 500, o.Payload)
}

func (o *StageInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *StageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*StageBody stage body
swagger:model StageBody
*/
type StageBody struct {

	// compression
	// Required: true
	// Enum: [yes no]
	Compression *string `json:"compression"`

	// encryption
	// Required: true
	// Enum: [yes no]
	Encryption *string `json:"encryption"`

	// heappe url
	HeappeURL string `json:"heappe_url,omitempty"`

	// job id
	JobID int64 `json:"job_id,omitempty"`

	// metadata
	Metadata *models.DatasetMetadata `json:"metadata,omitempty"`

	// source path
	// Required: true
	SourcePath *string `json:"source_path"`

	// Possible values are: lrz_iRODS, lrz_staging_area, lrz_staging_area2,
	// lrz_cloud, linux_cluster, superMUC, it4i_iRODS, barbora_lustre,
	// salomon_lustre, barbora_home, salomon_home, it4i_cloud, it4i_staging_area,
	// surf_iRODS, sara_staging_area.
	//
	// Required: true
	SourceSystem *string `json:"source_system"`

	// target path
	// Required: true
	TargetPath *string `json:"target_path"`

	// Possible values are: lrz_iRODS, lrz_staging_area, lrz_staging_area2,
	// lrz_cloud, linux_cluster, superMUC, it4i_iRODS, barbora_lustre,
	// salomon_lustre, barbora_home, salomon_home, it4i_cloud, it4i_staging_area,
	// surf_iRODS, sara_staging_area.
	//
	// Required: true
	TargetSystem *string `json:"target_system"`

	// task id
	TaskID int64 `json:"task_id,omitempty"`
}

// Validate validates this stage body
func (o *StageBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCompression(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEncryption(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSourcePath(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSourceSystem(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTargetPath(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTargetSystem(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var stageBodyTypeCompressionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["yes","no"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stageBodyTypeCompressionPropEnum = append(stageBodyTypeCompressionPropEnum, v)
	}
}

const (

	// StageBodyCompressionYes captures enum value "yes"
	StageBodyCompressionYes string = "yes"

	// StageBodyCompressionNo captures enum value "no"
	StageBodyCompressionNo string = "no"
)

// prop value enum
func (o *StageBody) validateCompressionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, stageBodyTypeCompressionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *StageBody) validateCompression(formats strfmt.Registry) error {

	if err := validate.Required("parameters"+"."+"compression", "body", o.Compression); err != nil {
		return err
	}

	// value enum
	if err := o.validateCompressionEnum("parameters"+"."+"compression", "body", *o.Compression); err != nil {
		return err
	}

	return nil
}

var stageBodyTypeEncryptionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["yes","no"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stageBodyTypeEncryptionPropEnum = append(stageBodyTypeEncryptionPropEnum, v)
	}
}

const (

	// StageBodyEncryptionYes captures enum value "yes"
	StageBodyEncryptionYes string = "yes"

	// StageBodyEncryptionNo captures enum value "no"
	StageBodyEncryptionNo string = "no"
)

// prop value enum
func (o *StageBody) validateEncryptionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, stageBodyTypeEncryptionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *StageBody) validateEncryption(formats strfmt.Registry) error {

	if err := validate.Required("parameters"+"."+"encryption", "body", o.Encryption); err != nil {
		return err
	}

	// value enum
	if err := o.validateEncryptionEnum("parameters"+"."+"encryption", "body", *o.Encryption); err != nil {
		return err
	}

	return nil
}

func (o *StageBody) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameters" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *StageBody) validateSourcePath(formats strfmt.Registry) error {

	if err := validate.Required("parameters"+"."+"source_path", "body", o.SourcePath); err != nil {
		return err
	}

	return nil
}

func (o *StageBody) validateSourceSystem(formats strfmt.Registry) error {

	if err := validate.Required("parameters"+"."+"source_system", "body", o.SourceSystem); err != nil {
		return err
	}

	return nil
}

func (o *StageBody) validateTargetPath(formats strfmt.Registry) error {

	if err := validate.Required("parameters"+"."+"target_path", "body", o.TargetPath); err != nil {
		return err
	}

	return nil
}

func (o *StageBody) validateTargetSystem(formats strfmt.Registry) error {

	if err := validate.Required("parameters"+"."+"target_system", "body", o.TargetSystem); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *StageBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StageBody) UnmarshalBinary(b []byte) error {
	var res StageBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

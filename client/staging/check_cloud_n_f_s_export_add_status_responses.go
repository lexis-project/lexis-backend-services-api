// Code generated by go-swagger; DO NOT EDIT.

package staging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// CheckCloudNFSExportAddStatusReader is a Reader for the CheckCloudNFSExportAddStatus structure.
type CheckCloudNFSExportAddStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CheckCloudNFSExportAddStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCheckCloudNFSExportAddStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCheckCloudNFSExportAddStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCheckCloudNFSExportAddStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCheckCloudNFSExportAddStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCheckCloudNFSExportAddStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 414:
		result := NewCheckCloudNFSExportAddStatusRequestURITooLong()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCheckCloudNFSExportAddStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCheckCloudNFSExportAddStatusOK creates a CheckCloudNFSExportAddStatusOK with default headers values
func NewCheckCloudNFSExportAddStatusOK() *CheckCloudNFSExportAddStatusOK {
	return &CheckCloudNFSExportAddStatusOK{}
}

/*CheckCloudNFSExportAddStatusOK handles this case with default header values.

This means that the status has been returned to the user in the response body.
*/
type CheckCloudNFSExportAddStatusOK struct {
	Payload *CheckCloudNFSExportAddStatusOKBody
}

func (o *CheckCloudNFSExportAddStatusOK) Error() string {
	return fmt.Sprintf("[GET /dataset/cloud/add/{param}][%d] checkCloudNFSExportAddStatusOK  %+v", 200, o.Payload)
}

func (o *CheckCloudNFSExportAddStatusOK) GetPayload() *CheckCloudNFSExportAddStatusOKBody {
	return o.Payload
}

func (o *CheckCloudNFSExportAddStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CheckCloudNFSExportAddStatusOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckCloudNFSExportAddStatusBadRequest creates a CheckCloudNFSExportAddStatusBadRequest with default headers values
func NewCheckCloudNFSExportAddStatusBadRequest() *CheckCloudNFSExportAddStatusBadRequest {
	return &CheckCloudNFSExportAddStatusBadRequest{}
}

/*CheckCloudNFSExportAddStatusBadRequest handles this case with default header values.

This means that the request ID given by the user is incorrect.
*/
type CheckCloudNFSExportAddStatusBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *CheckCloudNFSExportAddStatusBadRequest) Error() string {
	return fmt.Sprintf("[GET /dataset/cloud/add/{param}][%d] checkCloudNFSExportAddStatusBadRequest  %+v", 400, o.Payload)
}

func (o *CheckCloudNFSExportAddStatusBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckCloudNFSExportAddStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckCloudNFSExportAddStatusUnauthorized creates a CheckCloudNFSExportAddStatusUnauthorized with default headers values
func NewCheckCloudNFSExportAddStatusUnauthorized() *CheckCloudNFSExportAddStatusUnauthorized {
	return &CheckCloudNFSExportAddStatusUnauthorized{}
}

/*CheckCloudNFSExportAddStatusUnauthorized handles this case with default header values.

This means that the user is not authenticated with keycloak and NFS export can't be triggered unless the user first log in with a valid user
*/
type CheckCloudNFSExportAddStatusUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *CheckCloudNFSExportAddStatusUnauthorized) Error() string {
	return fmt.Sprintf("[GET /dataset/cloud/add/{param}][%d] checkCloudNFSExportAddStatusUnauthorized  %+v", 401, o.Payload)
}

func (o *CheckCloudNFSExportAddStatusUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckCloudNFSExportAddStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckCloudNFSExportAddStatusForbidden creates a CheckCloudNFSExportAddStatusForbidden with default headers values
func NewCheckCloudNFSExportAddStatusForbidden() *CheckCloudNFSExportAddStatusForbidden {
	return &CheckCloudNFSExportAddStatusForbidden{}
}

/*CheckCloudNFSExportAddStatusForbidden handles this case with default header values.

The IP is outside of the allowed range
*/
type CheckCloudNFSExportAddStatusForbidden struct {
	Payload *models.ErrorResponse
}

func (o *CheckCloudNFSExportAddStatusForbidden) Error() string {
	return fmt.Sprintf("[GET /dataset/cloud/add/{param}][%d] checkCloudNFSExportAddStatusForbidden  %+v", 403, o.Payload)
}

func (o *CheckCloudNFSExportAddStatusForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckCloudNFSExportAddStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckCloudNFSExportAddStatusNotFound creates a CheckCloudNFSExportAddStatusNotFound with default headers values
func NewCheckCloudNFSExportAddStatusNotFound() *CheckCloudNFSExportAddStatusNotFound {
	return &CheckCloudNFSExportAddStatusNotFound{}
}

/*CheckCloudNFSExportAddStatusNotFound handles this case with default header values.

This means that the ID doesn't exist and thus a status can't be returned.
*/
type CheckCloudNFSExportAddStatusNotFound struct {
	Payload *models.ErrorResponse
}

func (o *CheckCloudNFSExportAddStatusNotFound) Error() string {
	return fmt.Sprintf("[GET /dataset/cloud/add/{param}][%d] checkCloudNFSExportAddStatusNotFound  %+v", 404, o.Payload)
}

func (o *CheckCloudNFSExportAddStatusNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckCloudNFSExportAddStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckCloudNFSExportAddStatusRequestURITooLong creates a CheckCloudNFSExportAddStatusRequestURITooLong with default headers values
func NewCheckCloudNFSExportAddStatusRequestURITooLong() *CheckCloudNFSExportAddStatusRequestURITooLong {
	return &CheckCloudNFSExportAddStatusRequestURITooLong{}
}

/*CheckCloudNFSExportAddStatusRequestURITooLong handles this case with default header values.

This means that the the request ID is longer than the server is willing to interpret.
*/
type CheckCloudNFSExportAddStatusRequestURITooLong struct {
	Payload *models.ErrorResponse
}

func (o *CheckCloudNFSExportAddStatusRequestURITooLong) Error() string {
	return fmt.Sprintf("[GET /dataset/cloud/add/{param}][%d] checkCloudNFSExportAddStatusRequestUriTooLong  %+v", 414, o.Payload)
}

func (o *CheckCloudNFSExportAddStatusRequestURITooLong) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckCloudNFSExportAddStatusRequestURITooLong) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckCloudNFSExportAddStatusInternalServerError creates a CheckCloudNFSExportAddStatusInternalServerError with default headers values
func NewCheckCloudNFSExportAddStatusInternalServerError() *CheckCloudNFSExportAddStatusInternalServerError {
	return &CheckCloudNFSExportAddStatusInternalServerError{}
}

/*CheckCloudNFSExportAddStatusInternalServerError handles this case with default header values.

This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.
*/
type CheckCloudNFSExportAddStatusInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *CheckCloudNFSExportAddStatusInternalServerError) Error() string {
	return fmt.Sprintf("[GET /dataset/cloud/add/{param}][%d] checkCloudNFSExportAddStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *CheckCloudNFSExportAddStatusInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckCloudNFSExportAddStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CheckCloudNFSExportAddStatusOKBody check cloud n f s export add status o k body
swagger:model CheckCloudNFSExportAddStatusOKBody
*/
type CheckCloudNFSExportAddStatusOKBody struct {

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this check cloud n f s export add status o k body
func (o *CheckCloudNFSExportAddStatusOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CheckCloudNFSExportAddStatusOKBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("checkCloudNFSExportAddStatusOK"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CheckCloudNFSExportAddStatusOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CheckCloudNFSExportAddStatusOKBody) UnmarshalBinary(b []byte) error {
	var res CheckCloudNFSExportAddStatusOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package staging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// DuplicateReader is a Reader for the Duplicate structure.
type DuplicateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DuplicateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewDuplicateCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDuplicateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDuplicateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDuplicateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDuplicateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 414:
		result := NewDuplicateRequestURITooLong()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDuplicateTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDuplicateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDuplicateCreated creates a DuplicateCreated with default headers values
func NewDuplicateCreated() *DuplicateCreated {
	return &DuplicateCreated{}
}

/*DuplicateCreated handles this case with default header values.

The response code means that the duplication has been initiated. Status of the transfer can be checked by querying the status.
*/
type DuplicateCreated struct {
	Payload *models.SteeringRequestID
}

func (o *DuplicateCreated) Error() string {
	return fmt.Sprintf("[POST /dataset/duplicate][%d] duplicateCreated  %+v", 201, o.Payload)
}

func (o *DuplicateCreated) GetPayload() *models.SteeringRequestID {
	return o.Payload
}

func (o *DuplicateCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SteeringRequestID)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDuplicateBadRequest creates a DuplicateBadRequest with default headers values
func NewDuplicateBadRequest() *DuplicateBadRequest {
	return &DuplicateBadRequest{}
}

/*DuplicateBadRequest handles this case with default header values.

This means that there's something wrong in the input parameters and the server couldn't understand the request.
*/
type DuplicateBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *DuplicateBadRequest) Error() string {
	return fmt.Sprintf("[POST /dataset/duplicate][%d] duplicateBadRequest  %+v", 400, o.Payload)
}

func (o *DuplicateBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DuplicateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDuplicateUnauthorized creates a DuplicateUnauthorized with default headers values
func NewDuplicateUnauthorized() *DuplicateUnauthorized {
	return &DuplicateUnauthorized{}
}

/*DuplicateUnauthorized handles this case with default header values.

This means that the user is not authenticated with keycloak and duplication can't be triggered unless the user first log in with a valid user
*/
type DuplicateUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *DuplicateUnauthorized) Error() string {
	return fmt.Sprintf("[POST /dataset/duplicate][%d] duplicateUnauthorized  %+v", 401, o.Payload)
}

func (o *DuplicateUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DuplicateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDuplicateForbidden creates a DuplicateForbidden with default headers values
func NewDuplicateForbidden() *DuplicateForbidden {
	return &DuplicateForbidden{}
}

/*DuplicateForbidden handles this case with default header values.

This means that the resource the user is trying to duplicate from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.
*/
type DuplicateForbidden struct {
	Payload *models.ErrorResponse
}

func (o *DuplicateForbidden) Error() string {
	return fmt.Sprintf("[POST /dataset/duplicate][%d] duplicateForbidden  %+v", 403, o.Payload)
}

func (o *DuplicateForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DuplicateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDuplicateNotFound creates a DuplicateNotFound with default headers values
func NewDuplicateNotFound() *DuplicateNotFound {
	return &DuplicateNotFound{}
}

/*DuplicateNotFound handles this case with default header values.

This means that either the source path or the the target path on the system doesn't exist.
*/
type DuplicateNotFound struct {
	Payload *models.ErrorResponse
}

func (o *DuplicateNotFound) Error() string {
	return fmt.Sprintf("[POST /dataset/duplicate][%d] duplicateNotFound  %+v", 404, o.Payload)
}

func (o *DuplicateNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DuplicateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDuplicateRequestURITooLong creates a DuplicateRequestURITooLong with default headers values
func NewDuplicateRequestURITooLong() *DuplicateRequestURITooLong {
	return &DuplicateRequestURITooLong{}
}

/*DuplicateRequestURITooLong handles this case with default header values.

This means that the either the source path or the target path is longer than the server is willing to interpret.
*/
type DuplicateRequestURITooLong struct {
	Payload *models.ErrorResponse
}

func (o *DuplicateRequestURITooLong) Error() string {
	return fmt.Sprintf("[POST /dataset/duplicate][%d] duplicateRequestUriTooLong  %+v", 414, o.Payload)
}

func (o *DuplicateRequestURITooLong) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DuplicateRequestURITooLong) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDuplicateTooManyRequests creates a DuplicateTooManyRequests with default headers values
func NewDuplicateTooManyRequests() *DuplicateTooManyRequests {
	return &DuplicateTooManyRequests{}
}

/*DuplicateTooManyRequests handles this case with default header values.

This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.
*/
type DuplicateTooManyRequests struct {
	Payload *models.ErrorResponse
}

func (o *DuplicateTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /dataset/duplicate][%d] duplicateTooManyRequests  %+v", 429, o.Payload)
}

func (o *DuplicateTooManyRequests) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DuplicateTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDuplicateInternalServerError creates a DuplicateInternalServerError with default headers values
func NewDuplicateInternalServerError() *DuplicateInternalServerError {
	return &DuplicateInternalServerError{}
}

/*DuplicateInternalServerError handles this case with default header values.

This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.
*/
type DuplicateInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *DuplicateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /dataset/duplicate][%d] duplicateInternalServerError  %+v", 500, o.Payload)
}

func (o *DuplicateInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DuplicateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*DuplicateBody duplicate body
swagger:model DuplicateBody
*/
type DuplicateBody struct {

	// source path
	// Required: true
	SourcePath *string `json:"source_path"`

	// Possible values are: "lrz_iRODS", "it4i_iRODS"
	//
	// Required: true
	SourceSystem *string `json:"source_system"`

	// target path
	TargetPath string `json:"target_path,omitempty"`

	// Possible values are: "lrz_iRODS", "it4i_iRODS"
	//
	TargetSystem string `json:"target_system,omitempty"`

	// Title of the new dataset (if not provided, the new title will
	// be "Copy of " and the old dataset title).
	//
	Title string `json:"title,omitempty"`
}

// Validate validates this duplicate body
func (o *DuplicateBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSourcePath(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSourceSystem(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DuplicateBody) validateSourcePath(formats strfmt.Registry) error {

	if err := validate.Required("parameters"+"."+"source_path", "body", o.SourcePath); err != nil {
		return err
	}

	return nil
}

func (o *DuplicateBody) validateSourceSystem(formats strfmt.Registry) error {

	if err := validate.Required("parameters"+"."+"source_system", "body", o.SourceSystem); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DuplicateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DuplicateBody) UnmarshalBinary(b []byte) error {
	var res DuplicateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

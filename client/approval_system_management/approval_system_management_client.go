// Code generated by go-swagger; DO NOT EDIT.

package approval_system_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the approval system management client
type API interface {
	/*
	   CreateApprovedResourceRequest creates h p c approved resource request

	   Creates a new HPC approved resource request in approval system*/
	CreateApprovedResourceRequest(ctx context.Context, params *CreateApprovedResourceRequestParams) (*CreateApprovedResourceRequestCreated, error)
	/*
	   CreateResourceRequest creates h p c resource request

	   Creates a new HPC resource request in approval system*/
	CreateResourceRequest(ctx context.Context, params *CreateResourceRequestParams) (*CreateResourceRequestCreated, error)
	/*
	   HPCApprovedResourceRequest gets specific approved resources request from approval system

	   Gets an HPC approved resource request by ID of associated HPC resource.*/
	HPCApprovedResourceRequest(ctx context.Context, params *HPCApprovedResourceRequestParams) (*HPCApprovedResourceRequestOK, error)
	/*
	   HPCResourceRequest gets specific resource request from approval system

	   Gets a resource request by ID of associated HPC resource.*/
	HPCResourceRequest(ctx context.Context, params *HPCResourceRequestParams) (*HPCResourceRequestOK, error)
	/*
	   ListProjectHPCApprovedResourceRequest lists all h p c approved resource requests for particular l e x i s project from approval system

	   lists all HPC approved resource requests for particular LEXIS project from approval system*/
	ListProjectHPCApprovedResourceRequest(ctx context.Context, params *ListProjectHPCApprovedResourceRequestParams) (*ListProjectHPCApprovedResourceRequestOK, error)
	/*
	   ListProjectHPCResourceRequest lists all h p c resource requests for particular l e x i s project from approval system

	   lists all HPC resource requests for particular LEXIS project from approval system*/
	ListProjectHPCResourceRequest(ctx context.Context, params *ListProjectHPCResourceRequestParams) (*ListProjectHPCResourceRequestOK, error)
	/*
	   ListResources lists all h p c resources from approval system

	   lists all HPC resources from approval system*/
	ListResources(ctx context.Context, params *ListResourcesParams) (*ListResourcesOK, error)
}

// New creates a new approval system management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for approval system management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
CreateApprovedResourceRequest creates h p c approved resource request

Creates a new HPC approved resource request in approval system
*/
func (a *Client) CreateApprovedResourceRequest(ctx context.Context, params *CreateApprovedResourceRequestParams) (*CreateApprovedResourceRequestCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateApprovedResourceRequest",
		Method:             "POST",
		PathPattern:        "/approval_system/approvedResourceRequest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateApprovedResourceRequestReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateApprovedResourceRequestCreated), nil

}

/*
CreateResourceRequest creates h p c resource request

Creates a new HPC resource request in approval system
*/
func (a *Client) CreateResourceRequest(ctx context.Context, params *CreateResourceRequestParams) (*CreateResourceRequestCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateResourceRequest",
		Method:             "POST",
		PathPattern:        "/approval_system/resourceRequest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateResourceRequestReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateResourceRequestCreated), nil

}

/*
HPCApprovedResourceRequest gets specific approved resources request from approval system

Gets an HPC approved resource request by ID of associated HPC resource.
*/
func (a *Client) HPCApprovedResourceRequest(ctx context.Context, params *HPCApprovedResourceRequestParams) (*HPCApprovedResourceRequestOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HPCApprovedResourceRequest",
		Method:             "GET",
		PathPattern:        "/approval_system/approvedResourceRequest/{HPCResourceID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HPCApprovedResourceRequestReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*HPCApprovedResourceRequestOK), nil

}

/*
HPCResourceRequest gets specific resource request from approval system

Gets a resource request by ID of associated HPC resource.
*/
func (a *Client) HPCResourceRequest(ctx context.Context, params *HPCResourceRequestParams) (*HPCResourceRequestOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HPCResourceRequest",
		Method:             "GET",
		PathPattern:        "/approval_system/resourceRequest/{HPCResourceID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HPCResourceRequestReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*HPCResourceRequestOK), nil

}

/*
ListProjectHPCApprovedResourceRequest lists all h p c approved resource requests for particular l e x i s project from approval system

lists all HPC approved resource requests for particular LEXIS project from approval system
*/
func (a *Client) ListProjectHPCApprovedResourceRequest(ctx context.Context, params *ListProjectHPCApprovedResourceRequestParams) (*ListProjectHPCApprovedResourceRequestOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listProjectHPCApprovedResourceRequest",
		Method:             "GET",
		PathPattern:        "/approval_system/projectApprovedResourceRequest/{AssociatedLEXISProject}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListProjectHPCApprovedResourceRequestReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListProjectHPCApprovedResourceRequestOK), nil

}

/*
ListProjectHPCResourceRequest lists all h p c resource requests for particular l e x i s project from approval system

lists all HPC resource requests for particular LEXIS project from approval system
*/
func (a *Client) ListProjectHPCResourceRequest(ctx context.Context, params *ListProjectHPCResourceRequestParams) (*ListProjectHPCResourceRequestOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listProjectHPCResourceRequest",
		Method:             "GET",
		PathPattern:        "/approval_system/projectResourceRequest/{AssociatedLEXISProject}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListProjectHPCResourceRequestReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListProjectHPCResourceRequestOK), nil

}

/*
ListResources lists all h p c resources from approval system

lists all HPC resources from approval system
*/
func (a *Client) ListResources(ctx context.Context, params *ListResourcesParams) (*ListResourcesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listResources",
		Method:             "GET",
		PathPattern:        "/approval_system/resource",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListResourcesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListResourcesOK), nil

}

// Code generated by go-swagger; DO NOT EDIT.

package approval_system_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewHPCApprovedResourceRequestParams creates a new HPCApprovedResourceRequestParams object
// with the default values initialized.
func NewHPCApprovedResourceRequestParams() *HPCApprovedResourceRequestParams {
	var ()
	return &HPCApprovedResourceRequestParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewHPCApprovedResourceRequestParamsWithTimeout creates a new HPCApprovedResourceRequestParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewHPCApprovedResourceRequestParamsWithTimeout(timeout time.Duration) *HPCApprovedResourceRequestParams {
	var ()
	return &HPCApprovedResourceRequestParams{

		timeout: timeout,
	}
}

// NewHPCApprovedResourceRequestParamsWithContext creates a new HPCApprovedResourceRequestParams object
// with the default values initialized, and the ability to set a context for a request
func NewHPCApprovedResourceRequestParamsWithContext(ctx context.Context) *HPCApprovedResourceRequestParams {
	var ()
	return &HPCApprovedResourceRequestParams{

		Context: ctx,
	}
}

// NewHPCApprovedResourceRequestParamsWithHTTPClient creates a new HPCApprovedResourceRequestParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewHPCApprovedResourceRequestParamsWithHTTPClient(client *http.Client) *HPCApprovedResourceRequestParams {
	var ()
	return &HPCApprovedResourceRequestParams{
		HTTPClient: client,
	}
}

/*HPCApprovedResourceRequestParams contains all the parameters to send to the API endpoint
for the h p c approved resource request operation typically these are written to a http.Request
*/
type HPCApprovedResourceRequestParams struct {

	/*HPCResourceID
	  String ID of the HPC resource whose approved resource request to be obtained.

	*/
	HPCResourceID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the h p c approved resource request params
func (o *HPCApprovedResourceRequestParams) WithTimeout(timeout time.Duration) *HPCApprovedResourceRequestParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the h p c approved resource request params
func (o *HPCApprovedResourceRequestParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the h p c approved resource request params
func (o *HPCApprovedResourceRequestParams) WithContext(ctx context.Context) *HPCApprovedResourceRequestParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the h p c approved resource request params
func (o *HPCApprovedResourceRequestParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the h p c approved resource request params
func (o *HPCApprovedResourceRequestParams) WithHTTPClient(client *http.Client) *HPCApprovedResourceRequestParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the h p c approved resource request params
func (o *HPCApprovedResourceRequestParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithHPCResourceID adds the hPCResourceID to the h p c approved resource request params
func (o *HPCApprovedResourceRequestParams) WithHPCResourceID(hPCResourceID string) *HPCApprovedResourceRequestParams {
	o.SetHPCResourceID(hPCResourceID)
	return o
}

// SetHPCResourceID adds the hPCResourceId to the h p c approved resource request params
func (o *HPCApprovedResourceRequestParams) SetHPCResourceID(hPCResourceID string) {
	o.HPCResourceID = hPCResourceID
}

// WriteToRequest writes these params to a swagger request
func (o *HPCApprovedResourceRequestParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param HPCResourceID
	if err := r.SetPathParam("HPCResourceID", o.HPCResourceID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package usage_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// AddConsumptionReader is a Reader for the AddConsumption structure.
type AddConsumptionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddConsumptionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddConsumptionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAddConsumptionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddConsumptionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddConsumptionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddConsumptionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAddConsumptionOK creates a AddConsumptionOK with default headers values
func NewAddConsumptionOK() *AddConsumptionOK {
	return &AddConsumptionOK{}
}

/*AddConsumptionOK handles this case with default header values.

Credit status of the account with the provided id
*/
type AddConsumptionOK struct {
	Payload *models.CreditStatus
}

func (o *AddConsumptionOK) Error() string {
	return fmt.Sprintf("[POST /accounting/{id}/manage/{medium}/consume/{amount}][%d] addConsumptionOK  %+v", 200, o.Payload)
}

func (o *AddConsumptionOK) GetPayload() *models.CreditStatus {
	return o.Payload
}

func (o *AddConsumptionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CreditStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddConsumptionUnauthorized creates a AddConsumptionUnauthorized with default headers values
func NewAddConsumptionUnauthorized() *AddConsumptionUnauthorized {
	return &AddConsumptionUnauthorized{}
}

/*AddConsumptionUnauthorized handles this case with default header values.

Unauthorized
*/
type AddConsumptionUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *AddConsumptionUnauthorized) Error() string {
	return fmt.Sprintf("[POST /accounting/{id}/manage/{medium}/consume/{amount}][%d] addConsumptionUnauthorized  %+v", 401, o.Payload)
}

func (o *AddConsumptionUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddConsumptionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddConsumptionForbidden creates a AddConsumptionForbidden with default headers values
func NewAddConsumptionForbidden() *AddConsumptionForbidden {
	return &AddConsumptionForbidden{}
}

/*AddConsumptionForbidden handles this case with default header values.

Forbidden
*/
type AddConsumptionForbidden struct {
	Payload *models.ErrorResponse
}

func (o *AddConsumptionForbidden) Error() string {
	return fmt.Sprintf("[POST /accounting/{id}/manage/{medium}/consume/{amount}][%d] addConsumptionForbidden  %+v", 403, o.Payload)
}

func (o *AddConsumptionForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddConsumptionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddConsumptionNotFound creates a AddConsumptionNotFound with default headers values
func NewAddConsumptionNotFound() *AddConsumptionNotFound {
	return &AddConsumptionNotFound{}
}

/*AddConsumptionNotFound handles this case with default header values.

The account with the id provided doesn't exist
*/
type AddConsumptionNotFound struct {
	Payload *models.ErrorResponse
}

func (o *AddConsumptionNotFound) Error() string {
	return fmt.Sprintf("[POST /accounting/{id}/manage/{medium}/consume/{amount}][%d] addConsumptionNotFound  %+v", 404, o.Payload)
}

func (o *AddConsumptionNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddConsumptionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddConsumptionInternalServerError creates a AddConsumptionInternalServerError with default headers values
func NewAddConsumptionInternalServerError() *AddConsumptionInternalServerError {
	return &AddConsumptionInternalServerError{}
}

/*AddConsumptionInternalServerError handles this case with default header values.

Something unexpected happend, error raised
*/
type AddConsumptionInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *AddConsumptionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /accounting/{id}/manage/{medium}/consume/{amount}][%d] addConsumptionInternalServerError  %+v", 500, o.Payload)
}

func (o *AddConsumptionInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddConsumptionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

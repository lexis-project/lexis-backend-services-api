// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// CheckEncryptionStatusReader is a Reader for the CheckEncryptionStatus structure.
type CheckEncryptionStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CheckEncryptionStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCheckEncryptionStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCheckEncryptionStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCheckEncryptionStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCheckEncryptionStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 414:
		result := NewCheckEncryptionStatusRequestURITooLong()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCheckEncryptionStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCheckEncryptionStatusOK creates a CheckEncryptionStatusOK with default headers values
func NewCheckEncryptionStatusOK() *CheckEncryptionStatusOK {
	return &CheckEncryptionStatusOK{}
}

/*CheckEncryptionStatusOK handles this case with default header values.

This means that the status has been returned to the user in the response body.
*/
type CheckEncryptionStatusOK struct {
	Payload *CheckEncryptionStatusOKBody
}

func (o *CheckEncryptionStatusOK) Error() string {
	return fmt.Sprintf("[GET /dataset/encryption/encrypt/{request_id}][%d] checkEncryptionStatusOK  %+v", 200, o.Payload)
}

func (o *CheckEncryptionStatusOK) GetPayload() *CheckEncryptionStatusOKBody {
	return o.Payload
}

func (o *CheckEncryptionStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CheckEncryptionStatusOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckEncryptionStatusBadRequest creates a CheckEncryptionStatusBadRequest with default headers values
func NewCheckEncryptionStatusBadRequest() *CheckEncryptionStatusBadRequest {
	return &CheckEncryptionStatusBadRequest{}
}

/*CheckEncryptionStatusBadRequest handles this case with default header values.

This means that the request ID given by the user is incorrect.
*/
type CheckEncryptionStatusBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *CheckEncryptionStatusBadRequest) Error() string {
	return fmt.Sprintf("[GET /dataset/encryption/encrypt/{request_id}][%d] checkEncryptionStatusBadRequest  %+v", 400, o.Payload)
}

func (o *CheckEncryptionStatusBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckEncryptionStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckEncryptionStatusUnauthorized creates a CheckEncryptionStatusUnauthorized with default headers values
func NewCheckEncryptionStatusUnauthorized() *CheckEncryptionStatusUnauthorized {
	return &CheckEncryptionStatusUnauthorized{}
}

/*CheckEncryptionStatusUnauthorized handles this case with default header values.

This means that the user is not authenticated with keycloak and encryption can't be triggered unless the user first log in with a valid user
*/
type CheckEncryptionStatusUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *CheckEncryptionStatusUnauthorized) Error() string {
	return fmt.Sprintf("[GET /dataset/encryption/encrypt/{request_id}][%d] checkEncryptionStatusUnauthorized  %+v", 401, o.Payload)
}

func (o *CheckEncryptionStatusUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckEncryptionStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckEncryptionStatusNotFound creates a CheckEncryptionStatusNotFound with default headers values
func NewCheckEncryptionStatusNotFound() *CheckEncryptionStatusNotFound {
	return &CheckEncryptionStatusNotFound{}
}

/*CheckEncryptionStatusNotFound handles this case with default header values.

This means that the ID doesn't exist and thus a status can't be returned.
*/
type CheckEncryptionStatusNotFound struct {
	Payload *models.ErrorResponse
}

func (o *CheckEncryptionStatusNotFound) Error() string {
	return fmt.Sprintf("[GET /dataset/encryption/encrypt/{request_id}][%d] checkEncryptionStatusNotFound  %+v", 404, o.Payload)
}

func (o *CheckEncryptionStatusNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckEncryptionStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckEncryptionStatusRequestURITooLong creates a CheckEncryptionStatusRequestURITooLong with default headers values
func NewCheckEncryptionStatusRequestURITooLong() *CheckEncryptionStatusRequestURITooLong {
	return &CheckEncryptionStatusRequestURITooLong{}
}

/*CheckEncryptionStatusRequestURITooLong handles this case with default header values.

This means that the the request ID is longer than the server is willing to interpret.
*/
type CheckEncryptionStatusRequestURITooLong struct {
	Payload *models.ErrorResponse
}

func (o *CheckEncryptionStatusRequestURITooLong) Error() string {
	return fmt.Sprintf("[GET /dataset/encryption/encrypt/{request_id}][%d] checkEncryptionStatusRequestUriTooLong  %+v", 414, o.Payload)
}

func (o *CheckEncryptionStatusRequestURITooLong) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckEncryptionStatusRequestURITooLong) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckEncryptionStatusInternalServerError creates a CheckEncryptionStatusInternalServerError with default headers values
func NewCheckEncryptionStatusInternalServerError() *CheckEncryptionStatusInternalServerError {
	return &CheckEncryptionStatusInternalServerError{}
}

/*CheckEncryptionStatusInternalServerError handles this case with default header values.

This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.
*/
type CheckEncryptionStatusInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *CheckEncryptionStatusInternalServerError) Error() string {
	return fmt.Sprintf("[GET /dataset/encryption/encrypt/{request_id}][%d] checkEncryptionStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *CheckEncryptionStatusInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckEncryptionStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CheckEncryptionStatusOKBody check encryption status o k body
swagger:model CheckEncryptionStatusOKBody
*/
type CheckEncryptionStatusOKBody struct {

	// status
	// Required: true
	Status *string `json:"status"`

	// Single path for encryption endpoints
	TargetPath string `json:"target_path,omitempty"`
}

// Validate validates this check encryption status o k body
func (o *CheckEncryptionStatusOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CheckEncryptionStatusOKBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("checkEncryptionStatusOK"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CheckEncryptionStatusOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CheckEncryptionStatusOKBody) UnmarshalBinary(b []byte) error {
	var res CheckEncryptionStatusOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// PIDReader is a Reader for the PID structure.
type PIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPIDCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 414:
		result := NewPIDRequestURITooLong()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPIDCreated creates a PIDCreated with default headers values
func NewPIDCreated() *PIDCreated {
	return &PIDCreated{}
}

/*PIDCreated handles this case with default header values.

This is called when a user requests PID assignment to a dataset.
*/
type PIDCreated struct {
	Payload *models.SteeringRequestID
}

func (o *PIDCreated) Error() string {
	return fmt.Sprintf("[POST /dataset/pid/assign][%d] pIdCreated  %+v", 201, o.Payload)
}

func (o *PIDCreated) GetPayload() *models.SteeringRequestID {
	return o.Payload
}

func (o *PIDCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SteeringRequestID)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPIDBadRequest creates a PIDBadRequest with default headers values
func NewPIDBadRequest() *PIDBadRequest {
	return &PIDBadRequest{}
}

/*PIDBadRequest handles this case with default header values.

This means that there's something wrong in the input parameters and the server couldn't understand the request.
*/
type PIDBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *PIDBadRequest) Error() string {
	return fmt.Sprintf("[POST /dataset/pid/assign][%d] pIdBadRequest  %+v", 400, o.Payload)
}

func (o *PIDBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPIDUnauthorized creates a PIDUnauthorized with default headers values
func NewPIDUnauthorized() *PIDUnauthorized {
	return &PIDUnauthorized{}
}

/*PIDUnauthorized handles this case with default header values.

This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user
*/
type PIDUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *PIDUnauthorized) Error() string {
	return fmt.Sprintf("[POST /dataset/pid/assign][%d] pIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PIDUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPIDForbidden creates a PIDForbidden with default headers values
func NewPIDForbidden() *PIDForbidden {
	return &PIDForbidden{}
}

/*PIDForbidden handles this case with default header values.

This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.
*/
type PIDForbidden struct {
	Payload *models.ErrorResponse
}

func (o *PIDForbidden) Error() string {
	return fmt.Sprintf("[POST /dataset/pid/assign][%d] pIdForbidden  %+v", 403, o.Payload)
}

func (o *PIDForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPIDNotFound creates a PIDNotFound with default headers values
func NewPIDNotFound() *PIDNotFound {
	return &PIDNotFound{}
}

/*PIDNotFound handles this case with default header values.

This means that either the source path or the the target path on the system doesn't exist.
*/
type PIDNotFound struct {
	Payload *models.ErrorResponse
}

func (o *PIDNotFound) Error() string {
	return fmt.Sprintf("[POST /dataset/pid/assign][%d] pIdNotFound  %+v", 404, o.Payload)
}

func (o *PIDNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPIDRequestURITooLong creates a PIDRequestURITooLong with default headers values
func NewPIDRequestURITooLong() *PIDRequestURITooLong {
	return &PIDRequestURITooLong{}
}

/*PIDRequestURITooLong handles this case with default header values.

This means that the either the source path or the target path is longer than the server is willing to interpret.
*/
type PIDRequestURITooLong struct {
	Payload *models.ErrorResponse
}

func (o *PIDRequestURITooLong) Error() string {
	return fmt.Sprintf("[POST /dataset/pid/assign][%d] pIdRequestUriTooLong  %+v", 414, o.Payload)
}

func (o *PIDRequestURITooLong) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PIDRequestURITooLong) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPIDTooManyRequests creates a PIDTooManyRequests with default headers values
func NewPIDTooManyRequests() *PIDTooManyRequests {
	return &PIDTooManyRequests{}
}

/*PIDTooManyRequests handles this case with default header values.

This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.
*/
type PIDTooManyRequests struct {
	Payload *models.ErrorResponse
}

func (o *PIDTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /dataset/pid/assign][%d] pIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *PIDTooManyRequests) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPIDInternalServerError creates a PIDInternalServerError with default headers values
func NewPIDInternalServerError() *PIDInternalServerError {
	return &PIDInternalServerError{}
}

/*PIDInternalServerError handles this case with default header values.

This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.
*/
type PIDInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *PIDInternalServerError) Error() string {
	return fmt.Sprintf("[POST /dataset/pid/assign][%d] pIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PIDInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PIDBody p ID body
swagger:model PIDBody
*/
type PIDBody struct {

	// parent pid
	ParentPid string `json:"parent_pid,omitempty"`

	// source path
	// Required: true
	SourcePath *string `json:"source_path"`

	// source system
	// Required: true
	SourceSystem *string `json:"source_system"`
}

// Validate validates this p ID body
func (o *PIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSourcePath(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSourceSystem(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PIDBody) validateSourcePath(formats strfmt.Registry) error {

	if err := validate.Required("parameters"+"."+"source_path", "body", o.SourcePath); err != nil {
		return err
	}

	return nil
}

func (o *PIDBody) validateSourceSystem(formats strfmt.Registry) error {

	if err := validate.Required("parameters"+"."+"source_system", "body", o.SourceSystem); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PIDBody) UnmarshalBinary(b []byte) error {
	var res PIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

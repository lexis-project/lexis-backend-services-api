// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// CheckPermissionReader is a Reader for the CheckPermission structure.
type CheckPermissionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CheckPermissionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCheckPermissionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCheckPermissionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCheckPermissionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCheckPermissionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewCheckPermissionBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCheckPermissionServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCheckPermissionOK creates a CheckPermissionOK with default headers values
func NewCheckPermissionOK() *CheckPermissionOK {
	return &CheckPermissionOK{}
}

/*CheckPermissionOK handles this case with default header values.

User has permission to write
*/
type CheckPermissionOK struct {
	Payload *CheckPermissionOKBody
}

func (o *CheckPermissionOK) Error() string {
	return fmt.Sprintf("[POST /dataset/checkpermission][%d] checkPermissionOK  %+v", 200, o.Payload)
}

func (o *CheckPermissionOK) GetPayload() *CheckPermissionOKBody {
	return o.Payload
}

func (o *CheckPermissionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CheckPermissionOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckPermissionBadRequest creates a CheckPermissionBadRequest with default headers values
func NewCheckPermissionBadRequest() *CheckPermissionBadRequest {
	return &CheckPermissionBadRequest{}
}

/*CheckPermissionBadRequest handles this case with default header values.

Malformed request
*/
type CheckPermissionBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *CheckPermissionBadRequest) Error() string {
	return fmt.Sprintf("[POST /dataset/checkpermission][%d] checkPermissionBadRequest  %+v", 400, o.Payload)
}

func (o *CheckPermissionBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckPermissionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckPermissionUnauthorized creates a CheckPermissionUnauthorized with default headers values
func NewCheckPermissionUnauthorized() *CheckPermissionUnauthorized {
	return &CheckPermissionUnauthorized{}
}

/*CheckPermissionUnauthorized handles this case with default header values.

Authorization failed
*/
type CheckPermissionUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *CheckPermissionUnauthorized) Error() string {
	return fmt.Sprintf("[POST /dataset/checkpermission][%d] checkPermissionUnauthorized  %+v", 401, o.Payload)
}

func (o *CheckPermissionUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckPermissionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckPermissionForbidden creates a CheckPermissionForbidden with default headers values
func NewCheckPermissionForbidden() *CheckPermissionForbidden {
	return &CheckPermissionForbidden{}
}

/*CheckPermissionForbidden handles this case with default header values.

User does not have permission
*/
type CheckPermissionForbidden struct {
	Payload *models.ErrorResponse
}

func (o *CheckPermissionForbidden) Error() string {
	return fmt.Sprintf("[POST /dataset/checkpermission][%d] checkPermissionForbidden  %+v", 403, o.Payload)
}

func (o *CheckPermissionForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckPermissionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckPermissionBadGateway creates a CheckPermissionBadGateway with default headers values
func NewCheckPermissionBadGateway() *CheckPermissionBadGateway {
	return &CheckPermissionBadGateway{}
}

/*CheckPermissionBadGateway handles this case with default header values.

Bad Gateway
*/
type CheckPermissionBadGateway struct {
	Payload *models.ErrorResponse
}

func (o *CheckPermissionBadGateway) Error() string {
	return fmt.Sprintf("[POST /dataset/checkpermission][%d] checkPermissionBadGateway  %+v", 502, o.Payload)
}

func (o *CheckPermissionBadGateway) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckPermissionBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckPermissionServiceUnavailable creates a CheckPermissionServiceUnavailable with default headers values
func NewCheckPermissionServiceUnavailable() *CheckPermissionServiceUnavailable {
	return &CheckPermissionServiceUnavailable{}
}

/*CheckPermissionServiceUnavailable handles this case with default header values.

Error accessing backend service
*/
type CheckPermissionServiceUnavailable struct {
	Payload *models.ErrorResponse
}

func (o *CheckPermissionServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /dataset/checkpermission][%d] checkPermissionServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CheckPermissionServiceUnavailable) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckPermissionServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CheckPermissionBody check permission body
swagger:model CheckPermissionBody
*/
type CheckPermissionBody struct {

	// access
	// Required: true
	Access models.AccessMode `json:"access"`

	// project
	// Required: true
	Project *string `json:"project"`
}

// Validate validates this check permission body
func (o *CheckPermissionBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CheckPermissionBody) validateAccess(formats strfmt.Registry) error {

	if err := o.Access.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Access" + "." + "access")
		}
		return err
	}

	return nil
}

func (o *CheckPermissionBody) validateProject(formats strfmt.Registry) error {

	if err := validate.Required("Access"+"."+"project", "body", o.Project); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CheckPermissionBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CheckPermissionBody) UnmarshalBinary(b []byte) error {
	var res CheckPermissionBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CheckPermissionOKBody check permission o k body
swagger:model CheckPermissionOKBody
*/
type CheckPermissionOKBody struct {

	// status
	// Required: true
	// Pattern: 200
	Status *string `json:"status"`
}

// Validate validates this check permission o k body
func (o *CheckPermissionOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CheckPermissionOKBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("checkPermissionOK"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	if err := validate.Pattern("checkPermissionOK"+"."+"status", "body", string(*o.Status), `200`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CheckPermissionOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CheckPermissionOKBody) UnmarshalBinary(b []byte) error {
	var res CheckPermissionOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

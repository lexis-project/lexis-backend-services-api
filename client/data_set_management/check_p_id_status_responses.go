// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// CheckPIDStatusReader is a Reader for the CheckPIDStatus structure.
type CheckPIDStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CheckPIDStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCheckPIDStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCheckPIDStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCheckPIDStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCheckPIDStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCheckPIDStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 414:
		result := NewCheckPIDStatusRequestURITooLong()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCheckPIDStatusTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCheckPIDStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCheckPIDStatusOK creates a CheckPIDStatusOK with default headers values
func NewCheckPIDStatusOK() *CheckPIDStatusOK {
	return &CheckPIDStatusOK{}
}

/*CheckPIDStatusOK handles this case with default header values.

This means that the status has been returned to the user in the response body.
*/
type CheckPIDStatusOK struct {
	Payload *models.DataReplication
}

func (o *CheckPIDStatusOK) Error() string {
	return fmt.Sprintf("[GET /dataset/pid/{request_id}][%d] checkPIdStatusOK  %+v", 200, o.Payload)
}

func (o *CheckPIDStatusOK) GetPayload() *models.DataReplication {
	return o.Payload
}

func (o *CheckPIDStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DataReplication)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckPIDStatusBadRequest creates a CheckPIDStatusBadRequest with default headers values
func NewCheckPIDStatusBadRequest() *CheckPIDStatusBadRequest {
	return &CheckPIDStatusBadRequest{}
}

/*CheckPIDStatusBadRequest handles this case with default header values.

This means that there's something wrong in the input parameters and the server couldn't understand the request.
*/
type CheckPIDStatusBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *CheckPIDStatusBadRequest) Error() string {
	return fmt.Sprintf("[GET /dataset/pid/{request_id}][%d] checkPIdStatusBadRequest  %+v", 400, o.Payload)
}

func (o *CheckPIDStatusBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckPIDStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckPIDStatusUnauthorized creates a CheckPIDStatusUnauthorized with default headers values
func NewCheckPIDStatusUnauthorized() *CheckPIDStatusUnauthorized {
	return &CheckPIDStatusUnauthorized{}
}

/*CheckPIDStatusUnauthorized handles this case with default header values.

This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user
*/
type CheckPIDStatusUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *CheckPIDStatusUnauthorized) Error() string {
	return fmt.Sprintf("[GET /dataset/pid/{request_id}][%d] checkPIdStatusUnauthorized  %+v", 401, o.Payload)
}

func (o *CheckPIDStatusUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckPIDStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckPIDStatusForbidden creates a CheckPIDStatusForbidden with default headers values
func NewCheckPIDStatusForbidden() *CheckPIDStatusForbidden {
	return &CheckPIDStatusForbidden{}
}

/*CheckPIDStatusForbidden handles this case with default header values.

This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.
*/
type CheckPIDStatusForbidden struct {
	Payload *models.ErrorResponse
}

func (o *CheckPIDStatusForbidden) Error() string {
	return fmt.Sprintf("[GET /dataset/pid/{request_id}][%d] checkPIdStatusForbidden  %+v", 403, o.Payload)
}

func (o *CheckPIDStatusForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckPIDStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckPIDStatusNotFound creates a CheckPIDStatusNotFound with default headers values
func NewCheckPIDStatusNotFound() *CheckPIDStatusNotFound {
	return &CheckPIDStatusNotFound{}
}

/*CheckPIDStatusNotFound handles this case with default header values.

This means that either the source path or the the target path on the system doesn't exist.
*/
type CheckPIDStatusNotFound struct {
	Payload *models.ErrorResponse
}

func (o *CheckPIDStatusNotFound) Error() string {
	return fmt.Sprintf("[GET /dataset/pid/{request_id}][%d] checkPIdStatusNotFound  %+v", 404, o.Payload)
}

func (o *CheckPIDStatusNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckPIDStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckPIDStatusRequestURITooLong creates a CheckPIDStatusRequestURITooLong with default headers values
func NewCheckPIDStatusRequestURITooLong() *CheckPIDStatusRequestURITooLong {
	return &CheckPIDStatusRequestURITooLong{}
}

/*CheckPIDStatusRequestURITooLong handles this case with default header values.

This means that the either the source path or the target path is longer than the server is willing to interpret.
*/
type CheckPIDStatusRequestURITooLong struct {
	Payload *models.ErrorResponse
}

func (o *CheckPIDStatusRequestURITooLong) Error() string {
	return fmt.Sprintf("[GET /dataset/pid/{request_id}][%d] checkPIdStatusRequestUriTooLong  %+v", 414, o.Payload)
}

func (o *CheckPIDStatusRequestURITooLong) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckPIDStatusRequestURITooLong) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckPIDStatusTooManyRequests creates a CheckPIDStatusTooManyRequests with default headers values
func NewCheckPIDStatusTooManyRequests() *CheckPIDStatusTooManyRequests {
	return &CheckPIDStatusTooManyRequests{}
}

/*CheckPIDStatusTooManyRequests handles this case with default header values.

This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.
*/
type CheckPIDStatusTooManyRequests struct {
	Payload *models.ErrorResponse
}

func (o *CheckPIDStatusTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /dataset/pid/{request_id}][%d] checkPIdStatusTooManyRequests  %+v", 429, o.Payload)
}

func (o *CheckPIDStatusTooManyRequests) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckPIDStatusTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckPIDStatusInternalServerError creates a CheckPIDStatusInternalServerError with default headers values
func NewCheckPIDStatusInternalServerError() *CheckPIDStatusInternalServerError {
	return &CheckPIDStatusInternalServerError{}
}

/*CheckPIDStatusInternalServerError handles this case with default header values.

This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.
*/
type CheckPIDStatusInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *CheckPIDStatusInternalServerError) Error() string {
	return fmt.Sprintf("[GET /dataset/pid/{request_id}][%d] checkPIdStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *CheckPIDStatusInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckPIDStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

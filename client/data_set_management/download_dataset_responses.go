// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// DownloadDatasetReader is a Reader for the DownloadDataset structure.
type DownloadDatasetReader struct {
	formats strfmt.Registry
	writer  io.Writer
}

// ReadResponse reads a server response into the received o.
func (o *DownloadDatasetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDownloadDatasetOK(o.writer)
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDownloadDatasetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDownloadDatasetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDownloadDatasetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDownloadDatasetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewDownloadDatasetBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewDownloadDatasetServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDownloadDatasetOK creates a DownloadDatasetOK with default headers values
func NewDownloadDatasetOK(writer io.Writer) *DownloadDatasetOK {
	return &DownloadDatasetOK{
		Payload: writer,
	}
}

/*DownloadDatasetOK handles this case with default header values.

zip containing dataset
*/
type DownloadDatasetOK struct {
	Payload io.Writer
}

func (o *DownloadDatasetOK) Error() string {
	return fmt.Sprintf("[POST /dataset/download][%d] downloadDatasetOK  %+v", 200, o.Payload)
}

func (o *DownloadDatasetOK) GetPayload() io.Writer {
	return o.Payload
}

func (o *DownloadDatasetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadDatasetBadRequest creates a DownloadDatasetBadRequest with default headers values
func NewDownloadDatasetBadRequest() *DownloadDatasetBadRequest {
	return &DownloadDatasetBadRequest{}
}

/*DownloadDatasetBadRequest handles this case with default header values.

Malformed Request
*/
type DownloadDatasetBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *DownloadDatasetBadRequest) Error() string {
	return fmt.Sprintf("[POST /dataset/download][%d] downloadDatasetBadRequest  %+v", 400, o.Payload)
}

func (o *DownloadDatasetBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DownloadDatasetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadDatasetUnauthorized creates a DownloadDatasetUnauthorized with default headers values
func NewDownloadDatasetUnauthorized() *DownloadDatasetUnauthorized {
	return &DownloadDatasetUnauthorized{}
}

/*DownloadDatasetUnauthorized handles this case with default header values.

Unauthorized
*/
type DownloadDatasetUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *DownloadDatasetUnauthorized) Error() string {
	return fmt.Sprintf("[POST /dataset/download][%d] downloadDatasetUnauthorized  %+v", 401, o.Payload)
}

func (o *DownloadDatasetUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DownloadDatasetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadDatasetForbidden creates a DownloadDatasetForbidden with default headers values
func NewDownloadDatasetForbidden() *DownloadDatasetForbidden {
	return &DownloadDatasetForbidden{}
}

/*DownloadDatasetForbidden handles this case with default header values.

Forbidden
*/
type DownloadDatasetForbidden struct {
	Payload *models.ErrorResponse
}

func (o *DownloadDatasetForbidden) Error() string {
	return fmt.Sprintf("[POST /dataset/download][%d] downloadDatasetForbidden  %+v", 403, o.Payload)
}

func (o *DownloadDatasetForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DownloadDatasetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadDatasetInternalServerError creates a DownloadDatasetInternalServerError with default headers values
func NewDownloadDatasetInternalServerError() *DownloadDatasetInternalServerError {
	return &DownloadDatasetInternalServerError{}
}

/*DownloadDatasetInternalServerError handles this case with default header values.

Internal error processing request
*/
type DownloadDatasetInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *DownloadDatasetInternalServerError) Error() string {
	return fmt.Sprintf("[POST /dataset/download][%d] downloadDatasetInternalServerError  %+v", 500, o.Payload)
}

func (o *DownloadDatasetInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DownloadDatasetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadDatasetBadGateway creates a DownloadDatasetBadGateway with default headers values
func NewDownloadDatasetBadGateway() *DownloadDatasetBadGateway {
	return &DownloadDatasetBadGateway{}
}

/*DownloadDatasetBadGateway handles this case with default header values.

Bad Gateway
*/
type DownloadDatasetBadGateway struct {
	Payload *models.ErrorResponse
}

func (o *DownloadDatasetBadGateway) Error() string {
	return fmt.Sprintf("[POST /dataset/download][%d] downloadDatasetBadGateway  %+v", 502, o.Payload)
}

func (o *DownloadDatasetBadGateway) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DownloadDatasetBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadDatasetServiceUnavailable creates a DownloadDatasetServiceUnavailable with default headers values
func NewDownloadDatasetServiceUnavailable() *DownloadDatasetServiceUnavailable {
	return &DownloadDatasetServiceUnavailable{}
}

/*DownloadDatasetServiceUnavailable handles this case with default header values.

unexpected error
*/
type DownloadDatasetServiceUnavailable struct {
	Payload *models.ErrorResponse
}

func (o *DownloadDatasetServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /dataset/download][%d] downloadDatasetServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DownloadDatasetServiceUnavailable) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DownloadDatasetServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*DownloadDatasetBody download dataset body
swagger:model DownloadDatasetBody
*/
type DownloadDatasetBody struct {

	// access
	// Required: true
	Access models.AccessMode `json:"access"`

	// archivetype
	Archivetype models.ArchiveType `json:"archivetype,omitempty"`

	// internal ID
	// Required: true
	InternalID *string `json:"internalID"`

	// path within the dataset, without a starting slash. An empty
	// string pushes to the root of the dataset (i.e. inside the
	// directory named <internalID> in the iRODS backend).
	//
	Path string `json:"path,omitempty"`

	// project
	// Required: true
	Project *string `json:"project"`

	// push method
	// Enum: [directupload]
	PushMethod string `json:"push_method,omitempty"`

	// zone
	Zone string `json:"zone,omitempty"`
}

// Validate validates this download dataset body
func (o *DownloadDatasetBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateArchivetype(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInternalID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePushMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DownloadDatasetBody) validateAccess(formats strfmt.Registry) error {

	if err := o.Access.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("json" + "." + "access")
		}
		return err
	}

	return nil
}

func (o *DownloadDatasetBody) validateArchivetype(formats strfmt.Registry) error {

	if swag.IsZero(o.Archivetype) { // not required
		return nil
	}

	if err := o.Archivetype.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("json" + "." + "archivetype")
		}
		return err
	}

	return nil
}

func (o *DownloadDatasetBody) validateInternalID(formats strfmt.Registry) error {

	if err := validate.Required("json"+"."+"internalID", "body", o.InternalID); err != nil {
		return err
	}

	return nil
}

func (o *DownloadDatasetBody) validateProject(formats strfmt.Registry) error {

	if err := validate.Required("json"+"."+"project", "body", o.Project); err != nil {
		return err
	}

	return nil
}

var downloadDatasetBodyTypePushMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["directupload"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		downloadDatasetBodyTypePushMethodPropEnum = append(downloadDatasetBodyTypePushMethodPropEnum, v)
	}
}

const (

	// DownloadDatasetBodyPushMethodDirectupload captures enum value "directupload"
	DownloadDatasetBodyPushMethodDirectupload string = "directupload"
)

// prop value enum
func (o *DownloadDatasetBody) validatePushMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, downloadDatasetBodyTypePushMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *DownloadDatasetBody) validatePushMethod(formats strfmt.Registry) error {

	if swag.IsZero(o.PushMethod) { // not required
		return nil
	}

	// value enum
	if err := o.validatePushMethodEnum("json"+"."+"push_method", "body", o.PushMethod); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DownloadDatasetBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DownloadDatasetBody) UnmarshalBinary(b []byte) error {
	var res DownloadDatasetBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

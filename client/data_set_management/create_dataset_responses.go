// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// CreateDatasetReader is a Reader for the CreateDataset structure.
type CreateDatasetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateDatasetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateDatasetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewCreateDatasetCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateDatasetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateDatasetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateDatasetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateDatasetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewCreateDatasetBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCreateDatasetServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateDatasetOK creates a CreateDatasetOK with default headers values
func NewCreateDatasetOK() *CreateDatasetOK {
	return &CreateDatasetOK{}
}

/*CreateDatasetOK handles this case with default header values.

dataset modified
*/
type CreateDatasetOK struct {
	Payload *models.DatasetItemCreatedResponse
}

func (o *CreateDatasetOK) Error() string {
	return fmt.Sprintf("[POST /dataset][%d] createDatasetOK  %+v", 200, o.Payload)
}

func (o *CreateDatasetOK) GetPayload() *models.DatasetItemCreatedResponse {
	return o.Payload
}

func (o *CreateDatasetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DatasetItemCreatedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDatasetCreated creates a CreateDatasetCreated with default headers values
func NewCreateDatasetCreated() *CreateDatasetCreated {
	return &CreateDatasetCreated{}
}

/*CreateDatasetCreated handles this case with default header values.

dataset created
*/
type CreateDatasetCreated struct {
	Payload *models.DatasetItemCreatedResponse
}

func (o *CreateDatasetCreated) Error() string {
	return fmt.Sprintf("[POST /dataset][%d] createDatasetCreated  %+v", 201, o.Payload)
}

func (o *CreateDatasetCreated) GetPayload() *models.DatasetItemCreatedResponse {
	return o.Payload
}

func (o *CreateDatasetCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DatasetItemCreatedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDatasetBadRequest creates a CreateDatasetBadRequest with default headers values
func NewCreateDatasetBadRequest() *CreateDatasetBadRequest {
	return &CreateDatasetBadRequest{}
}

/*CreateDatasetBadRequest handles this case with default header values.

invalid input, object invalid
*/
type CreateDatasetBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *CreateDatasetBadRequest) Error() string {
	return fmt.Sprintf("[POST /dataset][%d] createDatasetBadRequest  %+v", 400, o.Payload)
}

func (o *CreateDatasetBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateDatasetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDatasetUnauthorized creates a CreateDatasetUnauthorized with default headers values
func NewCreateDatasetUnauthorized() *CreateDatasetUnauthorized {
	return &CreateDatasetUnauthorized{}
}

/*CreateDatasetUnauthorized handles this case with default header values.

Unauthorized
*/
type CreateDatasetUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *CreateDatasetUnauthorized) Error() string {
	return fmt.Sprintf("[POST /dataset][%d] createDatasetUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateDatasetUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateDatasetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDatasetForbidden creates a CreateDatasetForbidden with default headers values
func NewCreateDatasetForbidden() *CreateDatasetForbidden {
	return &CreateDatasetForbidden{}
}

/*CreateDatasetForbidden handles this case with default header values.

User not authorized to perform action
*/
type CreateDatasetForbidden struct {
	Payload *models.ErrorResponse
}

func (o *CreateDatasetForbidden) Error() string {
	return fmt.Sprintf("[POST /dataset][%d] createDatasetForbidden  %+v", 403, o.Payload)
}

func (o *CreateDatasetForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateDatasetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDatasetInternalServerError creates a CreateDatasetInternalServerError with default headers values
func NewCreateDatasetInternalServerError() *CreateDatasetInternalServerError {
	return &CreateDatasetInternalServerError{}
}

/*CreateDatasetInternalServerError handles this case with default header values.

unexpected error
*/
type CreateDatasetInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *CreateDatasetInternalServerError) Error() string {
	return fmt.Sprintf("[POST /dataset][%d] createDatasetInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateDatasetInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateDatasetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDatasetBadGateway creates a CreateDatasetBadGateway with default headers values
func NewCreateDatasetBadGateway() *CreateDatasetBadGateway {
	return &CreateDatasetBadGateway{}
}

/*CreateDatasetBadGateway handles this case with default header values.

Bad Gateway
*/
type CreateDatasetBadGateway struct {
	Payload *models.ErrorResponse
}

func (o *CreateDatasetBadGateway) Error() string {
	return fmt.Sprintf("[POST /dataset][%d] createDatasetBadGateway  %+v", 502, o.Payload)
}

func (o *CreateDatasetBadGateway) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateDatasetBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDatasetServiceUnavailable creates a CreateDatasetServiceUnavailable with default headers values
func NewCreateDatasetServiceUnavailable() *CreateDatasetServiceUnavailable {
	return &CreateDatasetServiceUnavailable{}
}

/*CreateDatasetServiceUnavailable handles this case with default header values.

unexpected error
*/
type CreateDatasetServiceUnavailable struct {
	Payload *models.ErrorResponse
}

func (o *CreateDatasetServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /dataset][%d] createDatasetServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CreateDatasetServiceUnavailable) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateDatasetServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CreateDatasetBody create dataset body
swagger:model CreateDatasetBody
*/
type CreateDatasetBody struct {

	// access
	// Required: true
	Access models.AccessMode `json:"access"`

	// comp
	// Enum: [yes no]
	Comp string `json:"comp,omitempty"`

	// compress method
	CompressMethod models.CompressMethod `json:"compress_method,omitempty"`

	// enc
	// Enum: [yes no]
	Enc string `json:"enc,omitempty"`

	// - If pushmethod is directupload, json-escaped, base64-encoded
	// file or zip (depending on compress_method).
	// - If pushmethod is tus, url from the Location returned by the
	// previous tus call.
	//
	File string `json:"file,omitempty"`

	// internal ID
	InternalID string `json:"internalID,omitempty"`

	// metadata
	Metadata *models.DatasetMetadata `json:"metadata,omitempty"`

	// name of the file if compress_method is file, or if using pushmethod tus.
	Name string `json:"name,omitempty"`

	// path within the dataset, without a starting slash. An empty
	// string pushes to the root of the dataset (i.e. inside the
	// directory named <internalID> in the iRODS backend).
	//
	Path string `json:"path,omitempty"`

	// project
	// Required: true
	Project *string `json:"project"`

	// push method
	// Required: true
	PushMethod models.PushMethod `json:"push_method"`

	// zone
	Zone string `json:"zone,omitempty"`
}

// Validate validates this create dataset body
func (o *CreateDatasetBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateComp(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCompressMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEnc(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePushMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateDatasetBody) validateAccess(formats strfmt.Registry) error {

	if err := o.Access.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dataset" + "." + "access")
		}
		return err
	}

	return nil
}

var createDatasetBodyTypeCompPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["yes","no"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createDatasetBodyTypeCompPropEnum = append(createDatasetBodyTypeCompPropEnum, v)
	}
}

const (

	// CreateDatasetBodyCompYes captures enum value "yes"
	CreateDatasetBodyCompYes string = "yes"

	// CreateDatasetBodyCompNo captures enum value "no"
	CreateDatasetBodyCompNo string = "no"
)

// prop value enum
func (o *CreateDatasetBody) validateCompEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createDatasetBodyTypeCompPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateDatasetBody) validateComp(formats strfmt.Registry) error {

	if swag.IsZero(o.Comp) { // not required
		return nil
	}

	// value enum
	if err := o.validateCompEnum("dataset"+"."+"comp", "body", o.Comp); err != nil {
		return err
	}

	return nil
}

func (o *CreateDatasetBody) validateCompressMethod(formats strfmt.Registry) error {

	if swag.IsZero(o.CompressMethod) { // not required
		return nil
	}

	if err := o.CompressMethod.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dataset" + "." + "compress_method")
		}
		return err
	}

	return nil
}

var createDatasetBodyTypeEncPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["yes","no"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createDatasetBodyTypeEncPropEnum = append(createDatasetBodyTypeEncPropEnum, v)
	}
}

const (

	// CreateDatasetBodyEncYes captures enum value "yes"
	CreateDatasetBodyEncYes string = "yes"

	// CreateDatasetBodyEncNo captures enum value "no"
	CreateDatasetBodyEncNo string = "no"
)

// prop value enum
func (o *CreateDatasetBody) validateEncEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createDatasetBodyTypeEncPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateDatasetBody) validateEnc(formats strfmt.Registry) error {

	if swag.IsZero(o.Enc) { // not required
		return nil
	}

	// value enum
	if err := o.validateEncEnum("dataset"+"."+"enc", "body", o.Enc); err != nil {
		return err
	}

	return nil
}

func (o *CreateDatasetBody) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataset" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *CreateDatasetBody) validateProject(formats strfmt.Registry) error {

	if err := validate.Required("dataset"+"."+"project", "body", o.Project); err != nil {
		return err
	}

	return nil
}

func (o *CreateDatasetBody) validatePushMethod(formats strfmt.Registry) error {

	if err := o.PushMethod.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dataset" + "." + "push_method")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateDatasetBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateDatasetBody) UnmarshalBinary(b []byte) error {
	var res CreateDatasetBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// OptionsDatasetUploadReader is a Reader for the OptionsDatasetUpload structure.
type OptionsDatasetUploadReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OptionsDatasetUploadReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewOptionsDatasetUploadOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewOptionsDatasetUploadNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewOptionsDatasetUploadUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewOptionsDatasetUploadServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewOptionsDatasetUploadOK creates a OptionsDatasetUploadOK with default headers values
func NewOptionsDatasetUploadOK() *OptionsDatasetUploadOK {
	return &OptionsDatasetUploadOK{}
}

/*OptionsDatasetUploadOK handles this case with default header values.

Success
*/
type OptionsDatasetUploadOK struct {
	/*Needed to make browsers accept the additional headers used by
	the tus protocol.

	*/
	AccessControlExposeHeaders string
	/*Added by the checksum extension. The Tus-Checksum-Algorithm response header MUST be a comma-separated list of the checksum algorithms supported by the server.
	 */
	TusChecksumAlgorithm string
	/*The Tus-Extension response header MUST be a comma-separated list of the extensions supported by the Server. If no extensions are supported, the Tus-Extension header MUST be omitted.
	 */
	TusExtension string
	/*The Tus-Max-Size response header MUST be a non-negative integer indicating the maximum allowed size of an entire upload in bytes. The Server SHOULD set this header if there is a known hard limit.
	 */
	TusMaxSize int64
	/*Protocol version
	 */
	TusResumable string
	/*The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one.
	 */
	TusVersion string
}

func (o *OptionsDatasetUploadOK) Error() string {
	return fmt.Sprintf("[OPTIONS /dataset/upload/][%d] optionsDatasetUploadOK ", 200)
}

func (o *OptionsDatasetUploadOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Access-Control-Expose-Headers
	o.AccessControlExposeHeaders = response.GetHeader("Access-Control-Expose-Headers")

	// response header Tus-Checksum-Algorithm
	o.TusChecksumAlgorithm = response.GetHeader("Tus-Checksum-Algorithm")

	// response header Tus-Extension
	o.TusExtension = response.GetHeader("Tus-Extension")

	// response header Tus-Max-Size
	tusMaxSize, err := swag.ConvertInt64(response.GetHeader("Tus-Max-Size"))
	if err != nil {
		return errors.InvalidType("Tus-Max-Size", "header", "int64", response.GetHeader("Tus-Max-Size"))
	}
	o.TusMaxSize = tusMaxSize

	// response header Tus-Resumable
	o.TusResumable = response.GetHeader("Tus-Resumable")

	// response header Tus-Version
	o.TusVersion = response.GetHeader("Tus-Version")

	return nil
}

// NewOptionsDatasetUploadNoContent creates a OptionsDatasetUploadNoContent with default headers values
func NewOptionsDatasetUploadNoContent() *OptionsDatasetUploadNoContent {
	return &OptionsDatasetUploadNoContent{}
}

/*OptionsDatasetUploadNoContent handles this case with default header values.

Success
*/
type OptionsDatasetUploadNoContent struct {
	/*Needed to make browsers accept the additional headers used by
	the tus protocol.

	*/
	AccessControlExposeHeaders string
	/*Added by the checksum extension. The Tus-Checksum-Algorithm response header MUST be a comma-separated list of the checksum algorithms supported by the server.
	 */
	TusChecksumAlgorithm string
	/*The Tus-Extension response header MUST be a comma-separated list of the extensions supported by the Server. If no extensions are supported, the Tus-Extension header MUST be omitted.
	 */
	TusExtension string
	/*The Tus-Max-Size response header MUST be a non-negative integer indicating the maximum allowed size of an entire upload in bytes. The Server SHOULD set this header if there is a known hard limit.
	 */
	TusMaxSize int64

	TusResumable string
	/*The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one.
	 */
	TusVersion string
}

func (o *OptionsDatasetUploadNoContent) Error() string {
	return fmt.Sprintf("[OPTIONS /dataset/upload/][%d] optionsDatasetUploadNoContent ", 204)
}

func (o *OptionsDatasetUploadNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Access-Control-Expose-Headers
	o.AccessControlExposeHeaders = response.GetHeader("Access-Control-Expose-Headers")

	// response header Tus-Checksum-Algorithm
	o.TusChecksumAlgorithm = response.GetHeader("Tus-Checksum-Algorithm")

	// response header Tus-Extension
	o.TusExtension = response.GetHeader("Tus-Extension")

	// response header Tus-Max-Size
	tusMaxSize, err := swag.ConvertInt64(response.GetHeader("Tus-Max-Size"))
	if err != nil {
		return errors.InvalidType("Tus-Max-Size", "header", "int64", response.GetHeader("Tus-Max-Size"))
	}
	o.TusMaxSize = tusMaxSize

	// response header Tus-Resumable
	o.TusResumable = response.GetHeader("Tus-Resumable")

	// response header Tus-Version
	o.TusVersion = response.GetHeader("Tus-Version")

	return nil
}

// NewOptionsDatasetUploadUnauthorized creates a OptionsDatasetUploadUnauthorized with default headers values
func NewOptionsDatasetUploadUnauthorized() *OptionsDatasetUploadUnauthorized {
	return &OptionsDatasetUploadUnauthorized{}
}

/*OptionsDatasetUploadUnauthorized handles this case with default header values.

Authorization failed
*/
type OptionsDatasetUploadUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *OptionsDatasetUploadUnauthorized) Error() string {
	return fmt.Sprintf("[OPTIONS /dataset/upload/][%d] optionsDatasetUploadUnauthorized  %+v", 401, o.Payload)
}

func (o *OptionsDatasetUploadUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *OptionsDatasetUploadUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOptionsDatasetUploadServiceUnavailable creates a OptionsDatasetUploadServiceUnavailable with default headers values
func NewOptionsDatasetUploadServiceUnavailable() *OptionsDatasetUploadServiceUnavailable {
	return &OptionsDatasetUploadServiceUnavailable{}
}

/*OptionsDatasetUploadServiceUnavailable handles this case with default header values.

Service Unavailable
*/
type OptionsDatasetUploadServiceUnavailable struct {
	Payload *models.ErrorResponse
}

func (o *OptionsDatasetUploadServiceUnavailable) Error() string {
	return fmt.Sprintf("[OPTIONS /dataset/upload/][%d] optionsDatasetUploadServiceUnavailable  %+v", 503, o.Payload)
}

func (o *OptionsDatasetUploadServiceUnavailable) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *OptionsDatasetUploadServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

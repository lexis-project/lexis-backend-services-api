// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// CompressReader is a Reader for the Compress structure.
type CompressReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CompressReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCompressCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCompressBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCompressUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCompressForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCompressNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 414:
		result := NewCompressRequestURITooLong()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCompressTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCompressInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCompressCreated creates a CompressCreated with default headers values
func NewCompressCreated() *CompressCreated {
	return &CompressCreated{}
}

/*CompressCreated handles this case with default header values.

The response code means that the compression has been initiated. Status of the operation can be checked by querying the status.
*/
type CompressCreated struct {
	Payload *models.SteeringRequestID
}

func (o *CompressCreated) Error() string {
	return fmt.Sprintf("[POST /dataset/encryption/compress][%d] compressCreated  %+v", 201, o.Payload)
}

func (o *CompressCreated) GetPayload() *models.SteeringRequestID {
	return o.Payload
}

func (o *CompressCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SteeringRequestID)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCompressBadRequest creates a CompressBadRequest with default headers values
func NewCompressBadRequest() *CompressBadRequest {
	return &CompressBadRequest{}
}

/*CompressBadRequest handles this case with default header values.

This means that there's something wrong in the input parameters and the server couldn't understand the request.
*/
type CompressBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *CompressBadRequest) Error() string {
	return fmt.Sprintf("[POST /dataset/encryption/compress][%d] compressBadRequest  %+v", 400, o.Payload)
}

func (o *CompressBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CompressBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCompressUnauthorized creates a CompressUnauthorized with default headers values
func NewCompressUnauthorized() *CompressUnauthorized {
	return &CompressUnauthorized{}
}

/*CompressUnauthorized handles this case with default header values.

This means that the user is not authenticated with keycloak and compression can't be triggered unless the user first log in with a valid user
*/
type CompressUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *CompressUnauthorized) Error() string {
	return fmt.Sprintf("[POST /dataset/encryption/compress][%d] compressUnauthorized  %+v", 401, o.Payload)
}

func (o *CompressUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CompressUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCompressForbidden creates a CompressForbidden with default headers values
func NewCompressForbidden() *CompressForbidden {
	return &CompressForbidden{}
}

/*CompressForbidden handles this case with default header values.

This means that the resource the user is trying to compress is not readable. User doesn't have the correct rights to read the source file.
*/
type CompressForbidden struct {
	Payload *models.ErrorResponse
}

func (o *CompressForbidden) Error() string {
	return fmt.Sprintf("[POST /dataset/encryption/compress][%d] compressForbidden  %+v", 403, o.Payload)
}

func (o *CompressForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CompressForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCompressNotFound creates a CompressNotFound with default headers values
func NewCompressNotFound() *CompressNotFound {
	return &CompressNotFound{}
}

/*CompressNotFound handles this case with default header values.

This means that the source path on the system doesn't exist.
*/
type CompressNotFound struct {
	Payload *models.ErrorResponse
}

func (o *CompressNotFound) Error() string {
	return fmt.Sprintf("[POST /dataset/encryption/compress][%d] compressNotFound  %+v", 404, o.Payload)
}

func (o *CompressNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CompressNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCompressRequestURITooLong creates a CompressRequestURITooLong with default headers values
func NewCompressRequestURITooLong() *CompressRequestURITooLong {
	return &CompressRequestURITooLong{}
}

/*CompressRequestURITooLong handles this case with default header values.

This means that the either the source path is longer than the server is willing to interpret.
*/
type CompressRequestURITooLong struct {
	Payload *models.ErrorResponse
}

func (o *CompressRequestURITooLong) Error() string {
	return fmt.Sprintf("[POST /dataset/encryption/compress][%d] compressRequestUriTooLong  %+v", 414, o.Payload)
}

func (o *CompressRequestURITooLong) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CompressRequestURITooLong) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCompressTooManyRequests creates a CompressTooManyRequests with default headers values
func NewCompressTooManyRequests() *CompressTooManyRequests {
	return &CompressTooManyRequests{}
}

/*CompressTooManyRequests handles this case with default header values.

This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.
*/
type CompressTooManyRequests struct {
	Payload *models.ErrorResponse
}

func (o *CompressTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /dataset/encryption/compress][%d] compressTooManyRequests  %+v", 429, o.Payload)
}

func (o *CompressTooManyRequests) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CompressTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCompressInternalServerError creates a CompressInternalServerError with default headers values
func NewCompressInternalServerError() *CompressInternalServerError {
	return &CompressInternalServerError{}
}

/*CompressInternalServerError handles this case with default header values.

This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.
*/
type CompressInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *CompressInternalServerError) Error() string {
	return fmt.Sprintf("[POST /dataset/encryption/compress][%d] compressInternalServerError  %+v", 500, o.Payload)
}

func (o *CompressInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CompressInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CompressBody compress body
swagger:model CompressBody
*/
type CompressBody struct {

	// source path
	// Required: true
	SourcePath *string `json:"source_path"`

	// source system
	// Required: true
	SourceSystem *string `json:"source_system"`
}

// Validate validates this compress body
func (o *CompressBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSourcePath(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSourceSystem(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CompressBody) validateSourcePath(formats strfmt.Registry) error {

	if err := validate.Required("parameters"+"."+"source_path", "body", o.SourcePath); err != nil {
		return err
	}

	return nil
}

func (o *CompressBody) validateSourceSystem(formats strfmt.Registry) error {

	if err := validate.Required("parameters"+"."+"source_system", "body", o.SourceSystem); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CompressBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CompressBody) UnmarshalBinary(b []byte) error {
	var res CompressBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

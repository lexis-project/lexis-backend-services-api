// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPostDatasetUploadParams creates a new PostDatasetUploadParams object
// with the default values initialized.
func NewPostDatasetUploadParams() *PostDatasetUploadParams {
	var ()
	return &PostDatasetUploadParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostDatasetUploadParamsWithTimeout creates a new PostDatasetUploadParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostDatasetUploadParamsWithTimeout(timeout time.Duration) *PostDatasetUploadParams {
	var ()
	return &PostDatasetUploadParams{

		timeout: timeout,
	}
}

// NewPostDatasetUploadParamsWithContext creates a new PostDatasetUploadParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostDatasetUploadParamsWithContext(ctx context.Context) *PostDatasetUploadParams {
	var ()
	return &PostDatasetUploadParams{

		Context: ctx,
	}
}

// NewPostDatasetUploadParamsWithHTTPClient creates a new PostDatasetUploadParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostDatasetUploadParamsWithHTTPClient(client *http.Client) *PostDatasetUploadParams {
	var ()
	return &PostDatasetUploadParams{
		HTTPClient: client,
	}
}

/*PostDatasetUploadParams contains all the parameters to send to the API endpoint
for the post dataset upload operation typically these are written to a http.Request
*/
type PostDatasetUploadParams struct {

	/*ContentLength
	  Must be 0 for creation extension. May be a positive number for creation-with-upload extension.

	*/
	ContentLength *int64
	/*TusResumable
	  Protocol version

	*/
	TusResumable string
	/*UploadChecksum
	  Added by the checksum extension. The Upload-Checksum request header contains information about the checksum of the current body payload. The header MUST consist of the name of the used checksum algorithm and the Base64 encoded checksum separated by a space.

	*/
	UploadChecksum *string
	/*UploadConcat
	  Added by the Concatenation extension. The Upload-Concat request and response header MUST be set in both partial and final upload creation requests. It indicates whether the upload is either a partial or final upload. If the upload is a partial one, the header value MUST be partial. In the case of a final upload, its value MUST be final followed by a semicolon and a space-separated list of partial upload URLs that will be concatenated. The partial uploads URLs MAY be absolute or relative and MUST NOT contain spaces as defined in RFC 3986.

	*/
	UploadConcat *string
	/*UploadDeferLength
	  Added by the creation-defer-length extension. The Upload-Defer-Length request and response header indicates that the size of the upload is not known currently and will be transferred later. Its value MUST be 1. If the length of an upload is not deferred, this header MUST be omitted.

	*/
	UploadDeferLength *int64
	/*UploadLength
	  The Upload-Length request and response header indicates the size of the entire upload in bytes. The value MUST be a non-negative integer. In the concatenation extension, the Client MUST NOT include the Upload-Length header in the final upload creation

	*/
	UploadLength *int64
	/*UploadMetadata
	  Added by the Creation extension. The Upload-Metadata request and response header MUST consist of one or more comma-separated key-value pairs. The key and value MUST be separated by a space. The key MUST NOT contain spaces and commas and MUST NOT be empty. The key SHOULD be ASCII encoded and the value MUST be Base64 encoded. All keys MUST be unique. The value MAY be empty. In these cases, the space, which would normally separate the key and the value, MAY be left out. Since metadata can contain arbitrary binary values, Servers SHOULD carefully validate metadata values or sanitize them before using them as header values to avoid header smuggling.

	*/
	UploadMetadata *string
	/*UploadOffset*/
	UploadOffset *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post dataset upload params
func (o *PostDatasetUploadParams) WithTimeout(timeout time.Duration) *PostDatasetUploadParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post dataset upload params
func (o *PostDatasetUploadParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post dataset upload params
func (o *PostDatasetUploadParams) WithContext(ctx context.Context) *PostDatasetUploadParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post dataset upload params
func (o *PostDatasetUploadParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post dataset upload params
func (o *PostDatasetUploadParams) WithHTTPClient(client *http.Client) *PostDatasetUploadParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post dataset upload params
func (o *PostDatasetUploadParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContentLength adds the contentLength to the post dataset upload params
func (o *PostDatasetUploadParams) WithContentLength(contentLength *int64) *PostDatasetUploadParams {
	o.SetContentLength(contentLength)
	return o
}

// SetContentLength adds the contentLength to the post dataset upload params
func (o *PostDatasetUploadParams) SetContentLength(contentLength *int64) {
	o.ContentLength = contentLength
}

// WithTusResumable adds the tusResumable to the post dataset upload params
func (o *PostDatasetUploadParams) WithTusResumable(tusResumable string) *PostDatasetUploadParams {
	o.SetTusResumable(tusResumable)
	return o
}

// SetTusResumable adds the tusResumable to the post dataset upload params
func (o *PostDatasetUploadParams) SetTusResumable(tusResumable string) {
	o.TusResumable = tusResumable
}

// WithUploadChecksum adds the uploadChecksum to the post dataset upload params
func (o *PostDatasetUploadParams) WithUploadChecksum(uploadChecksum *string) *PostDatasetUploadParams {
	o.SetUploadChecksum(uploadChecksum)
	return o
}

// SetUploadChecksum adds the uploadChecksum to the post dataset upload params
func (o *PostDatasetUploadParams) SetUploadChecksum(uploadChecksum *string) {
	o.UploadChecksum = uploadChecksum
}

// WithUploadConcat adds the uploadConcat to the post dataset upload params
func (o *PostDatasetUploadParams) WithUploadConcat(uploadConcat *string) *PostDatasetUploadParams {
	o.SetUploadConcat(uploadConcat)
	return o
}

// SetUploadConcat adds the uploadConcat to the post dataset upload params
func (o *PostDatasetUploadParams) SetUploadConcat(uploadConcat *string) {
	o.UploadConcat = uploadConcat
}

// WithUploadDeferLength adds the uploadDeferLength to the post dataset upload params
func (o *PostDatasetUploadParams) WithUploadDeferLength(uploadDeferLength *int64) *PostDatasetUploadParams {
	o.SetUploadDeferLength(uploadDeferLength)
	return o
}

// SetUploadDeferLength adds the uploadDeferLength to the post dataset upload params
func (o *PostDatasetUploadParams) SetUploadDeferLength(uploadDeferLength *int64) {
	o.UploadDeferLength = uploadDeferLength
}

// WithUploadLength adds the uploadLength to the post dataset upload params
func (o *PostDatasetUploadParams) WithUploadLength(uploadLength *int64) *PostDatasetUploadParams {
	o.SetUploadLength(uploadLength)
	return o
}

// SetUploadLength adds the uploadLength to the post dataset upload params
func (o *PostDatasetUploadParams) SetUploadLength(uploadLength *int64) {
	o.UploadLength = uploadLength
}

// WithUploadMetadata adds the uploadMetadata to the post dataset upload params
func (o *PostDatasetUploadParams) WithUploadMetadata(uploadMetadata *string) *PostDatasetUploadParams {
	o.SetUploadMetadata(uploadMetadata)
	return o
}

// SetUploadMetadata adds the uploadMetadata to the post dataset upload params
func (o *PostDatasetUploadParams) SetUploadMetadata(uploadMetadata *string) {
	o.UploadMetadata = uploadMetadata
}

// WithUploadOffset adds the uploadOffset to the post dataset upload params
func (o *PostDatasetUploadParams) WithUploadOffset(uploadOffset *int64) *PostDatasetUploadParams {
	o.SetUploadOffset(uploadOffset)
	return o
}

// SetUploadOffset adds the uploadOffset to the post dataset upload params
func (o *PostDatasetUploadParams) SetUploadOffset(uploadOffset *int64) {
	o.UploadOffset = uploadOffset
}

// WriteToRequest writes these params to a swagger request
func (o *PostDatasetUploadParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ContentLength != nil {

		// header param Content-Length
		if err := r.SetHeaderParam("Content-Length", swag.FormatInt64(*o.ContentLength)); err != nil {
			return err
		}

	}

	// header param Tus-Resumable
	if err := r.SetHeaderParam("Tus-Resumable", o.TusResumable); err != nil {
		return err
	}

	if o.UploadChecksum != nil {

		// header param Upload-Checksum
		if err := r.SetHeaderParam("Upload-Checksum", *o.UploadChecksum); err != nil {
			return err
		}

	}

	if o.UploadConcat != nil {

		// header param Upload-Concat
		if err := r.SetHeaderParam("Upload-Concat", *o.UploadConcat); err != nil {
			return err
		}

	}

	if o.UploadDeferLength != nil {

		// header param Upload-Defer-Length
		if err := r.SetHeaderParam("Upload-Defer-Length", swag.FormatInt64(*o.UploadDeferLength)); err != nil {
			return err
		}

	}

	if o.UploadLength != nil {

		// header param Upload-Length
		if err := r.SetHeaderParam("Upload-Length", swag.FormatInt64(*o.UploadLength)); err != nil {
			return err
		}

	}

	if o.UploadMetadata != nil {

		// header param Upload-Metadata
		if err := r.SetHeaderParam("Upload-Metadata", *o.UploadMetadata); err != nil {
			return err
		}

	}

	if o.UploadOffset != nil {

		// header param Upload-offset
		if err := r.SetHeaderParam("Upload-offset", swag.FormatInt64(*o.UploadOffset)); err != nil {
			return err
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

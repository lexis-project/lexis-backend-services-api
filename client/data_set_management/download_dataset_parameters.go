// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDownloadDatasetParams creates a new DownloadDatasetParams object
// with the default values initialized.
func NewDownloadDatasetParams() *DownloadDatasetParams {
	var ()
	return &DownloadDatasetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDownloadDatasetParamsWithTimeout creates a new DownloadDatasetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDownloadDatasetParamsWithTimeout(timeout time.Duration) *DownloadDatasetParams {
	var ()
	return &DownloadDatasetParams{

		timeout: timeout,
	}
}

// NewDownloadDatasetParamsWithContext creates a new DownloadDatasetParams object
// with the default values initialized, and the ability to set a context for a request
func NewDownloadDatasetParamsWithContext(ctx context.Context) *DownloadDatasetParams {
	var ()
	return &DownloadDatasetParams{

		Context: ctx,
	}
}

// NewDownloadDatasetParamsWithHTTPClient creates a new DownloadDatasetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDownloadDatasetParamsWithHTTPClient(client *http.Client) *DownloadDatasetParams {
	var ()
	return &DownloadDatasetParams{
		HTTPClient: client,
	}
}

/*DownloadDatasetParams contains all the parameters to send to the API endpoint
for the download dataset operation typically these are written to a http.Request
*/
type DownloadDatasetParams struct {

	/*JSON
	  parameters

	*/
	JSON DownloadDatasetBody

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the download dataset params
func (o *DownloadDatasetParams) WithTimeout(timeout time.Duration) *DownloadDatasetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the download dataset params
func (o *DownloadDatasetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the download dataset params
func (o *DownloadDatasetParams) WithContext(ctx context.Context) *DownloadDatasetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the download dataset params
func (o *DownloadDatasetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the download dataset params
func (o *DownloadDatasetParams) WithHTTPClient(client *http.Client) *DownloadDatasetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the download dataset params
func (o *DownloadDatasetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithJSON adds the json to the download dataset params
func (o *DownloadDatasetParams) WithJSON(json DownloadDatasetBody) *DownloadDatasetParams {
	o.SetJSON(json)
	return o
}

// SetJSON adds the json to the download dataset params
func (o *DownloadDatasetParams) SetJSON(json DownloadDatasetBody) {
	o.JSON = json
}

// WriteToRequest writes these params to a swagger request
func (o *DownloadDatasetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.JSON); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// CertificateReader is a Reader for the Certificate structure.
type CertificateReader struct {
	formats strfmt.Registry
	writer  io.Writer
}

// ReadResponse reads a server response into the received o.
func (o *CertificateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCertificateOK(o.writer)
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCertificateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCertificateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewCertificateBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCertificateServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCertificateOK creates a CertificateOK with default headers values
func NewCertificateOK(writer io.Writer) *CertificateOK {
	return &CertificateOK{
		Payload: writer,
	}
}

/*CertificateOK handles this case with default header values.

Certificate download in body of response
*/
type CertificateOK struct {
	Payload io.Writer
}

func (o *CertificateOK) Error() string {
	return fmt.Sprintf("[GET /dataset/cert][%d] certificateOK  %+v", 200, o.Payload)
}

func (o *CertificateOK) GetPayload() io.Writer {
	return o.Payload
}

func (o *CertificateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCertificateUnauthorized creates a CertificateUnauthorized with default headers values
func NewCertificateUnauthorized() *CertificateUnauthorized {
	return &CertificateUnauthorized{}
}

/*CertificateUnauthorized handles this case with default header values.

Unauthorized
*/
type CertificateUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *CertificateUnauthorized) Error() string {
	return fmt.Sprintf("[GET /dataset/cert][%d] certificateUnauthorized  %+v", 401, o.Payload)
}

func (o *CertificateUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CertificateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCertificateInternalServerError creates a CertificateInternalServerError with default headers values
func NewCertificateInternalServerError() *CertificateInternalServerError {
	return &CertificateInternalServerError{}
}

/*CertificateInternalServerError handles this case with default header values.

Internal error processing request
*/
type CertificateInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *CertificateInternalServerError) Error() string {
	return fmt.Sprintf("[GET /dataset/cert][%d] certificateInternalServerError  %+v", 500, o.Payload)
}

func (o *CertificateInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CertificateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCertificateBadGateway creates a CertificateBadGateway with default headers values
func NewCertificateBadGateway() *CertificateBadGateway {
	return &CertificateBadGateway{}
}

/*CertificateBadGateway handles this case with default header values.

Bad Gateway
*/
type CertificateBadGateway struct {
	Payload *models.ErrorResponse
}

func (o *CertificateBadGateway) Error() string {
	return fmt.Sprintf("[GET /dataset/cert][%d] certificateBadGateway  %+v", 502, o.Payload)
}

func (o *CertificateBadGateway) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CertificateBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCertificateServiceUnavailable creates a CertificateServiceUnavailable with default headers values
func NewCertificateServiceUnavailable() *CertificateServiceUnavailable {
	return &CertificateServiceUnavailable{}
}

/*CertificateServiceUnavailable handles this case with default header values.

unexpected error
*/
type CertificateServiceUnavailable struct {
	Payload *models.ErrorResponse
}

func (o *CertificateServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /dataset/cert][%d] certificateServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CertificateServiceUnavailable) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CertificateServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// EncryptReader is a Reader for the Encrypt structure.
type EncryptReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EncryptReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewEncryptCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEncryptBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewEncryptUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEncryptForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEncryptNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 414:
		result := NewEncryptRequestURITooLong()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewEncryptTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEncryptInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewEncryptCreated creates a EncryptCreated with default headers values
func NewEncryptCreated() *EncryptCreated {
	return &EncryptCreated{}
}

/*EncryptCreated handles this case with default header values.

The response code means that the encryption has been initiated. Status of the operation can be checked by querying the status.
*/
type EncryptCreated struct {
	Payload *models.SteeringRequestID
}

func (o *EncryptCreated) Error() string {
	return fmt.Sprintf("[POST /dataset/encryption/encrypt][%d] encryptCreated  %+v", 201, o.Payload)
}

func (o *EncryptCreated) GetPayload() *models.SteeringRequestID {
	return o.Payload
}

func (o *EncryptCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SteeringRequestID)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEncryptBadRequest creates a EncryptBadRequest with default headers values
func NewEncryptBadRequest() *EncryptBadRequest {
	return &EncryptBadRequest{}
}

/*EncryptBadRequest handles this case with default header values.

This means that there's something wrong in the input parameters and the server couldn't understand the request.
*/
type EncryptBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *EncryptBadRequest) Error() string {
	return fmt.Sprintf("[POST /dataset/encryption/encrypt][%d] encryptBadRequest  %+v", 400, o.Payload)
}

func (o *EncryptBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *EncryptBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEncryptUnauthorized creates a EncryptUnauthorized with default headers values
func NewEncryptUnauthorized() *EncryptUnauthorized {
	return &EncryptUnauthorized{}
}

/*EncryptUnauthorized handles this case with default header values.

This means that the user is not authenticated with keycloak and encryption can't be triggered unless the user first log in with a valid user
*/
type EncryptUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *EncryptUnauthorized) Error() string {
	return fmt.Sprintf("[POST /dataset/encryption/encrypt][%d] encryptUnauthorized  %+v", 401, o.Payload)
}

func (o *EncryptUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *EncryptUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEncryptForbidden creates a EncryptForbidden with default headers values
func NewEncryptForbidden() *EncryptForbidden {
	return &EncryptForbidden{}
}

/*EncryptForbidden handles this case with default header values.

This means that the resource the user is trying to encrypt from or to is not readable. User doesn't have the correct rights to read the source file.
*/
type EncryptForbidden struct {
	Payload *models.ErrorResponse
}

func (o *EncryptForbidden) Error() string {
	return fmt.Sprintf("[POST /dataset/encryption/encrypt][%d] encryptForbidden  %+v", 403, o.Payload)
}

func (o *EncryptForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *EncryptForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEncryptNotFound creates a EncryptNotFound with default headers values
func NewEncryptNotFound() *EncryptNotFound {
	return &EncryptNotFound{}
}

/*EncryptNotFound handles this case with default header values.

This means that the source path on the system doesn't exist.
*/
type EncryptNotFound struct {
	Payload *models.ErrorResponse
}

func (o *EncryptNotFound) Error() string {
	return fmt.Sprintf("[POST /dataset/encryption/encrypt][%d] encryptNotFound  %+v", 404, o.Payload)
}

func (o *EncryptNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *EncryptNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEncryptRequestURITooLong creates a EncryptRequestURITooLong with default headers values
func NewEncryptRequestURITooLong() *EncryptRequestURITooLong {
	return &EncryptRequestURITooLong{}
}

/*EncryptRequestURITooLong handles this case with default header values.

This means that the source path is longer than the server is willing to interpret.
*/
type EncryptRequestURITooLong struct {
	Payload *models.ErrorResponse
}

func (o *EncryptRequestURITooLong) Error() string {
	return fmt.Sprintf("[POST /dataset/encryption/encrypt][%d] encryptRequestUriTooLong  %+v", 414, o.Payload)
}

func (o *EncryptRequestURITooLong) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *EncryptRequestURITooLong) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEncryptTooManyRequests creates a EncryptTooManyRequests with default headers values
func NewEncryptTooManyRequests() *EncryptTooManyRequests {
	return &EncryptTooManyRequests{}
}

/*EncryptTooManyRequests handles this case with default header values.

This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.
*/
type EncryptTooManyRequests struct {
	Payload *models.ErrorResponse
}

func (o *EncryptTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /dataset/encryption/encrypt][%d] encryptTooManyRequests  %+v", 429, o.Payload)
}

func (o *EncryptTooManyRequests) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *EncryptTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEncryptInternalServerError creates a EncryptInternalServerError with default headers values
func NewEncryptInternalServerError() *EncryptInternalServerError {
	return &EncryptInternalServerError{}
}

/*EncryptInternalServerError handles this case with default header values.

This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.
*/
type EncryptInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *EncryptInternalServerError) Error() string {
	return fmt.Sprintf("[POST /dataset/encryption/encrypt][%d] encryptInternalServerError  %+v", 500, o.Payload)
}

func (o *EncryptInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *EncryptInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*EncryptBody encrypt body
swagger:model EncryptBody
*/
type EncryptBody struct {

	// project
	// Required: true
	Project *string `json:"project"`

	// source path
	// Required: true
	SourcePath *string `json:"source_path"`

	// source system
	// Required: true
	SourceSystem *string `json:"source_system"`
}

// Validate validates this encrypt body
func (o *EncryptBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSourcePath(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSourceSystem(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *EncryptBody) validateProject(formats strfmt.Registry) error {

	if err := validate.Required("parameters"+"."+"project", "body", o.Project); err != nil {
		return err
	}

	return nil
}

func (o *EncryptBody) validateSourcePath(formats strfmt.Registry) error {

	if err := validate.Required("parameters"+"."+"source_path", "body", o.SourcePath); err != nil {
		return err
	}

	return nil
}

func (o *EncryptBody) validateSourceSystem(formats strfmt.Registry) error {

	if err := validate.Required("parameters"+"."+"source_system", "body", o.SourceSystem); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *EncryptBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EncryptBody) UnmarshalBinary(b []byte) error {
	var res EncryptBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

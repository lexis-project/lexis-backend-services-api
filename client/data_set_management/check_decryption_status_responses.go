// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// CheckDecryptionStatusReader is a Reader for the CheckDecryptionStatus structure.
type CheckDecryptionStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CheckDecryptionStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCheckDecryptionStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCheckDecryptionStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCheckDecryptionStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCheckDecryptionStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 414:
		result := NewCheckDecryptionStatusRequestURITooLong()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCheckDecryptionStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCheckDecryptionStatusOK creates a CheckDecryptionStatusOK with default headers values
func NewCheckDecryptionStatusOK() *CheckDecryptionStatusOK {
	return &CheckDecryptionStatusOK{}
}

/*CheckDecryptionStatusOK handles this case with default header values.

This means that the status has been returned to the user in the response body.
*/
type CheckDecryptionStatusOK struct {
	Payload *CheckDecryptionStatusOKBody
}

func (o *CheckDecryptionStatusOK) Error() string {
	return fmt.Sprintf("[GET /dataset/encryption/decrypt/{request_id}][%d] checkDecryptionStatusOK  %+v", 200, o.Payload)
}

func (o *CheckDecryptionStatusOK) GetPayload() *CheckDecryptionStatusOKBody {
	return o.Payload
}

func (o *CheckDecryptionStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CheckDecryptionStatusOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckDecryptionStatusBadRequest creates a CheckDecryptionStatusBadRequest with default headers values
func NewCheckDecryptionStatusBadRequest() *CheckDecryptionStatusBadRequest {
	return &CheckDecryptionStatusBadRequest{}
}

/*CheckDecryptionStatusBadRequest handles this case with default header values.

This means that the request ID given by the user is incorrect.
*/
type CheckDecryptionStatusBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *CheckDecryptionStatusBadRequest) Error() string {
	return fmt.Sprintf("[GET /dataset/encryption/decrypt/{request_id}][%d] checkDecryptionStatusBadRequest  %+v", 400, o.Payload)
}

func (o *CheckDecryptionStatusBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckDecryptionStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckDecryptionStatusUnauthorized creates a CheckDecryptionStatusUnauthorized with default headers values
func NewCheckDecryptionStatusUnauthorized() *CheckDecryptionStatusUnauthorized {
	return &CheckDecryptionStatusUnauthorized{}
}

/*CheckDecryptionStatusUnauthorized handles this case with default header values.

This means that the user is not authenticated with keycloak and decryption can't be triggered unless the user first log in with a valid user
*/
type CheckDecryptionStatusUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *CheckDecryptionStatusUnauthorized) Error() string {
	return fmt.Sprintf("[GET /dataset/encryption/decrypt/{request_id}][%d] checkDecryptionStatusUnauthorized  %+v", 401, o.Payload)
}

func (o *CheckDecryptionStatusUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckDecryptionStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckDecryptionStatusNotFound creates a CheckDecryptionStatusNotFound with default headers values
func NewCheckDecryptionStatusNotFound() *CheckDecryptionStatusNotFound {
	return &CheckDecryptionStatusNotFound{}
}

/*CheckDecryptionStatusNotFound handles this case with default header values.

This means that the ID doesn't exist and thus a status can't be returned.
*/
type CheckDecryptionStatusNotFound struct {
	Payload *models.ErrorResponse
}

func (o *CheckDecryptionStatusNotFound) Error() string {
	return fmt.Sprintf("[GET /dataset/encryption/decrypt/{request_id}][%d] checkDecryptionStatusNotFound  %+v", 404, o.Payload)
}

func (o *CheckDecryptionStatusNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckDecryptionStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckDecryptionStatusRequestURITooLong creates a CheckDecryptionStatusRequestURITooLong with default headers values
func NewCheckDecryptionStatusRequestURITooLong() *CheckDecryptionStatusRequestURITooLong {
	return &CheckDecryptionStatusRequestURITooLong{}
}

/*CheckDecryptionStatusRequestURITooLong handles this case with default header values.

This means that the the request ID is longer than the server is willing to interpret.
*/
type CheckDecryptionStatusRequestURITooLong struct {
	Payload *models.ErrorResponse
}

func (o *CheckDecryptionStatusRequestURITooLong) Error() string {
	return fmt.Sprintf("[GET /dataset/encryption/decrypt/{request_id}][%d] checkDecryptionStatusRequestUriTooLong  %+v", 414, o.Payload)
}

func (o *CheckDecryptionStatusRequestURITooLong) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckDecryptionStatusRequestURITooLong) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckDecryptionStatusInternalServerError creates a CheckDecryptionStatusInternalServerError with default headers values
func NewCheckDecryptionStatusInternalServerError() *CheckDecryptionStatusInternalServerError {
	return &CheckDecryptionStatusInternalServerError{}
}

/*CheckDecryptionStatusInternalServerError handles this case with default header values.

This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.
*/
type CheckDecryptionStatusInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *CheckDecryptionStatusInternalServerError) Error() string {
	return fmt.Sprintf("[GET /dataset/encryption/decrypt/{request_id}][%d] checkDecryptionStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *CheckDecryptionStatusInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckDecryptionStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CheckDecryptionStatusOKBody check decryption status o k body
swagger:model CheckDecryptionStatusOKBody
*/
type CheckDecryptionStatusOKBody struct {

	// status
	// Required: true
	Status *string `json:"status"`

	// Single path for encryption endpoints
	TargetPath string `json:"target_path,omitempty"`
}

// Validate validates this check decryption status o k body
func (o *CheckDecryptionStatusOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CheckDecryptionStatusOKBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("checkDecryptionStatusOK"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CheckDecryptionStatusOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CheckDecryptionStatusOKBody) UnmarshalBinary(b []byte) error {
	var res CheckDecryptionStatusOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

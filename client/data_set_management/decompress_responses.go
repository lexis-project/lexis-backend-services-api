// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// DecompressReader is a Reader for the Decompress structure.
type DecompressReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DecompressReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewDecompressCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDecompressBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDecompressUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDecompressForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDecompressNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 414:
		result := NewDecompressRequestURITooLong()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDecompressTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDecompressInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDecompressCreated creates a DecompressCreated with default headers values
func NewDecompressCreated() *DecompressCreated {
	return &DecompressCreated{}
}

/*DecompressCreated handles this case with default header values.

The response code means that the decompression has been initiated. Status of the operation can be checked by querying the status.
*/
type DecompressCreated struct {
	Payload *models.SteeringRequestID
}

func (o *DecompressCreated) Error() string {
	return fmt.Sprintf("[POST /dataset/encryption/decompress][%d] decompressCreated  %+v", 201, o.Payload)
}

func (o *DecompressCreated) GetPayload() *models.SteeringRequestID {
	return o.Payload
}

func (o *DecompressCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SteeringRequestID)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDecompressBadRequest creates a DecompressBadRequest with default headers values
func NewDecompressBadRequest() *DecompressBadRequest {
	return &DecompressBadRequest{}
}

/*DecompressBadRequest handles this case with default header values.

This means that there's something wrong in the input parameters and the server couldn't understand the request.
*/
type DecompressBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *DecompressBadRequest) Error() string {
	return fmt.Sprintf("[POST /dataset/encryption/decompress][%d] decompressBadRequest  %+v", 400, o.Payload)
}

func (o *DecompressBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DecompressBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDecompressUnauthorized creates a DecompressUnauthorized with default headers values
func NewDecompressUnauthorized() *DecompressUnauthorized {
	return &DecompressUnauthorized{}
}

/*DecompressUnauthorized handles this case with default header values.

This means that the user is not authenticated with keycloak and decompression can't be triggered unless the user first log in with a valid user
*/
type DecompressUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *DecompressUnauthorized) Error() string {
	return fmt.Sprintf("[POST /dataset/encryption/decompress][%d] decompressUnauthorized  %+v", 401, o.Payload)
}

func (o *DecompressUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DecompressUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDecompressForbidden creates a DecompressForbidden with default headers values
func NewDecompressForbidden() *DecompressForbidden {
	return &DecompressForbidden{}
}

/*DecompressForbidden handles this case with default header values.

This means that the resource the user is trying to compress is not readable by the user. User doesn't have the correct rights to read the source file.
*/
type DecompressForbidden struct {
	Payload *models.ErrorResponse
}

func (o *DecompressForbidden) Error() string {
	return fmt.Sprintf("[POST /dataset/encryption/decompress][%d] decompressForbidden  %+v", 403, o.Payload)
}

func (o *DecompressForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DecompressForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDecompressNotFound creates a DecompressNotFound with default headers values
func NewDecompressNotFound() *DecompressNotFound {
	return &DecompressNotFound{}
}

/*DecompressNotFound handles this case with default header values.

This means that either the source path on the system doesn't exist.
*/
type DecompressNotFound struct {
	Payload *models.ErrorResponse
}

func (o *DecompressNotFound) Error() string {
	return fmt.Sprintf("[POST /dataset/encryption/decompress][%d] decompressNotFound  %+v", 404, o.Payload)
}

func (o *DecompressNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DecompressNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDecompressRequestURITooLong creates a DecompressRequestURITooLong with default headers values
func NewDecompressRequestURITooLong() *DecompressRequestURITooLong {
	return &DecompressRequestURITooLong{}
}

/*DecompressRequestURITooLong handles this case with default header values.

This means that the either the source path is longer than the server is willing to interpret.
*/
type DecompressRequestURITooLong struct {
	Payload *models.ErrorResponse
}

func (o *DecompressRequestURITooLong) Error() string {
	return fmt.Sprintf("[POST /dataset/encryption/decompress][%d] decompressRequestUriTooLong  %+v", 414, o.Payload)
}

func (o *DecompressRequestURITooLong) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DecompressRequestURITooLong) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDecompressTooManyRequests creates a DecompressTooManyRequests with default headers values
func NewDecompressTooManyRequests() *DecompressTooManyRequests {
	return &DecompressTooManyRequests{}
}

/*DecompressTooManyRequests handles this case with default header values.

This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.
*/
type DecompressTooManyRequests struct {
	Payload *models.ErrorResponse
}

func (o *DecompressTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /dataset/encryption/decompress][%d] decompressTooManyRequests  %+v", 429, o.Payload)
}

func (o *DecompressTooManyRequests) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DecompressTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDecompressInternalServerError creates a DecompressInternalServerError with default headers values
func NewDecompressInternalServerError() *DecompressInternalServerError {
	return &DecompressInternalServerError{}
}

/*DecompressInternalServerError handles this case with default header values.

This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.
*/
type DecompressInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *DecompressInternalServerError) Error() string {
	return fmt.Sprintf("[POST /dataset/encryption/decompress][%d] decompressInternalServerError  %+v", 500, o.Payload)
}

func (o *DecompressInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DecompressInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*DecompressBody decompress body
swagger:model DecompressBody
*/
type DecompressBody struct {

	// source path
	// Required: true
	SourcePath *string `json:"source_path"`

	// source system
	// Required: true
	SourceSystem *string `json:"source_system"`
}

// Validate validates this decompress body
func (o *DecompressBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSourcePath(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSourceSystem(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DecompressBody) validateSourcePath(formats strfmt.Registry) error {

	if err := validate.Required("parameters"+"."+"source_path", "body", o.SourcePath); err != nil {
		return err
	}

	return nil
}

func (o *DecompressBody) validateSourceSystem(formats strfmt.Registry) error {

	if err := validate.Required("parameters"+"."+"source_system", "body", o.SourceSystem); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DecompressBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DecompressBody) UnmarshalBinary(b []byte) error {
	var res DecompressBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

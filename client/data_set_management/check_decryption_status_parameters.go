// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCheckDecryptionStatusParams creates a new CheckDecryptionStatusParams object
// with the default values initialized.
func NewCheckDecryptionStatusParams() *CheckDecryptionStatusParams {
	var ()
	return &CheckDecryptionStatusParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCheckDecryptionStatusParamsWithTimeout creates a new CheckDecryptionStatusParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCheckDecryptionStatusParamsWithTimeout(timeout time.Duration) *CheckDecryptionStatusParams {
	var ()
	return &CheckDecryptionStatusParams{

		timeout: timeout,
	}
}

// NewCheckDecryptionStatusParamsWithContext creates a new CheckDecryptionStatusParams object
// with the default values initialized, and the ability to set a context for a request
func NewCheckDecryptionStatusParamsWithContext(ctx context.Context) *CheckDecryptionStatusParams {
	var ()
	return &CheckDecryptionStatusParams{

		Context: ctx,
	}
}

// NewCheckDecryptionStatusParamsWithHTTPClient creates a new CheckDecryptionStatusParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCheckDecryptionStatusParamsWithHTTPClient(client *http.Client) *CheckDecryptionStatusParams {
	var ()
	return &CheckDecryptionStatusParams{
		HTTPClient: client,
	}
}

/*CheckDecryptionStatusParams contains all the parameters to send to the API endpoint
for the check decryption status operation typically these are written to a http.Request
*/
type CheckDecryptionStatusParams struct {

	/*RequestID*/
	RequestID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the check decryption status params
func (o *CheckDecryptionStatusParams) WithTimeout(timeout time.Duration) *CheckDecryptionStatusParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the check decryption status params
func (o *CheckDecryptionStatusParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the check decryption status params
func (o *CheckDecryptionStatusParams) WithContext(ctx context.Context) *CheckDecryptionStatusParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the check decryption status params
func (o *CheckDecryptionStatusParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the check decryption status params
func (o *CheckDecryptionStatusParams) WithHTTPClient(client *http.Client) *CheckDecryptionStatusParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the check decryption status params
func (o *CheckDecryptionStatusParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRequestID adds the requestID to the check decryption status params
func (o *CheckDecryptionStatusParams) WithRequestID(requestID strfmt.UUID) *CheckDecryptionStatusParams {
	o.SetRequestID(requestID)
	return o
}

// SetRequestID adds the requestId to the check decryption status params
func (o *CheckDecryptionStatusParams) SetRequestID(requestID strfmt.UUID) {
	o.RequestID = requestID
}

// WriteToRequest writes these params to a swagger request
func (o *CheckDecryptionStatusParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param request_id
	if err := r.SetPathParam("request_id", o.RequestID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

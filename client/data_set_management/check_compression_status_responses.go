// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// CheckCompressionStatusReader is a Reader for the CheckCompressionStatus structure.
type CheckCompressionStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CheckCompressionStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCheckCompressionStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCheckCompressionStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCheckCompressionStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCheckCompressionStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 414:
		result := NewCheckCompressionStatusRequestURITooLong()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCheckCompressionStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCheckCompressionStatusOK creates a CheckCompressionStatusOK with default headers values
func NewCheckCompressionStatusOK() *CheckCompressionStatusOK {
	return &CheckCompressionStatusOK{}
}

/*CheckCompressionStatusOK handles this case with default header values.

This means that the status has been returned to the user in the response body.
*/
type CheckCompressionStatusOK struct {
	Payload *CheckCompressionStatusOKBody
}

func (o *CheckCompressionStatusOK) Error() string {
	return fmt.Sprintf("[GET /dataset/encryption/compress/{request_id}][%d] checkCompressionStatusOK  %+v", 200, o.Payload)
}

func (o *CheckCompressionStatusOK) GetPayload() *CheckCompressionStatusOKBody {
	return o.Payload
}

func (o *CheckCompressionStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CheckCompressionStatusOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckCompressionStatusBadRequest creates a CheckCompressionStatusBadRequest with default headers values
func NewCheckCompressionStatusBadRequest() *CheckCompressionStatusBadRequest {
	return &CheckCompressionStatusBadRequest{}
}

/*CheckCompressionStatusBadRequest handles this case with default header values.

This means that the request ID given by the user is incorrect.
*/
type CheckCompressionStatusBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *CheckCompressionStatusBadRequest) Error() string {
	return fmt.Sprintf("[GET /dataset/encryption/compress/{request_id}][%d] checkCompressionStatusBadRequest  %+v", 400, o.Payload)
}

func (o *CheckCompressionStatusBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckCompressionStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckCompressionStatusUnauthorized creates a CheckCompressionStatusUnauthorized with default headers values
func NewCheckCompressionStatusUnauthorized() *CheckCompressionStatusUnauthorized {
	return &CheckCompressionStatusUnauthorized{}
}

/*CheckCompressionStatusUnauthorized handles this case with default header values.

This means that the user is not authenticated with keycloak and compression can't be triggered unless the user first log in with a valid user
*/
type CheckCompressionStatusUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *CheckCompressionStatusUnauthorized) Error() string {
	return fmt.Sprintf("[GET /dataset/encryption/compress/{request_id}][%d] checkCompressionStatusUnauthorized  %+v", 401, o.Payload)
}

func (o *CheckCompressionStatusUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckCompressionStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckCompressionStatusNotFound creates a CheckCompressionStatusNotFound with default headers values
func NewCheckCompressionStatusNotFound() *CheckCompressionStatusNotFound {
	return &CheckCompressionStatusNotFound{}
}

/*CheckCompressionStatusNotFound handles this case with default header values.

This means that the ID doesn't exist and thus a status can't be returned.
*/
type CheckCompressionStatusNotFound struct {
	Payload *models.ErrorResponse
}

func (o *CheckCompressionStatusNotFound) Error() string {
	return fmt.Sprintf("[GET /dataset/encryption/compress/{request_id}][%d] checkCompressionStatusNotFound  %+v", 404, o.Payload)
}

func (o *CheckCompressionStatusNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckCompressionStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckCompressionStatusRequestURITooLong creates a CheckCompressionStatusRequestURITooLong with default headers values
func NewCheckCompressionStatusRequestURITooLong() *CheckCompressionStatusRequestURITooLong {
	return &CheckCompressionStatusRequestURITooLong{}
}

/*CheckCompressionStatusRequestURITooLong handles this case with default header values.

This means that the the request ID is longer than the server is willing to interpret.
*/
type CheckCompressionStatusRequestURITooLong struct {
	Payload *models.ErrorResponse
}

func (o *CheckCompressionStatusRequestURITooLong) Error() string {
	return fmt.Sprintf("[GET /dataset/encryption/compress/{request_id}][%d] checkCompressionStatusRequestUriTooLong  %+v", 414, o.Payload)
}

func (o *CheckCompressionStatusRequestURITooLong) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckCompressionStatusRequestURITooLong) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckCompressionStatusInternalServerError creates a CheckCompressionStatusInternalServerError with default headers values
func NewCheckCompressionStatusInternalServerError() *CheckCompressionStatusInternalServerError {
	return &CheckCompressionStatusInternalServerError{}
}

/*CheckCompressionStatusInternalServerError handles this case with default header values.

This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.
*/
type CheckCompressionStatusInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *CheckCompressionStatusInternalServerError) Error() string {
	return fmt.Sprintf("[GET /dataset/encryption/compress/{request_id}][%d] checkCompressionStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *CheckCompressionStatusInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CheckCompressionStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CheckCompressionStatusOKBody check compression status o k body
swagger:model CheckCompressionStatusOKBody
*/
type CheckCompressionStatusOKBody struct {

	// status
	// Required: true
	Status *string `json:"status"`

	// Single path for encryption endpoints
	TargetPath string `json:"target_path,omitempty"`
}

// Validate validates this check compression status o k body
func (o *CheckCompressionStatusOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CheckCompressionStatusOKBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("checkCompressionStatusOK"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CheckCompressionStatusOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CheckCompressionStatusOKBody) UnmarshalBinary(b []byte) error {
	var res CheckCompressionStatusOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

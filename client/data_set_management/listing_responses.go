// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// ListingReader is a Reader for the Listing structure.
type ListingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListingBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListingUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListingForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewListingBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewListingServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListingOK creates a ListingOK with default headers values
func NewListingOK() *ListingOK {
	return &ListingOK{}
}

/*ListingOK handles this case with default header values.

Content of the dataset
*/
type ListingOK struct {
	Payload *models.DatasetContent
}

func (o *ListingOK) Error() string {
	return fmt.Sprintf("[POST /dataset/listing][%d] listingOK  %+v", 200, o.Payload)
}

func (o *ListingOK) GetPayload() *models.DatasetContent {
	return o.Payload
}

func (o *ListingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DatasetContent)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListingBadRequest creates a ListingBadRequest with default headers values
func NewListingBadRequest() *ListingBadRequest {
	return &ListingBadRequest{}
}

/*ListingBadRequest handles this case with default header values.

Malformed request
*/
type ListingBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *ListingBadRequest) Error() string {
	return fmt.Sprintf("[POST /dataset/listing][%d] listingBadRequest  %+v", 400, o.Payload)
}

func (o *ListingBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ListingBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListingUnauthorized creates a ListingUnauthorized with default headers values
func NewListingUnauthorized() *ListingUnauthorized {
	return &ListingUnauthorized{}
}

/*ListingUnauthorized handles this case with default header values.

Authorization failed
*/
type ListingUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *ListingUnauthorized) Error() string {
	return fmt.Sprintf("[POST /dataset/listing][%d] listingUnauthorized  %+v", 401, o.Payload)
}

func (o *ListingUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ListingUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListingForbidden creates a ListingForbidden with default headers values
func NewListingForbidden() *ListingForbidden {
	return &ListingForbidden{}
}

/*ListingForbidden handles this case with default header values.

User does not have permission
*/
type ListingForbidden struct {
	Payload *models.ErrorResponse
}

func (o *ListingForbidden) Error() string {
	return fmt.Sprintf("[POST /dataset/listing][%d] listingForbidden  %+v", 403, o.Payload)
}

func (o *ListingForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ListingForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListingBadGateway creates a ListingBadGateway with default headers values
func NewListingBadGateway() *ListingBadGateway {
	return &ListingBadGateway{}
}

/*ListingBadGateway handles this case with default header values.

Bad Gateway
*/
type ListingBadGateway struct {
	Payload *models.ErrorResponse
}

func (o *ListingBadGateway) Error() string {
	return fmt.Sprintf("[POST /dataset/listing][%d] listingBadGateway  %+v", 502, o.Payload)
}

func (o *ListingBadGateway) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ListingBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListingServiceUnavailable creates a ListingServiceUnavailable with default headers values
func NewListingServiceUnavailable() *ListingServiceUnavailable {
	return &ListingServiceUnavailable{}
}

/*ListingServiceUnavailable handles this case with default header values.

Error accessing backend service
*/
type ListingServiceUnavailable struct {
	Payload *models.ErrorResponse
}

func (o *ListingServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /dataset/listing][%d] listingServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ListingServiceUnavailable) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ListingServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ListingBody listing body
swagger:model ListingBody
*/
type ListingBody struct {

	// access
	// Required: true
	Access models.AccessMode `json:"access"`

	// internal ID
	// Required: true
	InternalID *string `json:"internalID"`

	// path within the dataset, without a starting slash. An empty
	// string pushes to the root of the dataset (i.e. inside the
	// directory named <internalID> in the iRODS backend).
	//
	Path string `json:"path,omitempty"`

	// project
	// Required: true
	Project *string `json:"project"`

	// recursive
	Recursive *bool `json:"recursive,omitempty"`

	// zone
	Zone string `json:"zone,omitempty"`
}

// Validate validates this listing body
func (o *ListingBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInternalID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListingBody) validateAccess(formats strfmt.Registry) error {

	if err := o.Access.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("json" + "." + "access")
		}
		return err
	}

	return nil
}

func (o *ListingBody) validateInternalID(formats strfmt.Registry) error {

	if err := validate.Required("json"+"."+"internalID", "body", o.InternalID); err != nil {
		return err
	}

	return nil
}

func (o *ListingBody) validateProject(formats strfmt.Registry) error {

	if err := validate.Required("json"+"."+"project", "body", o.Project); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListingBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListingBody) UnmarshalBinary(b []byte) error {
	var res ListingBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApprovalSystemApprovedResourceRequest approval system approved resource request
//
// swagger:model ApprovalSystemApprovedResourceRequest
type ApprovalSystemApprovedResourceRequest struct {

	// approval objections
	ApprovalObjections string `json:"ApprovalObjections,omitempty"`

	// approval status
	// Enum: [PENDING ACCEPTED REJECTED]
	ApprovalStatus string `json:"ApprovalStatus,omitempty"`

	// associated h p c project
	// Required: true
	AssociatedHPCProject *string `json:"AssociatedHPCProject"`

	// associated l e x i s project
	// Required: true
	// Format: uuid
	AssociatedLEXISProject *strfmt.UUID `json:"AssociatedLEXISProject"`

	// associated l e x i s project name
	// Required: true
	AssociatedLEXISProjectName *string `json:"AssociatedLEXISProjectName"`

	// cloud network name
	// Format: uri
	CloudNetworkName strfmt.URI `json:"CloudNetworkName,omitempty"`

	// h e app e endpoint
	// Format: uri
	HEAppEEndpoint strfmt.URI `json:"HEAppEEndpoint,omitempty"`

	// h p c provider
	// Enum: [IT4I LRZ ICHEC]
	HPCProvider string `json:"HPCProvider,omitempty"`

	// h p c resource ID
	HPCResourceID string `json:"HPCResourceID,omitempty"`

	// open stack endpoint
	// Format: uri
	OpenStackEndpoint strfmt.URI `json:"OpenStackEndpoint,omitempty"`

	// primary investigator
	// Required: true
	// Format: email
	PrimaryInvestigator *strfmt.Email `json:"PrimaryInvestigator"`

	// project contact email
	// Required: true
	// Format: email
	ProjectContactEmail *strfmt.Email `json:"ProjectContactEmail"`

	// resource type
	ResourceType string `json:"ResourceType,omitempty"`

	// terms consent
	// Required: true
	TermsConsent *bool `json:"TermsConsent"`
}

// Validate validates this approval system approved resource request
func (m *ApprovalSystemApprovedResourceRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApprovalStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssociatedHPCProject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssociatedLEXISProject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssociatedLEXISProjectName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudNetworkName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHEAppEEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHPCProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpenStackEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimaryInvestigator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectContactEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTermsConsent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var approvalSystemApprovedResourceRequestTypeApprovalStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PENDING","ACCEPTED","REJECTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		approvalSystemApprovedResourceRequestTypeApprovalStatusPropEnum = append(approvalSystemApprovedResourceRequestTypeApprovalStatusPropEnum, v)
	}
}

const (

	// ApprovalSystemApprovedResourceRequestApprovalStatusPENDING captures enum value "PENDING"
	ApprovalSystemApprovedResourceRequestApprovalStatusPENDING string = "PENDING"

	// ApprovalSystemApprovedResourceRequestApprovalStatusACCEPTED captures enum value "ACCEPTED"
	ApprovalSystemApprovedResourceRequestApprovalStatusACCEPTED string = "ACCEPTED"

	// ApprovalSystemApprovedResourceRequestApprovalStatusREJECTED captures enum value "REJECTED"
	ApprovalSystemApprovedResourceRequestApprovalStatusREJECTED string = "REJECTED"
)

// prop value enum
func (m *ApprovalSystemApprovedResourceRequest) validateApprovalStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, approvalSystemApprovedResourceRequestTypeApprovalStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ApprovalSystemApprovedResourceRequest) validateApprovalStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ApprovalStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateApprovalStatusEnum("ApprovalStatus", "body", m.ApprovalStatus); err != nil {
		return err
	}

	return nil
}

func (m *ApprovalSystemApprovedResourceRequest) validateAssociatedHPCProject(formats strfmt.Registry) error {

	if err := validate.Required("AssociatedHPCProject", "body", m.AssociatedHPCProject); err != nil {
		return err
	}

	return nil
}

func (m *ApprovalSystemApprovedResourceRequest) validateAssociatedLEXISProject(formats strfmt.Registry) error {

	if err := validate.Required("AssociatedLEXISProject", "body", m.AssociatedLEXISProject); err != nil {
		return err
	}

	if err := validate.FormatOf("AssociatedLEXISProject", "body", "uuid", m.AssociatedLEXISProject.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ApprovalSystemApprovedResourceRequest) validateAssociatedLEXISProjectName(formats strfmt.Registry) error {

	if err := validate.Required("AssociatedLEXISProjectName", "body", m.AssociatedLEXISProjectName); err != nil {
		return err
	}

	return nil
}

func (m *ApprovalSystemApprovedResourceRequest) validateCloudNetworkName(formats strfmt.Registry) error {

	if swag.IsZero(m.CloudNetworkName) { // not required
		return nil
	}

	if err := validate.FormatOf("CloudNetworkName", "body", "uri", m.CloudNetworkName.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ApprovalSystemApprovedResourceRequest) validateHEAppEEndpoint(formats strfmt.Registry) error {

	if swag.IsZero(m.HEAppEEndpoint) { // not required
		return nil
	}

	if err := validate.FormatOf("HEAppEEndpoint", "body", "uri", m.HEAppEEndpoint.String(), formats); err != nil {
		return err
	}

	return nil
}

var approvalSystemApprovedResourceRequestTypeHPCProviderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IT4I","LRZ","ICHEC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		approvalSystemApprovedResourceRequestTypeHPCProviderPropEnum = append(approvalSystemApprovedResourceRequestTypeHPCProviderPropEnum, v)
	}
}

const (

	// ApprovalSystemApprovedResourceRequestHPCProviderIT4I captures enum value "IT4I"
	ApprovalSystemApprovedResourceRequestHPCProviderIT4I string = "IT4I"

	// ApprovalSystemApprovedResourceRequestHPCProviderLRZ captures enum value "LRZ"
	ApprovalSystemApprovedResourceRequestHPCProviderLRZ string = "LRZ"

	// ApprovalSystemApprovedResourceRequestHPCProviderICHEC captures enum value "ICHEC"
	ApprovalSystemApprovedResourceRequestHPCProviderICHEC string = "ICHEC"
)

// prop value enum
func (m *ApprovalSystemApprovedResourceRequest) validateHPCProviderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, approvalSystemApprovedResourceRequestTypeHPCProviderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ApprovalSystemApprovedResourceRequest) validateHPCProvider(formats strfmt.Registry) error {

	if swag.IsZero(m.HPCProvider) { // not required
		return nil
	}

	// value enum
	if err := m.validateHPCProviderEnum("HPCProvider", "body", m.HPCProvider); err != nil {
		return err
	}

	return nil
}

func (m *ApprovalSystemApprovedResourceRequest) validateOpenStackEndpoint(formats strfmt.Registry) error {

	if swag.IsZero(m.OpenStackEndpoint) { // not required
		return nil
	}

	if err := validate.FormatOf("OpenStackEndpoint", "body", "uri", m.OpenStackEndpoint.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ApprovalSystemApprovedResourceRequest) validatePrimaryInvestigator(formats strfmt.Registry) error {

	if err := validate.Required("PrimaryInvestigator", "body", m.PrimaryInvestigator); err != nil {
		return err
	}

	if err := validate.FormatOf("PrimaryInvestigator", "body", "email", m.PrimaryInvestigator.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ApprovalSystemApprovedResourceRequest) validateProjectContactEmail(formats strfmt.Registry) error {

	if err := validate.Required("ProjectContactEmail", "body", m.ProjectContactEmail); err != nil {
		return err
	}

	if err := validate.FormatOf("ProjectContactEmail", "body", "email", m.ProjectContactEmail.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ApprovalSystemApprovedResourceRequest) validateTermsConsent(formats strfmt.Registry) error {

	if err := validate.Required("TermsConsent", "body", m.TermsConsent); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApprovalSystemApprovedResourceRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApprovalSystemApprovedResourceRequest) UnmarshalBinary(b []byte) error {
	var res ApprovalSystemApprovedResourceRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

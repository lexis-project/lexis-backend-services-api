// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
	"github.com/lib/pq"
	"gitlab.com/cyclops-utilities/datamodels"
)

// User user
//
// swagger:model User
type User struct {

	// agree to use of cookies
	AgreeToUseOfCookies bool `json:"AgreeToUseOfCookies,omitempty"`

	// agreed to terms of use
	AgreedToTermsOfUse bool `json:"AgreedToTermsOfUse,omitempty"`

	// allowed organizations
	AllowedOrganizations pq.StringArray `json:"AllowedOrganizations,omitempty"`

	// date of agreement to terms of use
	// Format: date-time
	DateOfAgreementToTermsOfUse strfmt.DateTime `json:"DateOfAgreementToTermsOfUse,omitempty"`

	// date of agreement to use of cookies
	// Format: date-time
	DateOfAgreementToUseOfCookies strfmt.DateTime `json:"DateOfAgreementToUseOfCookies,omitempty"`

	// email address
	// Format: email
	EmailAddress strfmt.Email `json:"EmailAddress,omitempty"`

	// first name
	FirstName string `json:"FirstName,omitempty"`

	// This is an id generated by keycloak
	// Format: uuid
	ID strfmt.UUID `json:"ID,omitempty"`

	// last name
	LastName string `json:"LastName,omitempty"`

	// organization ID
	// Format: uuid
	OrganizationID strfmt.UUID `json:"OrganizationID,omitempty"`

	// This is an id for a PGP Key - what it means is still tbd
	PGPKeyID string `json:"PGPKeyID,omitempty"`

	// permissions
	Permissions datamodels.JSONdb `json:"Permissions,omitempty"`

	// projects
	Projects pq.StringArray `json:"Projects,omitempty"`

	// registration date time
	// Format: date-time
	RegistrationDateTime strfmt.DateTime `json:"RegistrationDateTime,omitempty"`

	// terms of use version
	TermsOfUseVersion string `json:"TermsOfUseVersion,omitempty"`

	// user status
	// Enum: [ENABLED DISABLED]
	UserStatus string `json:"UserStatus,omitempty"`

	// username
	Username string `json:"Username,omitempty"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateOfAgreementToTermsOfUse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateOfAgreementToUseOfCookies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrationDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateDateOfAgreementToTermsOfUse(formats strfmt.Registry) error {

	if swag.IsZero(m.DateOfAgreementToTermsOfUse) { // not required
		return nil
	}

	if err := validate.FormatOf("DateOfAgreementToTermsOfUse", "body", "date-time", m.DateOfAgreementToTermsOfUse.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateDateOfAgreementToUseOfCookies(formats strfmt.Registry) error {

	if swag.IsZero(m.DateOfAgreementToUseOfCookies) { // not required
		return nil
	}

	if err := validate.FormatOf("DateOfAgreementToUseOfCookies", "body", "date-time", m.DateOfAgreementToUseOfCookies.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateEmailAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.EmailAddress) { // not required
		return nil
	}

	if err := validate.FormatOf("EmailAddress", "body", "email", m.EmailAddress.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("ID", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateOrganizationID(formats strfmt.Registry) error {

	if swag.IsZero(m.OrganizationID) { // not required
		return nil
	}

	if err := validate.FormatOf("OrganizationID", "body", "uuid", m.OrganizationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateRegistrationDateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.RegistrationDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("RegistrationDateTime", "body", "date-time", m.RegistrationDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var userTypeUserStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENABLED","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userTypeUserStatusPropEnum = append(userTypeUserStatusPropEnum, v)
	}
}

const (

	// UserUserStatusENABLED captures enum value "ENABLED"
	UserUserStatusENABLED string = "ENABLED"

	// UserUserStatusDISABLED captures enum value "DISABLED"
	UserUserStatusDISABLED string = "DISABLED"
)

// prop value enum
func (m *User) validateUserStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userTypeUserStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *User) validateUserStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.UserStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateUserStatusEnum("UserStatus", "body", m.UserStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

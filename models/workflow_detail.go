// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WorkflowDetail workflow detail
//
// swagger:model WorkflowDetail
type WorkflowDetail struct {

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// creation time
	CreationTime string `json:"creationTime,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// input files
	InputFiles []*InputFile `json:"inputFiles"`

	// input parameters
	InputParameters []*InputParameter `json:"inputParameters"`

	// node templates
	NodeTemplates []*NodeTemplate `json:"nodeTemplates"`

	// project ID
	ProjectID string `json:"projectID,omitempty"`

	// project name
	ProjectName string `json:"projectName,omitempty"`

	// project short name
	ProjectShortName string `json:"projectShortName,omitempty"`

	// workflow ID
	WorkflowID string `json:"workflowID,omitempty"`

	// workflow name
	WorkflowName string `json:"workflowName,omitempty"`

	// workflow template ID
	WorkflowTemplateID string `json:"workflowTemplateID,omitempty"`
}

// Validate validates this workflow detail
func (m *WorkflowDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInputFiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeTemplates(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkflowDetail) validateInputFiles(formats strfmt.Registry) error {

	if swag.IsZero(m.InputFiles) { // not required
		return nil
	}

	for i := 0; i < len(m.InputFiles); i++ {
		if swag.IsZero(m.InputFiles[i]) { // not required
			continue
		}

		if m.InputFiles[i] != nil {
			if err := m.InputFiles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputFiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkflowDetail) validateInputParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.InputParameters) { // not required
		return nil
	}

	for i := 0; i < len(m.InputParameters); i++ {
		if swag.IsZero(m.InputParameters[i]) { // not required
			continue
		}

		if m.InputParameters[i] != nil {
			if err := m.InputParameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputParameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkflowDetail) validateNodeTemplates(formats strfmt.Registry) error {

	if swag.IsZero(m.NodeTemplates) { // not required
		return nil
	}

	for i := 0; i < len(m.NodeTemplates); i++ {
		if swag.IsZero(m.NodeTemplates[i]) { // not required
			continue
		}

		if m.NodeTemplates[i] != nil {
			if err := m.NodeTemplates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeTemplates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowDetail) UnmarshalBinary(b []byte) error {
	var res WorkflowDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DatasetMetadata dataset metadata
//
// swagger:model DatasetMetadata
type DatasetMetadata struct {

	// DataCite AlternateIdentifier
	AlternateIdentifier [][]string `json:"AlternateIdentifier"`

	// creation date
	CreationDate string `json:"CreationDate,omitempty"`

	// custom metadata
	CustomMetadata interface{} `json:"CustomMetadata,omitempty"`

	// custom metadata schema
	CustomMetadataSchema []interface{} `json:"CustomMetadataSchema"`

	// description
	Description []string `json:"Description"`

	// contributor
	Contributor []string `json:"contributor"`

	// creator
	Creator []string `json:"creator"`

	// format
	Format string `json:"format,omitempty"`

	// Datacite identifier (doi), unused for now
	Identifier string `json:"identifier,omitempty"`

	// owner
	Owner []string `json:"owner"`

	// publication year
	PublicationYear string `json:"publicationYear,omitempty"`

	// publisher
	Publisher []string `json:"publisher"`

	// related identifier
	RelatedIdentifier []string `json:"relatedIdentifier"`

	// related software
	RelatedSoftware []string `json:"relatedSoftware"`

	// resource type
	ResourceType string `json:"resourceType,omitempty"`

	// resource type general
	// Enum: [Audiovisual Collection DataPaper Dataset Event Image InteractiveResource Model PhysicalObject Service Software Sound Text Workflow Other]
	ResourceTypeGeneral string `json:"resourceTypeGeneral,omitempty"`

	// rights
	Rights []string `json:"rights"`

	// rights identifier
	RightsIdentifier []string `json:"rightsIdentifier"`

	// rights URI
	RightsURI []string `json:"rightsURI"`

	// scope
	Scope string `json:"scope,omitempty"`

	// title
	Title string `json:"title,omitempty"`
}

// Validate validates this dataset metadata
func (m *DatasetMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlternateIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceTypeGeneral(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatasetMetadata) validateAlternateIdentifier(formats strfmt.Registry) error {

	if swag.IsZero(m.AlternateIdentifier) { // not required
		return nil
	}

	for i := 0; i < len(m.AlternateIdentifier); i++ {

		iiAlternateIdentifierSize := int64(len(m.AlternateIdentifier[i]))

		if err := validate.MinItems("AlternateIdentifier"+"."+strconv.Itoa(i), "body", iiAlternateIdentifierSize, 2); err != nil {
			return err
		}

		if err := validate.MaxItems("AlternateIdentifier"+"."+strconv.Itoa(i), "body", iiAlternateIdentifierSize, 2); err != nil {
			return err
		}

	}

	return nil
}

var datasetMetadataTypeResourceTypeGeneralPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Audiovisual","Collection","DataPaper","Dataset","Event","Image","InteractiveResource","Model","PhysicalObject","Service","Software","Sound","Text","Workflow","Other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		datasetMetadataTypeResourceTypeGeneralPropEnum = append(datasetMetadataTypeResourceTypeGeneralPropEnum, v)
	}
}

const (

	// DatasetMetadataResourceTypeGeneralAudiovisual captures enum value "Audiovisual"
	DatasetMetadataResourceTypeGeneralAudiovisual string = "Audiovisual"

	// DatasetMetadataResourceTypeGeneralCollection captures enum value "Collection"
	DatasetMetadataResourceTypeGeneralCollection string = "Collection"

	// DatasetMetadataResourceTypeGeneralDataPaper captures enum value "DataPaper"
	DatasetMetadataResourceTypeGeneralDataPaper string = "DataPaper"

	// DatasetMetadataResourceTypeGeneralDataset captures enum value "Dataset"
	DatasetMetadataResourceTypeGeneralDataset string = "Dataset"

	// DatasetMetadataResourceTypeGeneralEvent captures enum value "Event"
	DatasetMetadataResourceTypeGeneralEvent string = "Event"

	// DatasetMetadataResourceTypeGeneralImage captures enum value "Image"
	DatasetMetadataResourceTypeGeneralImage string = "Image"

	// DatasetMetadataResourceTypeGeneralInteractiveResource captures enum value "InteractiveResource"
	DatasetMetadataResourceTypeGeneralInteractiveResource string = "InteractiveResource"

	// DatasetMetadataResourceTypeGeneralModel captures enum value "Model"
	DatasetMetadataResourceTypeGeneralModel string = "Model"

	// DatasetMetadataResourceTypeGeneralPhysicalObject captures enum value "PhysicalObject"
	DatasetMetadataResourceTypeGeneralPhysicalObject string = "PhysicalObject"

	// DatasetMetadataResourceTypeGeneralService captures enum value "Service"
	DatasetMetadataResourceTypeGeneralService string = "Service"

	// DatasetMetadataResourceTypeGeneralSoftware captures enum value "Software"
	DatasetMetadataResourceTypeGeneralSoftware string = "Software"

	// DatasetMetadataResourceTypeGeneralSound captures enum value "Sound"
	DatasetMetadataResourceTypeGeneralSound string = "Sound"

	// DatasetMetadataResourceTypeGeneralText captures enum value "Text"
	DatasetMetadataResourceTypeGeneralText string = "Text"

	// DatasetMetadataResourceTypeGeneralWorkflow captures enum value "Workflow"
	DatasetMetadataResourceTypeGeneralWorkflow string = "Workflow"

	// DatasetMetadataResourceTypeGeneralOther captures enum value "Other"
	DatasetMetadataResourceTypeGeneralOther string = "Other"
)

// prop value enum
func (m *DatasetMetadata) validateResourceTypeGeneralEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, datasetMetadataTypeResourceTypeGeneralPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DatasetMetadata) validateResourceTypeGeneral(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceTypeGeneral) { // not required
		return nil
	}

	// value enum
	if err := m.validateResourceTypeGeneralEnum("resourceTypeGeneral", "body", m.ResourceTypeGeneral); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DatasetMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatasetMetadata) UnmarshalBinary(b []byte) error {
	var res DatasetMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

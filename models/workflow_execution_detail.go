// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkflowExecutionDetail workflow execution detail
//
// swagger:model WorkflowExecutionDetail
type WorkflowExecutionDetail struct {

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// creation time
	CreationTime string `json:"creationTime,omitempty"`

	// input parameters
	InputParameters []*InputParameter `json:"inputParameters"`

	// node templates
	NodeTemplates []*NodeTemplate `json:"nodeTemplates"`

	// output properties
	OutputProperties []*OutputProperty `json:"outputProperties"`

	// uploaded input files
	UploadedInputFiles []*InputFile `json:"uploadedInputFiles"`

	// workflowExecution ID
	// Required: true
	WorkflowExecutionID *string `json:"workflowExecutionID"`

	// workflowExecution ID
	WorkflowExecutionName string `json:"workflowExecutionName,omitempty"`

	// Name of workflow
	WorkflowExecutionStage string `json:"workflowExecutionStage,omitempty"`

	// Status of workflow
	WorkflowExecutionStageStatus string `json:"workflowExecutionStageStatus,omitempty"`

	// Status of workflowExecution, ready, running, finished, failed
	// Required: true
	WorkflowExecutionStatus *string `json:"workflowExecutionStatus"`

	// Name of application
	WorkflowID string `json:"workflowID,omitempty"`
}

// Validate validates this workflow execution detail
func (m *WorkflowExecutionDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInputParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeTemplates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUploadedInputFiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflowExecutionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflowExecutionStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkflowExecutionDetail) validateInputParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.InputParameters) { // not required
		return nil
	}

	for i := 0; i < len(m.InputParameters); i++ {
		if swag.IsZero(m.InputParameters[i]) { // not required
			continue
		}

		if m.InputParameters[i] != nil {
			if err := m.InputParameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputParameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkflowExecutionDetail) validateNodeTemplates(formats strfmt.Registry) error {

	if swag.IsZero(m.NodeTemplates) { // not required
		return nil
	}

	for i := 0; i < len(m.NodeTemplates); i++ {
		if swag.IsZero(m.NodeTemplates[i]) { // not required
			continue
		}

		if m.NodeTemplates[i] != nil {
			if err := m.NodeTemplates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeTemplates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkflowExecutionDetail) validateOutputProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.OutputProperties) { // not required
		return nil
	}

	for i := 0; i < len(m.OutputProperties); i++ {
		if swag.IsZero(m.OutputProperties[i]) { // not required
			continue
		}

		if m.OutputProperties[i] != nil {
			if err := m.OutputProperties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("outputProperties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkflowExecutionDetail) validateUploadedInputFiles(formats strfmt.Registry) error {

	if swag.IsZero(m.UploadedInputFiles) { // not required
		return nil
	}

	for i := 0; i < len(m.UploadedInputFiles); i++ {
		if swag.IsZero(m.UploadedInputFiles[i]) { // not required
			continue
		}

		if m.UploadedInputFiles[i] != nil {
			if err := m.UploadedInputFiles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("uploadedInputFiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkflowExecutionDetail) validateWorkflowExecutionID(formats strfmt.Registry) error {

	if err := validate.Required("workflowExecutionID", "body", m.WorkflowExecutionID); err != nil {
		return err
	}

	return nil
}

func (m *WorkflowExecutionDetail) validateWorkflowExecutionStatus(formats strfmt.Registry) error {

	if err := validate.Required("workflowExecutionStatus", "body", m.WorkflowExecutionStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowExecutionDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowExecutionDetail) UnmarshalBinary(b []byte) error {
	var res WorkflowExecutionDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

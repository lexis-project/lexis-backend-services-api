// Code generated by go-swagger; DO NOT EDIT.

package restapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"

	"github.com/lexis-project/lexis-backend-services-api.git/restapi/operations"
	"github.com/lexis-project/lexis-backend-services-api.git/restapi/operations/approval_system_management"
	"github.com/lexis-project/lexis-backend-services-api.git/restapi/operations/cluster_information"
	"github.com/lexis-project/lexis-backend-services-api.git/restapi/operations/data_set_management"
	"github.com/lexis-project/lexis-backend-services-api.git/restapi/operations/staging"
	"github.com/lexis-project/lexis-backend-services-api.git/restapi/operations/usage_management"
	"github.com/lexis-project/lexis-backend-services-api.git/restapi/operations/user_org_management"
	"github.com/lexis-project/lexis-backend-services-api.git/restapi/operations/workflow_management"
)

type contextKey string

const AuthKey contextKey = "Auth"

//go:generate mockery -name ApprovalSystemManagementAPI -inpkg

/* ApprovalSystemManagementAPI  */
type ApprovalSystemManagementAPI interface {
	/* CreateApprovedResourceRequest Create HPC approved resource request */
	CreateApprovedResourceRequest(ctx context.Context, params approval_system_management.CreateApprovedResourceRequestParams) middleware.Responder

	/* CreateResourceRequest Create HPC resource request */
	CreateResourceRequest(ctx context.Context, params approval_system_management.CreateResourceRequestParams) middleware.Responder

	/* HPCApprovedResourceRequest Get specific approved resources request from approval system */
	HPCApprovedResourceRequest(ctx context.Context, params approval_system_management.HPCApprovedResourceRequestParams) middleware.Responder

	/* HPCResourceRequest Get specific resource request from approval system */
	HPCResourceRequest(ctx context.Context, params approval_system_management.HPCResourceRequestParams) middleware.Responder

	/* ListProjectHPCApprovedResourceRequest List all HPC approved resource requests for particular LEXIS project from approval system */
	ListProjectHPCApprovedResourceRequest(ctx context.Context, params approval_system_management.ListProjectHPCApprovedResourceRequestParams) middleware.Responder

	/* ListProjectHPCResourceRequest List all HPC resource requests for particular LEXIS project from approval system */
	ListProjectHPCResourceRequest(ctx context.Context, params approval_system_management.ListProjectHPCResourceRequestParams) middleware.Responder

	/* ListResources List all HPC resources from approval system */
	ListResources(ctx context.Context, params approval_system_management.ListResourcesParams) middleware.Responder
}

//go:generate mockery -name ClusterInformationAPI -inpkg

/* ClusterInformationAPI  */
type ClusterInformationAPI interface {
	/* GetCommandTemplate Get command template parameters name */
	GetCommandTemplate(ctx context.Context, params cluster_information.GetCommandTemplateParams) middleware.Responder

	/* ListAvailableClusters Get available clusters */
	ListAvailableClusters(ctx context.Context, params cluster_information.ListAvailableClustersParams) middleware.Responder
}

//go:generate mockery -name DataSetManagementAPI -inpkg

/* DataSetManagementAPI  */
type DataSetManagementAPI interface {
	/* AddGridmapEntry Add a DN entry to the DDI B2STAGE GridFTP service */
	AddGridmapEntry(ctx context.Context, params data_set_management.AddGridmapEntryParams) middleware.Responder

	/* Certificate download public key for WP3 APIs */
	Certificate(ctx context.Context, params data_set_management.CertificateParams) middleware.Responder

	/* CheckCompressionEncryptionStatus Check the status of compression with encryption */
	CheckCompressionEncryptionStatus(ctx context.Context, params data_set_management.CheckCompressionEncryptionStatusParams) middleware.Responder

	/* CheckCompressionStatus Check the status of a compression */
	CheckCompressionStatus(ctx context.Context, params data_set_management.CheckCompressionStatusParams) middleware.Responder

	/* CheckDecompressionStatus Check the status of a decompression */
	CheckDecompressionStatus(ctx context.Context, params data_set_management.CheckDecompressionStatusParams) middleware.Responder

	/* CheckDecryptionDecompressionStatus Check the status of decryption with decompression */
	CheckDecryptionDecompressionStatus(ctx context.Context, params data_set_management.CheckDecryptionDecompressionStatusParams) middleware.Responder

	/* CheckDecryptionStatus Check the status of a decryption */
	CheckDecryptionStatus(ctx context.Context, params data_set_management.CheckDecryptionStatusParams) middleware.Responder

	/* CheckEncryptionStatus Check the status of a encryption */
	CheckEncryptionStatus(ctx context.Context, params data_set_management.CheckEncryptionStatusParams) middleware.Responder

	/* CheckPIDStatus This is called when a user requests to check the status of the PID assignment */
	CheckPIDStatus(ctx context.Context, params data_set_management.CheckPIDStatusParams) middleware.Responder

	/* CheckPermission Check if a user has permission to access a DDI location for writing */
	CheckPermission(ctx context.Context, params data_set_management.CheckPermissionParams) middleware.Responder

	/* CheckReplicateStatus This is called when a user requests to check the status of his data replication */
	CheckReplicateStatus(ctx context.Context, params data_set_management.CheckReplicateStatusParams) middleware.Responder

	/* CheckSizeStatus This is called when a user requests to check the status of datasize request */
	CheckSizeStatus(ctx context.Context, params data_set_management.CheckSizeStatusParams) middleware.Responder

	/* Compress Compress a dataset or subdataset (by enqueuing the request for latter processing) */
	Compress(ctx context.Context, params data_set_management.CompressParams) middleware.Responder

	/* CompressEncrypt Compress and encrypt a dataset or subdataset (by enqueuing the request for latter processing) */
	CompressEncrypt(ctx context.Context, params data_set_management.CompressEncryptParams) middleware.Responder

	/* CreateSSHFSExport Export a directory of the DDI for use via SSHFS */
	CreateSSHFSExport(ctx context.Context, params data_set_management.CreateSSHFSExportParams) middleware.Responder

	/* Decompress Decompress a dataset or subdataset (by enqueuing the request for latter processing) */
	Decompress(ctx context.Context, params data_set_management.DecompressParams) middleware.Responder

	/* Decrypt Decrypt a dataset or subdataset (by enqueuing the request for latter processing) */
	Decrypt(ctx context.Context, params data_set_management.DecryptParams) middleware.Responder

	/* DecryptDecompress Decrypt and decompress a dataset or subdataset (by enqueuing the request for latter processing) */
	DecryptDecompress(ctx context.Context, params data_set_management.DecryptDecompressParams) middleware.Responder

	/* DeleteDataset Delete Dataset */
	DeleteDataset(ctx context.Context, params data_set_management.DeleteDatasetParams) middleware.Responder

	/* DeleteDatasetByMetadata Search for datasets based on metadata, and delete them */
	DeleteDatasetByMetadata(ctx context.Context, params data_set_management.DeleteDatasetByMetadataParams) middleware.Responder

	/* DeleteSSHFSExport Export a directory of the DDI for use via SSHFS */
	DeleteSSHFSExport(ctx context.Context, params data_set_management.DeleteSSHFSExportParams) middleware.Responder

	/* DownloadDataset DownloadDataset */
	DownloadDataset(ctx context.Context, params data_set_management.DownloadDatasetParams) middleware.Responder

	/* Encrypt Encrypt a dataset or subdataset (by enqueuing the request for latter processing) */
	Encrypt(ctx context.Context, params data_set_management.EncryptParams) middleware.Responder

	/* FilePatch Used to resume the upload */
	FilePatch(ctx context.Context, params data_set_management.FilePatchParams) middleware.Responder

	/* FilesDelete Added by the Termination extension. */
	FilesDelete(ctx context.Context, params data_set_management.FilesDeleteParams) middleware.Responder

	/* FilesHead Used to determine the offset at which the upload should be continued. */
	FilesHead(ctx context.Context, params data_set_management.FilesHeadParams) middleware.Responder

	/* Listing List file contents of a dataset. */
	Listing(ctx context.Context, params data_set_management.ListingParams) middleware.Responder

	/* OptionsDatasetUpload Request to gather information about the Server's current configuration */
	OptionsDatasetUpload(ctx context.Context, params data_set_management.OptionsDatasetUploadParams) middleware.Responder

	/* PID This is called when a user requests PID assignment to a dataset. */
	PID(ctx context.Context, params data_set_management.PIDParams) middleware.Responder

	/* PostDatasetStagingDownload Download from staging zone */
	PostDatasetStagingDownload(ctx context.Context, params data_set_management.PostDatasetStagingDownloadParams) middleware.Responder

	/* PostDatasetUpload An empty POST request is used to create a new upload resource. The Upload-Length header indicates the size of the entire upload in bytes. */
	PostDatasetUpload(ctx context.Context, params data_set_management.PostDatasetUploadParams) middleware.Responder

	/* QueryDatasets Search for datasets based on metadata */
	QueryDatasets(ctx context.Context, params data_set_management.QueryDatasetsParams) middleware.Responder

	/* RemoveGridmapEntry Remove a DN entry to the DDI B2STAGE GridFTP service */
	RemoveGridmapEntry(ctx context.Context, params data_set_management.RemoveGridmapEntryParams) middleware.Responder

	/* Replicate This is called when a user requests data to be replicated between different systems. The request will be added to the jobs queue. */
	Replicate(ctx context.Context, params data_set_management.ReplicateParams) middleware.Responder

	/* Size This is called when a user requests size of a dataset. */
	Size(ctx context.Context, params data_set_management.SizeParams) middleware.Responder

	/* CreateDataset Create a dataset */
	CreateDataset(ctx context.Context, params data_set_management.CreateDatasetParams) middleware.Responder
}

//go:generate mockery -name StagingAPI -inpkg

/* StagingAPI  */
type StagingAPI interface {
	/* CheckCloudNFSExportAddStatus Check the status of a nfs export add request for the cloud */
	CheckCloudNFSExportAddStatus(ctx context.Context, params staging.CheckCloudNFSExportAddStatusParams) middleware.Responder

	/* CheckCloudNFSExportRemoveStatus Check the status of a nfs export remove request for the cloud */
	CheckCloudNFSExportRemoveStatus(ctx context.Context, params staging.CheckCloudNFSExportRemoveStatusParams) middleware.Responder

	/* CheckCompressToZipStatus Check the status of a transfer */
	CheckCompressToZipStatus(ctx context.Context, params staging.CheckCompressToZipStatusParams) middleware.Responder

	/* CheckDeletionStatus Check the status of a delete request */
	CheckDeletionStatus(ctx context.Context, params staging.CheckDeletionStatusParams) middleware.Responder

	/* CheckDuplicationStatus Check the status of duplication */
	CheckDuplicationStatus(ctx context.Context, params staging.CheckDuplicationStatusParams) middleware.Responder

	/* CheckStageStatus Check the status of a transfer */
	CheckStageStatus(ctx context.Context, params staging.CheckStageStatusParams) middleware.Responder

	/* CloudNFSExportAdd Request that an nfs export be created for an LRZ cloud instance */
	CloudNFSExportAdd(ctx context.Context, params staging.CloudNFSExportAddParams) middleware.Responder

	/* CloudNFSExportRemove Request that an nfs export be removed for an LRZ cloud instance */
	CloudNFSExportRemove(ctx context.Context, params staging.CloudNFSExportRemoveParams) middleware.Responder

	/* CompressToZip Creates a multipart zip file from a staging api source_system/source_path combination */
	CompressToZip(ctx context.Context, params staging.CompressToZipParams) middleware.Responder

	/* Delete This is called when a user request to delete data. This is only allowed on the staging systems. */
	Delete(ctx context.Context, params staging.DeleteParams) middleware.Responder

	/* Duplicate Duplicate a dataset or subdataset (by enqueuing the request for latter processing) */
	Duplicate(ctx context.Context, params staging.DuplicateParams) middleware.Responder

	/* Stage Stage a dataset or subdataset (by enqueuing the request for latter processing) */
	Stage(ctx context.Context, params staging.StageParams) middleware.Responder

	/* StagingInfo Lists possible target / source systems */
	StagingInfo(ctx context.Context, params staging.StagingInfoParams) middleware.Responder
}

//go:generate mockery -name UsageManagementAPI -inpkg

/* UsageManagementAPI  */
type UsageManagementAPI interface {
	/* AddConsumption Adds a consumption to the system */
	AddConsumption(ctx context.Context, params usage_management.AddConsumptionParams) middleware.Responder

	/* DecreaseCredit Insert a new reseller in the system. */
	DecreaseCredit(ctx context.Context, params usage_management.DecreaseCreditParams) middleware.Responder

	/* GetCredit Credit status of the account with the provided id */
	GetCredit(ctx context.Context, params usage_management.GetCreditParams) middleware.Responder

	/* GetHistory Credit history of the customer with id */
	GetHistory(ctx context.Context, params usage_management.GetHistoryParams) middleware.Responder

	/* GetUsage Get account usage for specific project */
	GetUsage(ctx context.Context, params usage_management.GetUsageParams) middleware.Responder

	/* IncreaseCredit Insert a new reseller in the system. */
	IncreaseCredit(ctx context.Context, params usage_management.IncreaseCreditParams) middleware.Responder
}

//go:generate mockery -name UserOrgManagementAPI -inpkg

/* UserOrgManagementAPI  */
type UserOrgManagementAPI interface {
	/* AddRole add a role to the specified user */
	AddRole(ctx context.Context, params user_org_management.AddRoleParams) middleware.Responder

	/* AddUserToOrganization Adds user to organization */
	AddUserToOrganization(ctx context.Context, params user_org_management.AddUserToOrganizationParams) middleware.Responder

	/* AddUserToProject Add user to project */
	AddUserToProject(ctx context.Context, params user_org_management.AddUserToProjectParams) middleware.Responder

	/* ClearRole clears the actual role of the user and assignes a end_user one */
	ClearRole(ctx context.Context, params user_org_management.ClearRoleParams) middleware.Responder

	/* CreateHPCResource create HPCResource */
	CreateHPCResource(ctx context.Context, params user_org_management.CreateHPCResourceParams) middleware.Responder

	/* CreateOrganization create Organization */
	CreateOrganization(ctx context.Context, params user_org_management.CreateOrganizationParams) middleware.Responder

	/* CreateProject create Project */
	CreateProject(ctx context.Context, params user_org_management.CreateProjectParams) middleware.Responder

	/* CreateUser Create a user */
	CreateUser(ctx context.Context, params user_org_management.CreateUserParams) middleware.Responder

	/* DeleteHPCResource Delete specific HPCResource */
	DeleteHPCResource(ctx context.Context, params user_org_management.DeleteHPCResourceParams) middleware.Responder

	/* DeleteOrganization Delete specific organization */
	DeleteOrganization(ctx context.Context, params user_org_management.DeleteOrganizationParams) middleware.Responder

	/* DeleteProject Delete specific project */
	DeleteProject(ctx context.Context, params user_org_management.DeleteProjectParams) middleware.Responder

	/* DeleteUser Delete specific user */
	DeleteUser(ctx context.Context, params user_org_management.DeleteUserParams) middleware.Responder

	/* DeleteUserFromOrganization Delete user from organization */
	DeleteUserFromOrganization(ctx context.Context, params user_org_management.DeleteUserFromOrganizationParams) middleware.Responder

	/* DeleteUserFromProject Delete user from project */
	DeleteUserFromProject(ctx context.Context, params user_org_management.DeleteUserFromProjectParams) middleware.Responder

	/* GetHPCResource Get specific HPCResource */
	GetHPCResource(ctx context.Context, params user_org_management.GetHPCResourceParams) middleware.Responder

	/* GetOrganization Get specific organization */
	GetOrganization(ctx context.Context, params user_org_management.GetOrganizationParams) middleware.Responder

	/* GetProject Get specific project */
	GetProject(ctx context.Context, params user_org_management.GetProjectParams) middleware.Responder

	/* GetUser Get specific user */
	GetUser(ctx context.Context, params user_org_management.GetUserParams) middleware.Responder

	/* ListHPCResources list HPCResource */
	ListHPCResources(ctx context.Context, params user_org_management.ListHPCResourcesParams) middleware.Responder

	/* ListOrganizations list organizations */
	ListOrganizations(ctx context.Context, params user_org_management.ListOrganizationsParams) middleware.Responder

	/* ListProjects list projects */
	ListProjects(ctx context.Context, params user_org_management.ListProjectsParams) middleware.Responder

	/* ListUsers List all users */
	ListUsers(ctx context.Context, params user_org_management.ListUsersParams) middleware.Responder

	/* UpdateHPCResource Update specific HPCResource */
	UpdateHPCResource(ctx context.Context, params user_org_management.UpdateHPCResourceParams) middleware.Responder

	/* UpdateOrganization Update specific organization */
	UpdateOrganization(ctx context.Context, params user_org_management.UpdateOrganizationParams) middleware.Responder

	/* UpdateProject Update specific project */
	UpdateProject(ctx context.Context, params user_org_management.UpdateProjectParams) middleware.Responder

	/* UpdateUser Update specific user */
	UpdateUser(ctx context.Context, params user_org_management.UpdateUserParams) middleware.Responder
}

//go:generate mockery -name WorkflowManagementAPI -inpkg

/* WorkflowManagementAPI  */
type WorkflowManagementAPI interface {
	/* DeleteWorkflow Delete LEXIS Workflow on the system */
	DeleteWorkflow(ctx context.Context, params workflow_management.DeleteWorkflowParams) middleware.Responder

	/* CancelWorkflowExecution Cancel a LEXIS Workflow Execution. */
	CancelWorkflowExecution(ctx context.Context, params workflow_management.CancelWorkflowExecutionParams) middleware.Responder

	/* CreateWorkflow Create a new LEXIS Workflow on the system */
	CreateWorkflow(ctx context.Context, params workflow_management.CreateWorkflowParams) middleware.Responder

	/* CreateWorkflowExecution TODO: Needs implemented with TOSCA 1.3 Capabilitise. Create a new LEXIS Workflow Execution by providing remaining inputs */
	CreateWorkflowExecution(ctx context.Context, params workflow_management.CreateWorkflowExecutionParams) middleware.Responder

	/* CreateWorkflowExecutions Create a batch of LEXIS Workflow Executions from a LEXIS Workflow */
	CreateWorkflowExecutions(ctx context.Context, params workflow_management.CreateWorkflowExecutionsParams) middleware.Responder

	/* DeleteWorkflowExecution Delete a LEXIS Workflow Execution. */
	DeleteWorkflowExecution(ctx context.Context, params workflow_management.DeleteWorkflowExecutionParams) middleware.Responder

	/* GetWorkflow Return detailed info on LEXIS Workflow for given Workflow ID */
	GetWorkflow(ctx context.Context, params workflow_management.GetWorkflowParams) middleware.Responder

	/* GetWorkflowExecutionDetail Returns LEXIS Workflow Execution detail. */
	GetWorkflowExecutionDetail(ctx context.Context, params workflow_management.GetWorkflowExecutionDetailParams) middleware.Responder

	/* GetWorkflowExecutionLogs Returns detailed logs of LEXIS Workflow Execution */
	GetWorkflowExecutionLogs(ctx context.Context, params workflow_management.GetWorkflowExecutionLogsParams) middleware.Responder

	/* GetWorkflowExecutionStepStatus Returns detailed status of Lexis Workflow Execution and its tasks. */
	GetWorkflowExecutionStepStatus(ctx context.Context, params workflow_management.GetWorkflowExecutionStepStatusParams) middleware.Responder

	/* GetWorkflowTemplate Return detailed info on Workflow Template give workflowTemplateID */
	GetWorkflowTemplate(ctx context.Context, params workflow_management.GetWorkflowTemplateParams) middleware.Responder

	/* GetWorkflowTemplates Return list of available Workflow Templates */
	GetWorkflowTemplates(ctx context.Context, params workflow_management.GetWorkflowTemplatesParams) middleware.Responder

	/* GetWorkflows Return list of available LEXIS Workflows */
	GetWorkflows(ctx context.Context, params workflow_management.GetWorkflowsParams) middleware.Responder

	/* ListWorkflowExecutions List the current available LEXIS Workflow Executions. */
	ListWorkflowExecutions(ctx context.Context, params workflow_management.ListWorkflowExecutionsParams) middleware.Responder

	/* UploadWorkflowTemplate Create a new LEXIS Workflow Template on the system */
	UploadWorkflowTemplate(ctx context.Context, params workflow_management.UploadWorkflowTemplateParams) middleware.Responder
}

// Config is configuration for Handler
type Config struct {
	ApprovalSystemManagementAPI
	ClusterInformationAPI
	DataSetManagementAPI
	StagingAPI
	UsageManagementAPI
	UserOrgManagementAPI
	WorkflowManagementAPI
	Logger func(string, ...interface{})
	// InnerMiddleware is for the handler executors. These do not apply to the swagger.json document.
	// The middleware executes after routing but before authentication, binding and validation
	InnerMiddleware func(http.Handler) http.Handler

	// Authorizer is used to authorize a request after the Auth function was called using the "Auth*" functions
	// and the principal was stored in the context in the "AuthKey" context value.
	Authorizer func(*http.Request) error

	// AuthAPIKeyHeader Applies when the "X-API-KEY" header is set
	AuthAPIKeyHeader func(token string) (interface{}, error)

	// AuthAPIKeyParam Applies when the "api_key" query is set
	AuthAPIKeyParam func(token string) (interface{}, error)

	// AuthKeycloak For OAuth2 authentication
	AuthKeycloak func(token string, scopes []string) (interface{}, error)
	// Authenticator to use for all APIKey authentication
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// Authenticator to use for all Bearer authentication
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// Authenticator to use for all Basic authentication
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator
}

// Handler returns an http.Handler given the handler configuration
// It mounts all the business logic implementers in the right routing.
func Handler(c Config) (http.Handler, error) {
	h, _, err := HandlerAPI(c)
	return h, err
}

// HandlerAPI returns an http.Handler given the handler configuration
// and the corresponding *LEXISPortalAPI instance.
// It mounts all the business logic implementers in the right routing.
func HandlerAPI(c Config) (http.Handler, *operations.LEXISPortalAPIAPI, error) {
	spec, err := loads.Analyzed(swaggerCopy(SwaggerJSON), "")
	if err != nil {
		return nil, nil, fmt.Errorf("analyze swagger: %v", err)
	}
	api := operations.NewLEXISPortalAPIAPI(spec)
	api.ServeError = errors.ServeError
	api.Logger = c.Logger

	if c.APIKeyAuthenticator != nil {
		api.APIKeyAuthenticator = c.APIKeyAuthenticator
	}
	if c.BasicAuthenticator != nil {
		api.BasicAuthenticator = c.BasicAuthenticator
	}
	if c.BearerAuthenticator != nil {
		api.BearerAuthenticator = c.BearerAuthenticator
	}

	api.BinConsumer = runtime.ByteStreamConsumer()
	api.JSONConsumer = runtime.JSONConsumer()
	api.MultipartformConsumer = runtime.DiscardConsumer
	api.BinProducer = runtime.ByteStreamProducer()
	api.JSONProducer = runtime.JSONProducer()
	api.APIKeyHeaderAuth = func(token string) (interface{}, error) {
		if c.AuthAPIKeyHeader == nil {
			return token, nil
		}
		return c.AuthAPIKeyHeader(token)
	}

	api.APIKeyParamAuth = func(token string) (interface{}, error) {
		if c.AuthAPIKeyParam == nil {
			return token, nil
		}
		return c.AuthAPIKeyParam(token)
	}

	api.KeycloakAuth = func(token string, scopes []string) (interface{}, error) {
		if c.AuthKeycloak == nil {
			return token, nil
		}
		return c.AuthKeycloak(token, scopes)
	}
	api.APIAuthorizer = authorizer(c.Authorizer)
	api.DataSetManagementAddGridmapEntryHandler = data_set_management.AddGridmapEntryHandlerFunc(func(params data_set_management.AddGridmapEntryParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.AddGridmapEntry(ctx, params)
	})
	api.DataSetManagementCertificateHandler = data_set_management.CertificateHandlerFunc(func(params data_set_management.CertificateParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.Certificate(ctx, params)
	})
	api.StagingCheckCloudNFSExportAddStatusHandler = staging.CheckCloudNFSExportAddStatusHandlerFunc(func(params staging.CheckCloudNFSExportAddStatusParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.StagingAPI.CheckCloudNFSExportAddStatus(ctx, params)
	})
	api.StagingCheckCloudNFSExportRemoveStatusHandler = staging.CheckCloudNFSExportRemoveStatusHandlerFunc(func(params staging.CheckCloudNFSExportRemoveStatusParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.StagingAPI.CheckCloudNFSExportRemoveStatus(ctx, params)
	})
	api.StagingCheckCompressToZipStatusHandler = staging.CheckCompressToZipStatusHandlerFunc(func(params staging.CheckCompressToZipStatusParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.StagingAPI.CheckCompressToZipStatus(ctx, params)
	})
	api.DataSetManagementCheckCompressionEncryptionStatusHandler = data_set_management.CheckCompressionEncryptionStatusHandlerFunc(func(params data_set_management.CheckCompressionEncryptionStatusParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.DataSetManagementAPI.CheckCompressionEncryptionStatus(ctx, params)
	})
	api.DataSetManagementCheckCompressionStatusHandler = data_set_management.CheckCompressionStatusHandlerFunc(func(params data_set_management.CheckCompressionStatusParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.DataSetManagementAPI.CheckCompressionStatus(ctx, params)
	})
	api.DataSetManagementCheckDecompressionStatusHandler = data_set_management.CheckDecompressionStatusHandlerFunc(func(params data_set_management.CheckDecompressionStatusParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.DataSetManagementAPI.CheckDecompressionStatus(ctx, params)
	})
	api.DataSetManagementCheckDecryptionDecompressionStatusHandler = data_set_management.CheckDecryptionDecompressionStatusHandlerFunc(func(params data_set_management.CheckDecryptionDecompressionStatusParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.DataSetManagementAPI.CheckDecryptionDecompressionStatus(ctx, params)
	})
	api.DataSetManagementCheckDecryptionStatusHandler = data_set_management.CheckDecryptionStatusHandlerFunc(func(params data_set_management.CheckDecryptionStatusParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.DataSetManagementAPI.CheckDecryptionStatus(ctx, params)
	})
	api.StagingCheckDeletionStatusHandler = staging.CheckDeletionStatusHandlerFunc(func(params staging.CheckDeletionStatusParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.StagingAPI.CheckDeletionStatus(ctx, params)
	})
	api.StagingCheckDuplicationStatusHandler = staging.CheckDuplicationStatusHandlerFunc(func(params staging.CheckDuplicationStatusParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.StagingAPI.CheckDuplicationStatus(ctx, params)
	})
	api.DataSetManagementCheckEncryptionStatusHandler = data_set_management.CheckEncryptionStatusHandlerFunc(func(params data_set_management.CheckEncryptionStatusParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.DataSetManagementAPI.CheckEncryptionStatus(ctx, params)
	})
	api.DataSetManagementCheckPIDStatusHandler = data_set_management.CheckPIDStatusHandlerFunc(func(params data_set_management.CheckPIDStatusParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.CheckPIDStatus(ctx, params)
	})
	api.DataSetManagementCheckPermissionHandler = data_set_management.CheckPermissionHandlerFunc(func(params data_set_management.CheckPermissionParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.CheckPermission(ctx, params)
	})
	api.DataSetManagementCheckReplicateStatusHandler = data_set_management.CheckReplicateStatusHandlerFunc(func(params data_set_management.CheckReplicateStatusParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.CheckReplicateStatus(ctx, params)
	})
	api.DataSetManagementCheckSizeStatusHandler = data_set_management.CheckSizeStatusHandlerFunc(func(params data_set_management.CheckSizeStatusParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.CheckSizeStatus(ctx, params)
	})
	api.StagingCheckStageStatusHandler = staging.CheckStageStatusHandlerFunc(func(params staging.CheckStageStatusParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.StagingAPI.CheckStageStatus(ctx, params)
	})
	api.StagingCloudNFSExportAddHandler = staging.CloudNFSExportAddHandlerFunc(func(params staging.CloudNFSExportAddParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.StagingAPI.CloudNFSExportAdd(ctx, params)
	})
	api.StagingCloudNFSExportRemoveHandler = staging.CloudNFSExportRemoveHandlerFunc(func(params staging.CloudNFSExportRemoveParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.StagingAPI.CloudNFSExportRemove(ctx, params)
	})
	api.DataSetManagementCompressHandler = data_set_management.CompressHandlerFunc(func(params data_set_management.CompressParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.Compress(ctx, params)
	})
	api.DataSetManagementCompressEncryptHandler = data_set_management.CompressEncryptHandlerFunc(func(params data_set_management.CompressEncryptParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.CompressEncrypt(ctx, params)
	})
	api.StagingCompressToZipHandler = staging.CompressToZipHandlerFunc(func(params staging.CompressToZipParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.StagingAPI.CompressToZip(ctx, params)
	})
	api.ApprovalSystemManagementCreateApprovedResourceRequestHandler = approval_system_management.CreateApprovedResourceRequestHandlerFunc(func(params approval_system_management.CreateApprovedResourceRequestParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.ApprovalSystemManagementAPI.CreateApprovedResourceRequest(ctx, params)
	})
	api.ApprovalSystemManagementCreateResourceRequestHandler = approval_system_management.CreateResourceRequestHandlerFunc(func(params approval_system_management.CreateResourceRequestParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.ApprovalSystemManagementAPI.CreateResourceRequest(ctx, params)
	})
	api.DataSetManagementCreateSSHFSExportHandler = data_set_management.CreateSSHFSExportHandlerFunc(func(params data_set_management.CreateSSHFSExportParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.CreateSSHFSExport(ctx, params)
	})
	api.DataSetManagementDecompressHandler = data_set_management.DecompressHandlerFunc(func(params data_set_management.DecompressParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.Decompress(ctx, params)
	})
	api.DataSetManagementDecryptHandler = data_set_management.DecryptHandlerFunc(func(params data_set_management.DecryptParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.Decrypt(ctx, params)
	})
	api.DataSetManagementDecryptDecompressHandler = data_set_management.DecryptDecompressHandlerFunc(func(params data_set_management.DecryptDecompressParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.DecryptDecompress(ctx, params)
	})
	api.StagingDeleteHandler = staging.DeleteHandlerFunc(func(params staging.DeleteParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.StagingAPI.Delete(ctx, params)
	})
	api.DataSetManagementDeleteDatasetHandler = data_set_management.DeleteDatasetHandlerFunc(func(params data_set_management.DeleteDatasetParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.DeleteDataset(ctx, params)
	})
	api.DataSetManagementDeleteDatasetByMetadataHandler = data_set_management.DeleteDatasetByMetadataHandlerFunc(func(params data_set_management.DeleteDatasetByMetadataParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.DeleteDatasetByMetadata(ctx, params)
	})
	api.DataSetManagementDeleteSSHFSExportHandler = data_set_management.DeleteSSHFSExportHandlerFunc(func(params data_set_management.DeleteSSHFSExportParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.DeleteSSHFSExport(ctx, params)
	})
	api.WorkflowManagementDeleteWorkflowHandler = workflow_management.DeleteWorkflowHandlerFunc(func(params workflow_management.DeleteWorkflowParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.WorkflowManagementAPI.DeleteWorkflow(ctx, params)
	})
	api.DataSetManagementDownloadDatasetHandler = data_set_management.DownloadDatasetHandlerFunc(func(params data_set_management.DownloadDatasetParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.DownloadDataset(ctx, params)
	})
	api.StagingDuplicateHandler = staging.DuplicateHandlerFunc(func(params staging.DuplicateParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.StagingAPI.Duplicate(ctx, params)
	})
	api.DataSetManagementEncryptHandler = data_set_management.EncryptHandlerFunc(func(params data_set_management.EncryptParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.Encrypt(ctx, params)
	})
	api.DataSetManagementFilePatchHandler = data_set_management.FilePatchHandlerFunc(func(params data_set_management.FilePatchParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.FilePatch(ctx, params)
	})
	api.DataSetManagementFilesDeleteHandler = data_set_management.FilesDeleteHandlerFunc(func(params data_set_management.FilesDeleteParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.FilesDelete(ctx, params)
	})
	api.DataSetManagementFilesHeadHandler = data_set_management.FilesHeadHandlerFunc(func(params data_set_management.FilesHeadParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.FilesHead(ctx, params)
	})
	api.ApprovalSystemManagementHPCApprovedResourceRequestHandler = approval_system_management.HPCApprovedResourceRequestHandlerFunc(func(params approval_system_management.HPCApprovedResourceRequestParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.ApprovalSystemManagementAPI.HPCApprovedResourceRequest(ctx, params)
	})
	api.ApprovalSystemManagementHPCResourceRequestHandler = approval_system_management.HPCResourceRequestHandlerFunc(func(params approval_system_management.HPCResourceRequestParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.ApprovalSystemManagementAPI.HPCResourceRequest(ctx, params)
	})
	api.DataSetManagementListingHandler = data_set_management.ListingHandlerFunc(func(params data_set_management.ListingParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.Listing(ctx, params)
	})
	api.DataSetManagementOptionsDatasetUploadHandler = data_set_management.OptionsDatasetUploadHandlerFunc(func(params data_set_management.OptionsDatasetUploadParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.OptionsDatasetUpload(ctx, params)
	})
	api.DataSetManagementPIDHandler = data_set_management.PIDHandlerFunc(func(params data_set_management.PIDParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.PID(ctx, params)
	})
	api.DataSetManagementPostDatasetStagingDownloadHandler = data_set_management.PostDatasetStagingDownloadHandlerFunc(func(params data_set_management.PostDatasetStagingDownloadParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.PostDatasetStagingDownload(ctx, params)
	})
	api.DataSetManagementPostDatasetUploadHandler = data_set_management.PostDatasetUploadHandlerFunc(func(params data_set_management.PostDatasetUploadParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.PostDatasetUpload(ctx, params)
	})
	api.DataSetManagementQueryDatasetsHandler = data_set_management.QueryDatasetsHandlerFunc(func(params data_set_management.QueryDatasetsParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.QueryDatasets(ctx, params)
	})
	api.DataSetManagementRemoveGridmapEntryHandler = data_set_management.RemoveGridmapEntryHandlerFunc(func(params data_set_management.RemoveGridmapEntryParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.RemoveGridmapEntry(ctx, params)
	})
	api.DataSetManagementReplicateHandler = data_set_management.ReplicateHandlerFunc(func(params data_set_management.ReplicateParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.Replicate(ctx, params)
	})
	api.DataSetManagementSizeHandler = data_set_management.SizeHandlerFunc(func(params data_set_management.SizeParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.Size(ctx, params)
	})
	api.StagingStageHandler = staging.StageHandlerFunc(func(params staging.StageParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.StagingAPI.Stage(ctx, params)
	})
	api.StagingStagingInfoHandler = staging.StagingInfoHandlerFunc(func(params staging.StagingInfoParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.StagingAPI.StagingInfo(ctx, params)
	})
	api.UsageManagementAddConsumptionHandler = usage_management.AddConsumptionHandlerFunc(func(params usage_management.AddConsumptionParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.UsageManagementAPI.AddConsumption(ctx, params)
	})
	api.UserOrgManagementAddRoleHandler = user_org_management.AddRoleHandlerFunc(func(params user_org_management.AddRoleParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.UserOrgManagementAPI.AddRole(ctx, params)
	})
	api.UserOrgManagementAddUserToOrganizationHandler = user_org_management.AddUserToOrganizationHandlerFunc(func(params user_org_management.AddUserToOrganizationParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.UserOrgManagementAPI.AddUserToOrganization(ctx, params)
	})
	api.UserOrgManagementAddUserToProjectHandler = user_org_management.AddUserToProjectHandlerFunc(func(params user_org_management.AddUserToProjectParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.UserOrgManagementAPI.AddUserToProject(ctx, params)
	})
	api.WorkflowManagementCancelWorkflowExecutionHandler = workflow_management.CancelWorkflowExecutionHandlerFunc(func(params workflow_management.CancelWorkflowExecutionParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.WorkflowManagementAPI.CancelWorkflowExecution(ctx, params)
	})
	api.UserOrgManagementClearRoleHandler = user_org_management.ClearRoleHandlerFunc(func(params user_org_management.ClearRoleParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.UserOrgManagementAPI.ClearRole(ctx, params)
	})
	api.DataSetManagementCreateDatasetHandler = data_set_management.CreateDatasetHandlerFunc(func(params data_set_management.CreateDatasetParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.CreateDataset(ctx, params)
	})
	api.UserOrgManagementCreateHPCResourceHandler = user_org_management.CreateHPCResourceHandlerFunc(func(params user_org_management.CreateHPCResourceParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.UserOrgManagementAPI.CreateHPCResource(ctx, params)
	})
	api.UserOrgManagementCreateOrganizationHandler = user_org_management.CreateOrganizationHandlerFunc(func(params user_org_management.CreateOrganizationParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.UserOrgManagementAPI.CreateOrganization(ctx, params)
	})
	api.UserOrgManagementCreateProjectHandler = user_org_management.CreateProjectHandlerFunc(func(params user_org_management.CreateProjectParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.UserOrgManagementAPI.CreateProject(ctx, params)
	})
	api.UserOrgManagementCreateUserHandler = user_org_management.CreateUserHandlerFunc(func(params user_org_management.CreateUserParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.UserOrgManagementAPI.CreateUser(ctx, params)
	})
	api.WorkflowManagementCreateWorkflowHandler = workflow_management.CreateWorkflowHandlerFunc(func(params workflow_management.CreateWorkflowParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.WorkflowManagementAPI.CreateWorkflow(ctx, params)
	})
	api.WorkflowManagementCreateWorkflowExecutionHandler = workflow_management.CreateWorkflowExecutionHandlerFunc(func(params workflow_management.CreateWorkflowExecutionParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.WorkflowManagementAPI.CreateWorkflowExecution(ctx, params)
	})
	api.WorkflowManagementCreateWorkflowExecutionsHandler = workflow_management.CreateWorkflowExecutionsHandlerFunc(func(params workflow_management.CreateWorkflowExecutionsParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.WorkflowManagementAPI.CreateWorkflowExecutions(ctx, params)
	})
	api.UsageManagementDecreaseCreditHandler = usage_management.DecreaseCreditHandlerFunc(func(params usage_management.DecreaseCreditParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.UsageManagementAPI.DecreaseCredit(ctx, params)
	})
	api.UserOrgManagementDeleteHPCResourceHandler = user_org_management.DeleteHPCResourceHandlerFunc(func(params user_org_management.DeleteHPCResourceParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.UserOrgManagementAPI.DeleteHPCResource(ctx, params)
	})
	api.UserOrgManagementDeleteOrganizationHandler = user_org_management.DeleteOrganizationHandlerFunc(func(params user_org_management.DeleteOrganizationParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.UserOrgManagementAPI.DeleteOrganization(ctx, params)
	})
	api.UserOrgManagementDeleteProjectHandler = user_org_management.DeleteProjectHandlerFunc(func(params user_org_management.DeleteProjectParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.UserOrgManagementAPI.DeleteProject(ctx, params)
	})
	api.UserOrgManagementDeleteUserHandler = user_org_management.DeleteUserHandlerFunc(func(params user_org_management.DeleteUserParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.UserOrgManagementAPI.DeleteUser(ctx, params)
	})
	api.UserOrgManagementDeleteUserFromOrganizationHandler = user_org_management.DeleteUserFromOrganizationHandlerFunc(func(params user_org_management.DeleteUserFromOrganizationParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.UserOrgManagementAPI.DeleteUserFromOrganization(ctx, params)
	})
	api.UserOrgManagementDeleteUserFromProjectHandler = user_org_management.DeleteUserFromProjectHandlerFunc(func(params user_org_management.DeleteUserFromProjectParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.UserOrgManagementAPI.DeleteUserFromProject(ctx, params)
	})
	api.WorkflowManagementDeleteWorkflowExecutionHandler = workflow_management.DeleteWorkflowExecutionHandlerFunc(func(params workflow_management.DeleteWorkflowExecutionParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.WorkflowManagementAPI.DeleteWorkflowExecution(ctx, params)
	})
	api.ClusterInformationGetCommandTemplateHandler = cluster_information.GetCommandTemplateHandlerFunc(func(params cluster_information.GetCommandTemplateParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.ClusterInformationAPI.GetCommandTemplate(ctx, params)
	})
	api.UsageManagementGetCreditHandler = usage_management.GetCreditHandlerFunc(func(params usage_management.GetCreditParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.UsageManagementAPI.GetCredit(ctx, params)
	})
	api.UserOrgManagementGetHPCResourceHandler = user_org_management.GetHPCResourceHandlerFunc(func(params user_org_management.GetHPCResourceParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.UserOrgManagementAPI.GetHPCResource(ctx, params)
	})
	api.UsageManagementGetHistoryHandler = usage_management.GetHistoryHandlerFunc(func(params usage_management.GetHistoryParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.UsageManagementAPI.GetHistory(ctx, params)
	})
	api.UserOrgManagementGetOrganizationHandler = user_org_management.GetOrganizationHandlerFunc(func(params user_org_management.GetOrganizationParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.UserOrgManagementAPI.GetOrganization(ctx, params)
	})
	api.UserOrgManagementGetProjectHandler = user_org_management.GetProjectHandlerFunc(func(params user_org_management.GetProjectParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.UserOrgManagementAPI.GetProject(ctx, params)
	})
	api.UsageManagementGetUsageHandler = usage_management.GetUsageHandlerFunc(func(params usage_management.GetUsageParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.UsageManagementAPI.GetUsage(ctx, params)
	})
	api.UserOrgManagementGetUserHandler = user_org_management.GetUserHandlerFunc(func(params user_org_management.GetUserParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.UserOrgManagementAPI.GetUser(ctx, params)
	})
	api.WorkflowManagementGetWorkflowHandler = workflow_management.GetWorkflowHandlerFunc(func(params workflow_management.GetWorkflowParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.WorkflowManagementAPI.GetWorkflow(ctx, params)
	})
	api.WorkflowManagementGetWorkflowExecutionDetailHandler = workflow_management.GetWorkflowExecutionDetailHandlerFunc(func(params workflow_management.GetWorkflowExecutionDetailParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.WorkflowManagementAPI.GetWorkflowExecutionDetail(ctx, params)
	})
	api.WorkflowManagementGetWorkflowExecutionLogsHandler = workflow_management.GetWorkflowExecutionLogsHandlerFunc(func(params workflow_management.GetWorkflowExecutionLogsParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.WorkflowManagementAPI.GetWorkflowExecutionLogs(ctx, params)
	})
	api.WorkflowManagementGetWorkflowExecutionStepStatusHandler = workflow_management.GetWorkflowExecutionStepStatusHandlerFunc(func(params workflow_management.GetWorkflowExecutionStepStatusParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.WorkflowManagementAPI.GetWorkflowExecutionStepStatus(ctx, params)
	})
	api.WorkflowManagementGetWorkflowTemplateHandler = workflow_management.GetWorkflowTemplateHandlerFunc(func(params workflow_management.GetWorkflowTemplateParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.WorkflowManagementAPI.GetWorkflowTemplate(ctx, params)
	})
	api.WorkflowManagementGetWorkflowTemplatesHandler = workflow_management.GetWorkflowTemplatesHandlerFunc(func(params workflow_management.GetWorkflowTemplatesParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.WorkflowManagementAPI.GetWorkflowTemplates(ctx, params)
	})
	api.WorkflowManagementGetWorkflowsHandler = workflow_management.GetWorkflowsHandlerFunc(func(params workflow_management.GetWorkflowsParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.WorkflowManagementAPI.GetWorkflows(ctx, params)
	})
	api.UsageManagementIncreaseCreditHandler = usage_management.IncreaseCreditHandlerFunc(func(params usage_management.IncreaseCreditParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.UsageManagementAPI.IncreaseCredit(ctx, params)
	})
	api.ClusterInformationListAvailableClustersHandler = cluster_information.ListAvailableClustersHandlerFunc(func(params cluster_information.ListAvailableClustersParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.ClusterInformationAPI.ListAvailableClusters(ctx, params)
	})
	api.UserOrgManagementListHPCResourcesHandler = user_org_management.ListHPCResourcesHandlerFunc(func(params user_org_management.ListHPCResourcesParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.UserOrgManagementAPI.ListHPCResources(ctx, params)
	})
	api.UserOrgManagementListOrganizationsHandler = user_org_management.ListOrganizationsHandlerFunc(func(params user_org_management.ListOrganizationsParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.UserOrgManagementAPI.ListOrganizations(ctx, params)
	})
	api.ApprovalSystemManagementListProjectHPCApprovedResourceRequestHandler = approval_system_management.ListProjectHPCApprovedResourceRequestHandlerFunc(func(params approval_system_management.ListProjectHPCApprovedResourceRequestParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.ApprovalSystemManagementAPI.ListProjectHPCApprovedResourceRequest(ctx, params)
	})
	api.ApprovalSystemManagementListProjectHPCResourceRequestHandler = approval_system_management.ListProjectHPCResourceRequestHandlerFunc(func(params approval_system_management.ListProjectHPCResourceRequestParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.ApprovalSystemManagementAPI.ListProjectHPCResourceRequest(ctx, params)
	})
	api.UserOrgManagementListProjectsHandler = user_org_management.ListProjectsHandlerFunc(func(params user_org_management.ListProjectsParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.UserOrgManagementAPI.ListProjects(ctx, params)
	})
	api.ApprovalSystemManagementListResourcesHandler = approval_system_management.ListResourcesHandlerFunc(func(params approval_system_management.ListResourcesParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.ApprovalSystemManagementAPI.ListResources(ctx, params)
	})
	api.UserOrgManagementListUsersHandler = user_org_management.ListUsersHandlerFunc(func(params user_org_management.ListUsersParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.UserOrgManagementAPI.ListUsers(ctx, params)
	})
	api.WorkflowManagementListWorkflowExecutionsHandler = workflow_management.ListWorkflowExecutionsHandlerFunc(func(params workflow_management.ListWorkflowExecutionsParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.WorkflowManagementAPI.ListWorkflowExecutions(ctx, params)
	})
	api.UserOrgManagementUpdateHPCResourceHandler = user_org_management.UpdateHPCResourceHandlerFunc(func(params user_org_management.UpdateHPCResourceParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.UserOrgManagementAPI.UpdateHPCResource(ctx, params)
	})
	api.UserOrgManagementUpdateOrganizationHandler = user_org_management.UpdateOrganizationHandlerFunc(func(params user_org_management.UpdateOrganizationParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.UserOrgManagementAPI.UpdateOrganization(ctx, params)
	})
	api.UserOrgManagementUpdateProjectHandler = user_org_management.UpdateProjectHandlerFunc(func(params user_org_management.UpdateProjectParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.UserOrgManagementAPI.UpdateProject(ctx, params)
	})
	api.UserOrgManagementUpdateUserHandler = user_org_management.UpdateUserHandlerFunc(func(params user_org_management.UpdateUserParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.UserOrgManagementAPI.UpdateUser(ctx, params)
	})
	api.WorkflowManagementUploadWorkflowTemplateHandler = workflow_management.UploadWorkflowTemplateHandlerFunc(func(params workflow_management.UploadWorkflowTemplateParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.WorkflowManagementAPI.UploadWorkflowTemplate(ctx, params)
	})
	api.ServerShutdown = func() {}
	return api.Serve(c.InnerMiddleware), api, nil
}

// swaggerCopy copies the swagger json to prevent data races in runtime
func swaggerCopy(orig json.RawMessage) json.RawMessage {
	c := make(json.RawMessage, len(orig))
	copy(c, orig)
	return c
}

// authorizer is a helper function to implement the runtime.Authorizer interface.
type authorizer func(*http.Request) error

func (a authorizer) Authorize(req *http.Request, principal interface{}) error {
	if a == nil {
		return nil
	}
	ctx := storeAuth(req.Context(), principal)
	return a(req.WithContext(ctx))
}

func storeAuth(ctx context.Context, principal interface{}) context.Context {
	return context.WithValue(ctx, AuthKey, principal)
}

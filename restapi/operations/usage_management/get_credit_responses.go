// Code generated by go-swagger; DO NOT EDIT.

package usage_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// GetCreditOKCode is the HTTP code returned for type GetCreditOK
const GetCreditOKCode int = 200

/*GetCreditOK Credit status of the account with the provided id

swagger:response getCreditOK
*/
type GetCreditOK struct {

	/*
	  In: Body
	*/
	Payload *models.CreditStatus `json:"body,omitempty"`
}

// NewGetCreditOK creates GetCreditOK with default headers values
func NewGetCreditOK() *GetCreditOK {

	return &GetCreditOK{}
}

// WithPayload adds the payload to the get credit o k response
func (o *GetCreditOK) WithPayload(payload *models.CreditStatus) *GetCreditOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get credit o k response
func (o *GetCreditOK) SetPayload(payload *models.CreditStatus) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCreditOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCreditUnauthorizedCode is the HTTP code returned for type GetCreditUnauthorized
const GetCreditUnauthorizedCode int = 401

/*GetCreditUnauthorized Unauthorized

swagger:response getCreditUnauthorized
*/
type GetCreditUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetCreditUnauthorized creates GetCreditUnauthorized with default headers values
func NewGetCreditUnauthorized() *GetCreditUnauthorized {

	return &GetCreditUnauthorized{}
}

// WithPayload adds the payload to the get credit unauthorized response
func (o *GetCreditUnauthorized) WithPayload(payload *models.ErrorResponse) *GetCreditUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get credit unauthorized response
func (o *GetCreditUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCreditUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCreditForbiddenCode is the HTTP code returned for type GetCreditForbidden
const GetCreditForbiddenCode int = 403

/*GetCreditForbidden Forbidden

swagger:response getCreditForbidden
*/
type GetCreditForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetCreditForbidden creates GetCreditForbidden with default headers values
func NewGetCreditForbidden() *GetCreditForbidden {

	return &GetCreditForbidden{}
}

// WithPayload adds the payload to the get credit forbidden response
func (o *GetCreditForbidden) WithPayload(payload *models.ErrorResponse) *GetCreditForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get credit forbidden response
func (o *GetCreditForbidden) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCreditForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCreditNotFoundCode is the HTTP code returned for type GetCreditNotFound
const GetCreditNotFoundCode int = 404

/*GetCreditNotFound The account with the provided id doesn't exist

swagger:response getCreditNotFound
*/
type GetCreditNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetCreditNotFound creates GetCreditNotFound with default headers values
func NewGetCreditNotFound() *GetCreditNotFound {

	return &GetCreditNotFound{}
}

// WithPayload adds the payload to the get credit not found response
func (o *GetCreditNotFound) WithPayload(payload *models.ErrorResponse) *GetCreditNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get credit not found response
func (o *GetCreditNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCreditNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCreditInternalServerErrorCode is the HTTP code returned for type GetCreditInternalServerError
const GetCreditInternalServerErrorCode int = 500

/*GetCreditInternalServerError Something unexpected happend, error raised

swagger:response getCreditInternalServerError
*/
type GetCreditInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetCreditInternalServerError creates GetCreditInternalServerError with default headers values
func NewGetCreditInternalServerError() *GetCreditInternalServerError {

	return &GetCreditInternalServerError{}
}

// WithPayload adds the payload to the get credit internal server error response
func (o *GetCreditInternalServerError) WithPayload(payload *models.ErrorResponse) *GetCreditInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get credit internal server error response
func (o *GetCreditInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCreditInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Code generated by go-swagger; DO NOT EDIT.

package approval_system_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListResourcesHandlerFunc turns a function with the right signature into a list resources handler
type ListResourcesHandlerFunc func(ListResourcesParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn ListResourcesHandlerFunc) Handle(params ListResourcesParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// ListResourcesHandler interface for that can handle valid list resources params
type ListResourcesHandler interface {
	Handle(ListResourcesParams, interface{}) middleware.Responder
}

// NewListResources creates a new http.Handler for the list resources operation
func NewListResources(ctx *middleware.Context, handler ListResourcesHandler) *ListResources {
	return &ListResources{Context: ctx, Handler: handler}
}

/*ListResources swagger:route GET /approval_system/resource approvalSystemManagement listResources

List all HPC resources from approval system

lists all HPC resources from approval system

*/
type ListResources struct {
	Context *middleware.Context
	Handler ListResourcesHandler
}

func (o *ListResources) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListResourcesParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

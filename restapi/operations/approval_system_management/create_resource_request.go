// Code generated by go-swagger; DO NOT EDIT.

package approval_system_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateResourceRequestHandlerFunc turns a function with the right signature into a create resource request handler
type CreateResourceRequestHandlerFunc func(CreateResourceRequestParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateResourceRequestHandlerFunc) Handle(params CreateResourceRequestParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// CreateResourceRequestHandler interface for that can handle valid create resource request params
type CreateResourceRequestHandler interface {
	Handle(CreateResourceRequestParams, interface{}) middleware.Responder
}

// NewCreateResourceRequest creates a new http.Handler for the create resource request operation
func NewCreateResourceRequest(ctx *middleware.Context, handler CreateResourceRequestHandler) *CreateResourceRequest {
	return &CreateResourceRequest{Context: ctx, Handler: handler}
}

/*CreateResourceRequest swagger:route POST /approval_system/resourceRequest approvalSystemManagement createResourceRequest

Create HPC resource request

Creates a new HPC resource request in approval system

*/
type CreateResourceRequest struct {
	Context *middleware.Context
	Handler CreateResourceRequestHandler
}

func (o *CreateResourceRequest) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateResourceRequestParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// Code generated by go-swagger; DO NOT EDIT.

package approval_system_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// CreateResourceRequestCreatedCode is the HTTP code returned for type CreateResourceRequestCreated
const CreateResourceRequestCreatedCode int = 201

/*CreateResourceRequestCreated resource request created

swagger:response createResourceRequestCreated
*/
type CreateResourceRequestCreated struct {

	/*
	  In: Body
	*/
	Payload *models.ApprovalSystemCreatedResponse `json:"body,omitempty"`
}

// NewCreateResourceRequestCreated creates CreateResourceRequestCreated with default headers values
func NewCreateResourceRequestCreated() *CreateResourceRequestCreated {

	return &CreateResourceRequestCreated{}
}

// WithPayload adds the payload to the create resource request created response
func (o *CreateResourceRequestCreated) WithPayload(payload *models.ApprovalSystemCreatedResponse) *CreateResourceRequestCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create resource request created response
func (o *CreateResourceRequestCreated) SetPayload(payload *models.ApprovalSystemCreatedResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateResourceRequestCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateResourceRequestBadRequestCode is the HTTP code returned for type CreateResourceRequestBadRequest
const CreateResourceRequestBadRequestCode int = 400

/*CreateResourceRequestBadRequest invalid input, object invalid

swagger:response createResourceRequestBadRequest
*/
type CreateResourceRequestBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ApprovalSystemInvalidResponse `json:"body,omitempty"`
}

// NewCreateResourceRequestBadRequest creates CreateResourceRequestBadRequest with default headers values
func NewCreateResourceRequestBadRequest() *CreateResourceRequestBadRequest {

	return &CreateResourceRequestBadRequest{}
}

// WithPayload adds the payload to the create resource request bad request response
func (o *CreateResourceRequestBadRequest) WithPayload(payload *models.ApprovalSystemInvalidResponse) *CreateResourceRequestBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create resource request bad request response
func (o *CreateResourceRequestBadRequest) SetPayload(payload *models.ApprovalSystemInvalidResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateResourceRequestBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateResourceRequestNotFoundCode is the HTTP code returned for type CreateResourceRequestNotFound
const CreateResourceRequestNotFoundCode int = 404

/*CreateResourceRequestNotFound Required stuff for resource request creation hasn't been met.

swagger:response createResourceRequestNotFound
*/
type CreateResourceRequestNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ApprovalSystemMissingResponse `json:"body,omitempty"`
}

// NewCreateResourceRequestNotFound creates CreateResourceRequestNotFound with default headers values
func NewCreateResourceRequestNotFound() *CreateResourceRequestNotFound {

	return &CreateResourceRequestNotFound{}
}

// WithPayload adds the payload to the create resource request not found response
func (o *CreateResourceRequestNotFound) WithPayload(payload *models.ApprovalSystemMissingResponse) *CreateResourceRequestNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create resource request not found response
func (o *CreateResourceRequestNotFound) SetPayload(payload *models.ApprovalSystemMissingResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateResourceRequestNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateResourceRequestInternalServerErrorCode is the HTTP code returned for type CreateResourceRequestInternalServerError
const CreateResourceRequestInternalServerErrorCode int = 500

/*CreateResourceRequestInternalServerError unexpected error

swagger:response createResourceRequestInternalServerError
*/
type CreateResourceRequestInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ApprovalSystemErrorResponse `json:"body,omitempty"`
}

// NewCreateResourceRequestInternalServerError creates CreateResourceRequestInternalServerError with default headers values
func NewCreateResourceRequestInternalServerError() *CreateResourceRequestInternalServerError {

	return &CreateResourceRequestInternalServerError{}
}

// WithPayload adds the payload to the create resource request internal server error response
func (o *CreateResourceRequestInternalServerError) WithPayload(payload *models.ApprovalSystemErrorResponse) *CreateResourceRequestInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create resource request internal server error response
func (o *CreateResourceRequestInternalServerError) SetPayload(payload *models.ApprovalSystemErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateResourceRequestInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

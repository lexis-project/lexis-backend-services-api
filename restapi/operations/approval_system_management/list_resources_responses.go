// Code generated by go-swagger; DO NOT EDIT.

package approval_system_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// ListResourcesOKCode is the HTTP code returned for type ListResourcesOK
const ListResourcesOKCode int = 200

/*ListResourcesOK list of HPC resources returned from from approval system

swagger:response listResourcesOK
*/
type ListResourcesOK struct {

	/*
	  In: Body
	*/
	Payload []*models.ApprovalSystemResource `json:"body,omitempty"`
}

// NewListResourcesOK creates ListResourcesOK with default headers values
func NewListResourcesOK() *ListResourcesOK {

	return &ListResourcesOK{}
}

// WithPayload adds the payload to the list resources o k response
func (o *ListResourcesOK) WithPayload(payload []*models.ApprovalSystemResource) *ListResourcesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list resources o k response
func (o *ListResourcesOK) SetPayload(payload []*models.ApprovalSystemResource) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListResourcesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.ApprovalSystemResource, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListResourcesNotFoundCode is the HTTP code returned for type ListResourcesNotFound
const ListResourcesNotFoundCode int = 404

/*ListResourcesNotFound List of available HPC resources not found

swagger:response listResourcesNotFound
*/
type ListResourcesNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ApprovalSystemMissingResponse `json:"body,omitempty"`
}

// NewListResourcesNotFound creates ListResourcesNotFound with default headers values
func NewListResourcesNotFound() *ListResourcesNotFound {

	return &ListResourcesNotFound{}
}

// WithPayload adds the payload to the list resources not found response
func (o *ListResourcesNotFound) WithPayload(payload *models.ApprovalSystemMissingResponse) *ListResourcesNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list resources not found response
func (o *ListResourcesNotFound) SetPayload(payload *models.ApprovalSystemMissingResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListResourcesNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListResourcesInternalServerErrorCode is the HTTP code returned for type ListResourcesInternalServerError
const ListResourcesInternalServerErrorCode int = 500

/*ListResourcesInternalServerError unexpected error

swagger:response listResourcesInternalServerError
*/
type ListResourcesInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ApprovalSystemErrorResponse `json:"body,omitempty"`
}

// NewListResourcesInternalServerError creates ListResourcesInternalServerError with default headers values
func NewListResourcesInternalServerError() *ListResourcesInternalServerError {

	return &ListResourcesInternalServerError{}
}

// WithPayload adds the payload to the list resources internal server error response
func (o *ListResourcesInternalServerError) WithPayload(payload *models.ApprovalSystemErrorResponse) *ListResourcesInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list resources internal server error response
func (o *ListResourcesInternalServerError) SetPayload(payload *models.ApprovalSystemErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListResourcesInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

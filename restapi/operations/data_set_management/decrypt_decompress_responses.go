// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// DecryptDecompressCreatedCode is the HTTP code returned for type DecryptDecompressCreated
const DecryptDecompressCreatedCode int = 201

/*DecryptDecompressCreated The response code means that the decryption and decompression has been initiated. Status of the operation can be checked by querying the status.

swagger:response decryptDecompressCreated
*/
type DecryptDecompressCreated struct {

	/*
	  In: Body
	*/
	Payload *models.SteeringRequestID `json:"body,omitempty"`
}

// NewDecryptDecompressCreated creates DecryptDecompressCreated with default headers values
func NewDecryptDecompressCreated() *DecryptDecompressCreated {

	return &DecryptDecompressCreated{}
}

// WithPayload adds the payload to the decrypt decompress created response
func (o *DecryptDecompressCreated) WithPayload(payload *models.SteeringRequestID) *DecryptDecompressCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the decrypt decompress created response
func (o *DecryptDecompressCreated) SetPayload(payload *models.SteeringRequestID) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DecryptDecompressCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DecryptDecompressBadRequestCode is the HTTP code returned for type DecryptDecompressBadRequest
const DecryptDecompressBadRequestCode int = 400

/*DecryptDecompressBadRequest This means that there's something wrong in the input parameters and the server couldn't understand the request.

swagger:response decryptDecompressBadRequest
*/
type DecryptDecompressBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDecryptDecompressBadRequest creates DecryptDecompressBadRequest with default headers values
func NewDecryptDecompressBadRequest() *DecryptDecompressBadRequest {

	return &DecryptDecompressBadRequest{}
}

// WithPayload adds the payload to the decrypt decompress bad request response
func (o *DecryptDecompressBadRequest) WithPayload(payload *models.ErrorResponse) *DecryptDecompressBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the decrypt decompress bad request response
func (o *DecryptDecompressBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DecryptDecompressBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DecryptDecompressUnauthorizedCode is the HTTP code returned for type DecryptDecompressUnauthorized
const DecryptDecompressUnauthorizedCode int = 401

/*DecryptDecompressUnauthorized This means that the user is not authenticated with keycloak decryption with decompression can't be triggered unless the user first log in with a valid user

swagger:response decryptDecompressUnauthorized
*/
type DecryptDecompressUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDecryptDecompressUnauthorized creates DecryptDecompressUnauthorized with default headers values
func NewDecryptDecompressUnauthorized() *DecryptDecompressUnauthorized {

	return &DecryptDecompressUnauthorized{}
}

// WithPayload adds the payload to the decrypt decompress unauthorized response
func (o *DecryptDecompressUnauthorized) WithPayload(payload *models.ErrorResponse) *DecryptDecompressUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the decrypt decompress unauthorized response
func (o *DecryptDecompressUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DecryptDecompressUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DecryptDecompressForbiddenCode is the HTTP code returned for type DecryptDecompressForbidden
const DecryptDecompressForbiddenCode int = 403

/*DecryptDecompressForbidden This means that the resource the user is trying to decrypt and decompress from or to is not readable or writable by the user. User doesn't have the correct rights to read the source file.

swagger:response decryptDecompressForbidden
*/
type DecryptDecompressForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDecryptDecompressForbidden creates DecryptDecompressForbidden with default headers values
func NewDecryptDecompressForbidden() *DecryptDecompressForbidden {

	return &DecryptDecompressForbidden{}
}

// WithPayload adds the payload to the decrypt decompress forbidden response
func (o *DecryptDecompressForbidden) WithPayload(payload *models.ErrorResponse) *DecryptDecompressForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the decrypt decompress forbidden response
func (o *DecryptDecompressForbidden) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DecryptDecompressForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DecryptDecompressNotFoundCode is the HTTP code returned for type DecryptDecompressNotFound
const DecryptDecompressNotFoundCode int = 404

/*DecryptDecompressNotFound This means that either the source path on the system doesn't exist.

swagger:response decryptDecompressNotFound
*/
type DecryptDecompressNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDecryptDecompressNotFound creates DecryptDecompressNotFound with default headers values
func NewDecryptDecompressNotFound() *DecryptDecompressNotFound {

	return &DecryptDecompressNotFound{}
}

// WithPayload adds the payload to the decrypt decompress not found response
func (o *DecryptDecompressNotFound) WithPayload(payload *models.ErrorResponse) *DecryptDecompressNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the decrypt decompress not found response
func (o *DecryptDecompressNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DecryptDecompressNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DecryptDecompressRequestURITooLongCode is the HTTP code returned for type DecryptDecompressRequestURITooLong
const DecryptDecompressRequestURITooLongCode int = 414

/*DecryptDecompressRequestURITooLong This means that the either the source path is longer than the server is willing to interpret.

swagger:response decryptDecompressRequestUriTooLong
*/
type DecryptDecompressRequestURITooLong struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDecryptDecompressRequestURITooLong creates DecryptDecompressRequestURITooLong with default headers values
func NewDecryptDecompressRequestURITooLong() *DecryptDecompressRequestURITooLong {

	return &DecryptDecompressRequestURITooLong{}
}

// WithPayload adds the payload to the decrypt decompress request Uri too long response
func (o *DecryptDecompressRequestURITooLong) WithPayload(payload *models.ErrorResponse) *DecryptDecompressRequestURITooLong {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the decrypt decompress request Uri too long response
func (o *DecryptDecompressRequestURITooLong) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DecryptDecompressRequestURITooLong) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(414)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DecryptDecompressTooManyRequestsCode is the HTTP code returned for type DecryptDecompressTooManyRequests
const DecryptDecompressTooManyRequestsCode int = 429

/*DecryptDecompressTooManyRequests This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.

swagger:response decryptDecompressTooManyRequests
*/
type DecryptDecompressTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDecryptDecompressTooManyRequests creates DecryptDecompressTooManyRequests with default headers values
func NewDecryptDecompressTooManyRequests() *DecryptDecompressTooManyRequests {

	return &DecryptDecompressTooManyRequests{}
}

// WithPayload adds the payload to the decrypt decompress too many requests response
func (o *DecryptDecompressTooManyRequests) WithPayload(payload *models.ErrorResponse) *DecryptDecompressTooManyRequests {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the decrypt decompress too many requests response
func (o *DecryptDecompressTooManyRequests) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DecryptDecompressTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(429)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DecryptDecompressInternalServerErrorCode is the HTTP code returned for type DecryptDecompressInternalServerError
const DecryptDecompressInternalServerErrorCode int = 500

/*DecryptDecompressInternalServerError This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.

swagger:response decryptDecompressInternalServerError
*/
type DecryptDecompressInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDecryptDecompressInternalServerError creates DecryptDecompressInternalServerError with default headers values
func NewDecryptDecompressInternalServerError() *DecryptDecompressInternalServerError {

	return &DecryptDecompressInternalServerError{}
}

// WithPayload adds the payload to the decrypt decompress internal server error response
func (o *DecryptDecompressInternalServerError) WithPayload(payload *models.ErrorResponse) *DecryptDecompressInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the decrypt decompress internal server error response
func (o *DecryptDecompressInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DecryptDecompressInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

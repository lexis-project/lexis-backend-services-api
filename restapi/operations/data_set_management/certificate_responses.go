// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// CertificateOKCode is the HTTP code returned for type CertificateOK
const CertificateOKCode int = 200

/*CertificateOK Certificate download in body of response

swagger:response certificateOK
*/
type CertificateOK struct {

	/*
	  In: Body
	*/
	Payload io.ReadCloser `json:"body,omitempty"`
}

// NewCertificateOK creates CertificateOK with default headers values
func NewCertificateOK() *CertificateOK {

	return &CertificateOK{}
}

// WithPayload adds the payload to the certificate o k response
func (o *CertificateOK) WithPayload(payload io.ReadCloser) *CertificateOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the certificate o k response
func (o *CertificateOK) SetPayload(payload io.ReadCloser) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CertificateOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// CertificateUnauthorizedCode is the HTTP code returned for type CertificateUnauthorized
const CertificateUnauthorizedCode int = 401

/*CertificateUnauthorized Unauthorized

swagger:response certificateUnauthorized
*/
type CertificateUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCertificateUnauthorized creates CertificateUnauthorized with default headers values
func NewCertificateUnauthorized() *CertificateUnauthorized {

	return &CertificateUnauthorized{}
}

// WithPayload adds the payload to the certificate unauthorized response
func (o *CertificateUnauthorized) WithPayload(payload *models.ErrorResponse) *CertificateUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the certificate unauthorized response
func (o *CertificateUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CertificateUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CertificateInternalServerErrorCode is the HTTP code returned for type CertificateInternalServerError
const CertificateInternalServerErrorCode int = 500

/*CertificateInternalServerError Internal error processing request

swagger:response certificateInternalServerError
*/
type CertificateInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCertificateInternalServerError creates CertificateInternalServerError with default headers values
func NewCertificateInternalServerError() *CertificateInternalServerError {

	return &CertificateInternalServerError{}
}

// WithPayload adds the payload to the certificate internal server error response
func (o *CertificateInternalServerError) WithPayload(payload *models.ErrorResponse) *CertificateInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the certificate internal server error response
func (o *CertificateInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CertificateInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CertificateBadGatewayCode is the HTTP code returned for type CertificateBadGateway
const CertificateBadGatewayCode int = 502

/*CertificateBadGateway Bad Gateway

swagger:response certificateBadGateway
*/
type CertificateBadGateway struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCertificateBadGateway creates CertificateBadGateway with default headers values
func NewCertificateBadGateway() *CertificateBadGateway {

	return &CertificateBadGateway{}
}

// WithPayload adds the payload to the certificate bad gateway response
func (o *CertificateBadGateway) WithPayload(payload *models.ErrorResponse) *CertificateBadGateway {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the certificate bad gateway response
func (o *CertificateBadGateway) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CertificateBadGateway) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(502)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CertificateServiceUnavailableCode is the HTTP code returned for type CertificateServiceUnavailable
const CertificateServiceUnavailableCode int = 503

/*CertificateServiceUnavailable unexpected error

swagger:response certificateServiceUnavailable
*/
type CertificateServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCertificateServiceUnavailable creates CertificateServiceUnavailable with default headers values
func NewCertificateServiceUnavailable() *CertificateServiceUnavailable {

	return &CertificateServiceUnavailable{}
}

// WithPayload adds the payload to the certificate service unavailable response
func (o *CertificateServiceUnavailable) WithPayload(payload *models.ErrorResponse) *CertificateServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the certificate service unavailable response
func (o *CertificateServiceUnavailable) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CertificateServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

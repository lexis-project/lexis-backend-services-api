// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// OptionsDatasetUploadHandlerFunc turns a function with the right signature into a options dataset upload handler
type OptionsDatasetUploadHandlerFunc func(OptionsDatasetUploadParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn OptionsDatasetUploadHandlerFunc) Handle(params OptionsDatasetUploadParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// OptionsDatasetUploadHandler interface for that can handle valid options dataset upload params
type OptionsDatasetUploadHandler interface {
	Handle(OptionsDatasetUploadParams, interface{}) middleware.Responder
}

// NewOptionsDatasetUpload creates a new http.Handler for the options dataset upload operation
func NewOptionsDatasetUpload(ctx *middleware.Context, handler OptionsDatasetUploadHandler) *OptionsDatasetUpload {
	return &OptionsDatasetUpload{Context: ctx, Handler: handler}
}

/*OptionsDatasetUpload swagger:route OPTIONS /dataset/upload/ dataSetManagement optionsDatasetUpload

Request to gather information about the Server's current configuration

An OPTIONS request MAY be used to gather information about the Server's current configuration. A successful response indicated by the 204 No Content or 200 OK status MUST contain the Tus-Version header. It MAY include the Tus-Extension and Tus-Max-Size headers.

*/
type OptionsDatasetUpload struct {
	Context *middleware.Context
	Handler OptionsDatasetUploadHandler
}

func (o *OptionsDatasetUpload) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewOptionsDatasetUploadParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

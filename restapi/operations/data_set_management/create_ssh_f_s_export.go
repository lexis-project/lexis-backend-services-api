// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateSSHFSExportHandlerFunc turns a function with the right signature into a create SSH f s export handler
type CreateSSHFSExportHandlerFunc func(CreateSSHFSExportParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateSSHFSExportHandlerFunc) Handle(params CreateSSHFSExportParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// CreateSSHFSExportHandler interface for that can handle valid create SSH f s export params
type CreateSSHFSExportHandler interface {
	Handle(CreateSSHFSExportParams, interface{}) middleware.Responder
}

// NewCreateSSHFSExport creates a new http.Handler for the create SSH f s export operation
func NewCreateSSHFSExport(ctx *middleware.Context, handler CreateSSHFSExportHandler) *CreateSSHFSExport {
	return &CreateSSHFSExport{Context: ctx, Handler: handler}
}

/*CreateSSHFSExport swagger:route POST /dataset/ssh/sshfsexport dataSetManagement sshfsexport createSshFSExport

Export a directory of the DDI for use via SSHFS

Export a directory of the DDI for use via SSHFS

*/
type CreateSSHFSExport struct {
	Context *middleware.Context
	Handler CreateSSHFSExportHandler
}

func (o *CreateSSHFSExport) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateSSHFSExportParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateSSHFSExportBody create SSH f s export body
//
// swagger:model CreateSSHFSExportBody
type CreateSSHFSExportBody struct {

	// host
	// Required: true
	Host *string `json:"host"`

	// path
	// Required: true
	Path *string `json:"path"`

	// pubkey
	// Required: true
	Pubkey *string `json:"pubkey"`
}

// Validate validates this create SSH f s export body
func (o *CreateSSHFSExportBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePubkey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSSHFSExportBody) validateHost(formats strfmt.Registry) error {

	if err := validate.Required("parameters"+"."+"host", "body", o.Host); err != nil {
		return err
	}

	return nil
}

func (o *CreateSSHFSExportBody) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("parameters"+"."+"path", "body", o.Path); err != nil {
		return err
	}

	return nil
}

func (o *CreateSSHFSExportBody) validatePubkey(formats strfmt.Registry) error {

	if err := validate.Required("parameters"+"."+"pubkey", "body", o.Pubkey); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateSSHFSExportBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSSHFSExportBody) UnmarshalBinary(b []byte) error {
	var res CreateSSHFSExportBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateSSHFSExportCreatedBody create SSH f s export created body
//
// swagger:model CreateSSHFSExportCreatedBody
type CreateSSHFSExportCreatedBody struct {

	// sshfs
	// Required: true
	Sshfs *string `json:"sshfs"`

	// user
	// Required: true
	User *string `json:"user"`
}

// Validate validates this create SSH f s export created body
func (o *CreateSSHFSExportCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSshfs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSSHFSExportCreatedBody) validateSshfs(formats strfmt.Registry) error {

	if err := validate.Required("createSshFSExportCreated"+"."+"sshfs", "body", o.Sshfs); err != nil {
		return err
	}

	return nil
}

func (o *CreateSSHFSExportCreatedBody) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("createSshFSExportCreated"+"."+"user", "body", o.User); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateSSHFSExportCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSSHFSExportCreatedBody) UnmarshalBinary(b []byte) error {
	var res CreateSSHFSExportCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

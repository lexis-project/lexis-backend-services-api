// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// CheckPermissionHandlerFunc turns a function with the right signature into a check permission handler
type CheckPermissionHandlerFunc func(CheckPermissionParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn CheckPermissionHandlerFunc) Handle(params CheckPermissionParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// CheckPermissionHandler interface for that can handle valid check permission params
type CheckPermissionHandler interface {
	Handle(CheckPermissionParams, interface{}) middleware.Responder
}

// NewCheckPermission creates a new http.Handler for the check permission operation
func NewCheckPermission(ctx *middleware.Context, handler CheckPermissionHandler) *CheckPermission {
	return &CheckPermission{Context: ctx, Handler: handler}
}

/*CheckPermission swagger:route POST /dataset/checkpermission dataSetManagement checkPermission

Check if a user has permission to access a DDI location for writing

Check if a user has permission to access a DDI location for writing

*/
type CheckPermission struct {
	Context *middleware.Context
	Handler CheckPermissionHandler
}

func (o *CheckPermission) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCheckPermissionParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CheckPermissionBody check permission body
//
// swagger:model CheckPermissionBody
type CheckPermissionBody struct {

	// access
	// Required: true
	Access models.AccessMode `json:"access"`

	// project
	// Required: true
	Project *string `json:"project"`
}

// Validate validates this check permission body
func (o *CheckPermissionBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CheckPermissionBody) validateAccess(formats strfmt.Registry) error {

	if err := o.Access.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Access" + "." + "access")
		}
		return err
	}

	return nil
}

func (o *CheckPermissionBody) validateProject(formats strfmt.Registry) error {

	if err := validate.Required("Access"+"."+"project", "body", o.Project); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CheckPermissionBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CheckPermissionBody) UnmarshalBinary(b []byte) error {
	var res CheckPermissionBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CheckPermissionOKBody check permission o k body
//
// swagger:model CheckPermissionOKBody
type CheckPermissionOKBody struct {

	// status
	// Required: true
	// Pattern: 200
	Status *string `json:"status"`
}

// Validate validates this check permission o k body
func (o *CheckPermissionOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CheckPermissionOKBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("checkPermissionOK"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	if err := validate.Pattern("checkPermissionOK"+"."+"status", "body", string(*o.Status), `200`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CheckPermissionOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CheckPermissionOKBody) UnmarshalBinary(b []byte) error {
	var res CheckPermissionOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

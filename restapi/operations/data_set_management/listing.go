// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// ListingHandlerFunc turns a function with the right signature into a listing handler
type ListingHandlerFunc func(ListingParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn ListingHandlerFunc) Handle(params ListingParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// ListingHandler interface for that can handle valid listing params
type ListingHandler interface {
	Handle(ListingParams, interface{}) middleware.Responder
}

// NewListing creates a new http.Handler for the listing operation
func NewListing(ctx *middleware.Context, handler ListingHandler) *Listing {
	return &Listing{Context: ctx, Handler: handler}
}

/*Listing swagger:route POST /dataset/listing dataSetManagement listing

List file contents of a dataset.

List file contents of a dataset.

*/
type Listing struct {
	Context *middleware.Context
	Handler ListingHandler
}

func (o *Listing) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListingParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ListingBody listing body
//
// swagger:model ListingBody
type ListingBody struct {

	// access
	// Required: true
	Access models.AccessMode `json:"access"`

	// internal ID
	// Required: true
	InternalID *string `json:"internalID"`

	// path within the dataset, without a starting slash. An empty
	// string pushes to the root of the dataset (i.e. inside the
	// directory named <internalID> in the iRODS backend).
	//
	Path string `json:"path,omitempty"`

	// project
	// Required: true
	Project *string `json:"project"`

	// recursive
	Recursive *bool `json:"recursive,omitempty"`

	// zone
	Zone string `json:"zone,omitempty"`
}

// Validate validates this listing body
func (o *ListingBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInternalID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListingBody) validateAccess(formats strfmt.Registry) error {

	if err := o.Access.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("json" + "." + "access")
		}
		return err
	}

	return nil
}

func (o *ListingBody) validateInternalID(formats strfmt.Registry) error {

	if err := validate.Required("json"+"."+"internalID", "body", o.InternalID); err != nil {
		return err
	}

	return nil
}

func (o *ListingBody) validateProject(formats strfmt.Registry) error {

	if err := validate.Required("json"+"."+"project", "body", o.Project); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListingBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListingBody) UnmarshalBinary(b []byte) error {
	var res ListingBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

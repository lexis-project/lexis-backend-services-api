// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// ReplicateCreatedCode is the HTTP code returned for type ReplicateCreated
const ReplicateCreatedCode int = 201

/*ReplicateCreated The response code means that the data transfer has been initiated. Status of the transfer can be checked by querying the status.

swagger:response replicateCreated
*/
type ReplicateCreated struct {

	/*
	  In: Body
	*/
	Payload *models.SteeringRequestID `json:"body,omitempty"`
}

// NewReplicateCreated creates ReplicateCreated with default headers values
func NewReplicateCreated() *ReplicateCreated {

	return &ReplicateCreated{}
}

// WithPayload adds the payload to the replicate created response
func (o *ReplicateCreated) WithPayload(payload *models.SteeringRequestID) *ReplicateCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replicate created response
func (o *ReplicateCreated) SetPayload(payload *models.SteeringRequestID) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplicateCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplicateBadRequestCode is the HTTP code returned for type ReplicateBadRequest
const ReplicateBadRequestCode int = 400

/*ReplicateBadRequest This means that there's something wrong in the input parameters and the server couldn't understand the request.

swagger:response replicateBadRequest
*/
type ReplicateBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewReplicateBadRequest creates ReplicateBadRequest with default headers values
func NewReplicateBadRequest() *ReplicateBadRequest {

	return &ReplicateBadRequest{}
}

// WithPayload adds the payload to the replicate bad request response
func (o *ReplicateBadRequest) WithPayload(payload *models.ErrorResponse) *ReplicateBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replicate bad request response
func (o *ReplicateBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplicateBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplicateUnauthorizedCode is the HTTP code returned for type ReplicateUnauthorized
const ReplicateUnauthorizedCode int = 401

/*ReplicateUnauthorized This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user

swagger:response replicateUnauthorized
*/
type ReplicateUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewReplicateUnauthorized creates ReplicateUnauthorized with default headers values
func NewReplicateUnauthorized() *ReplicateUnauthorized {

	return &ReplicateUnauthorized{}
}

// WithPayload adds the payload to the replicate unauthorized response
func (o *ReplicateUnauthorized) WithPayload(payload *models.ErrorResponse) *ReplicateUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replicate unauthorized response
func (o *ReplicateUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplicateUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplicateForbiddenCode is the HTTP code returned for type ReplicateForbidden
const ReplicateForbiddenCode int = 403

/*ReplicateForbidden This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.

swagger:response replicateForbidden
*/
type ReplicateForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewReplicateForbidden creates ReplicateForbidden with default headers values
func NewReplicateForbidden() *ReplicateForbidden {

	return &ReplicateForbidden{}
}

// WithPayload adds the payload to the replicate forbidden response
func (o *ReplicateForbidden) WithPayload(payload *models.ErrorResponse) *ReplicateForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replicate forbidden response
func (o *ReplicateForbidden) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplicateForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplicateNotFoundCode is the HTTP code returned for type ReplicateNotFound
const ReplicateNotFoundCode int = 404

/*ReplicateNotFound This means that either the source path or the the target path on the system doesn't exist.

swagger:response replicateNotFound
*/
type ReplicateNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewReplicateNotFound creates ReplicateNotFound with default headers values
func NewReplicateNotFound() *ReplicateNotFound {

	return &ReplicateNotFound{}
}

// WithPayload adds the payload to the replicate not found response
func (o *ReplicateNotFound) WithPayload(payload *models.ErrorResponse) *ReplicateNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replicate not found response
func (o *ReplicateNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplicateNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplicateRequestURITooLongCode is the HTTP code returned for type ReplicateRequestURITooLong
const ReplicateRequestURITooLongCode int = 414

/*ReplicateRequestURITooLong This means that the either the source path or the target path is longer than the server is willing to interpret.

swagger:response replicateRequestUriTooLong
*/
type ReplicateRequestURITooLong struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewReplicateRequestURITooLong creates ReplicateRequestURITooLong with default headers values
func NewReplicateRequestURITooLong() *ReplicateRequestURITooLong {

	return &ReplicateRequestURITooLong{}
}

// WithPayload adds the payload to the replicate request Uri too long response
func (o *ReplicateRequestURITooLong) WithPayload(payload *models.ErrorResponse) *ReplicateRequestURITooLong {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replicate request Uri too long response
func (o *ReplicateRequestURITooLong) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplicateRequestURITooLong) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(414)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplicateTooManyRequestsCode is the HTTP code returned for type ReplicateTooManyRequests
const ReplicateTooManyRequestsCode int = 429

/*ReplicateTooManyRequests This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.

swagger:response replicateTooManyRequests
*/
type ReplicateTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewReplicateTooManyRequests creates ReplicateTooManyRequests with default headers values
func NewReplicateTooManyRequests() *ReplicateTooManyRequests {

	return &ReplicateTooManyRequests{}
}

// WithPayload adds the payload to the replicate too many requests response
func (o *ReplicateTooManyRequests) WithPayload(payload *models.ErrorResponse) *ReplicateTooManyRequests {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replicate too many requests response
func (o *ReplicateTooManyRequests) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplicateTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(429)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplicateInternalServerErrorCode is the HTTP code returned for type ReplicateInternalServerError
const ReplicateInternalServerErrorCode int = 500

/*ReplicateInternalServerError This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.

swagger:response replicateInternalServerError
*/
type ReplicateInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewReplicateInternalServerError creates ReplicateInternalServerError with default headers values
func NewReplicateInternalServerError() *ReplicateInternalServerError {

	return &ReplicateInternalServerError{}
}

// WithPayload adds the payload to the replicate internal server error response
func (o *ReplicateInternalServerError) WithPayload(payload *models.ErrorResponse) *ReplicateInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replicate internal server error response
func (o *ReplicateInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplicateInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// CheckDecryptionDecompressionStatusOKCode is the HTTP code returned for type CheckDecryptionDecompressionStatusOK
const CheckDecryptionDecompressionStatusOKCode int = 200

/*CheckDecryptionDecompressionStatusOK This means that the status has been returned to the user in the response body.

swagger:response checkDecryptionDecompressionStatusOK
*/
type CheckDecryptionDecompressionStatusOK struct {

	/*
	  In: Body
	*/
	Payload *CheckDecryptionDecompressionStatusOKBody `json:"body,omitempty"`
}

// NewCheckDecryptionDecompressionStatusOK creates CheckDecryptionDecompressionStatusOK with default headers values
func NewCheckDecryptionDecompressionStatusOK() *CheckDecryptionDecompressionStatusOK {

	return &CheckDecryptionDecompressionStatusOK{}
}

// WithPayload adds the payload to the check decryption decompression status o k response
func (o *CheckDecryptionDecompressionStatusOK) WithPayload(payload *CheckDecryptionDecompressionStatusOKBody) *CheckDecryptionDecompressionStatusOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check decryption decompression status o k response
func (o *CheckDecryptionDecompressionStatusOK) SetPayload(payload *CheckDecryptionDecompressionStatusOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckDecryptionDecompressionStatusOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckDecryptionDecompressionStatusBadRequestCode is the HTTP code returned for type CheckDecryptionDecompressionStatusBadRequest
const CheckDecryptionDecompressionStatusBadRequestCode int = 400

/*CheckDecryptionDecompressionStatusBadRequest This means that the request ID given by the user is incorrect.

swagger:response checkDecryptionDecompressionStatusBadRequest
*/
type CheckDecryptionDecompressionStatusBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckDecryptionDecompressionStatusBadRequest creates CheckDecryptionDecompressionStatusBadRequest with default headers values
func NewCheckDecryptionDecompressionStatusBadRequest() *CheckDecryptionDecompressionStatusBadRequest {

	return &CheckDecryptionDecompressionStatusBadRequest{}
}

// WithPayload adds the payload to the check decryption decompression status bad request response
func (o *CheckDecryptionDecompressionStatusBadRequest) WithPayload(payload *models.ErrorResponse) *CheckDecryptionDecompressionStatusBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check decryption decompression status bad request response
func (o *CheckDecryptionDecompressionStatusBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckDecryptionDecompressionStatusBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckDecryptionDecompressionStatusUnauthorizedCode is the HTTP code returned for type CheckDecryptionDecompressionStatusUnauthorized
const CheckDecryptionDecompressionStatusUnauthorizedCode int = 401

/*CheckDecryptionDecompressionStatusUnauthorized This means that the user is not authenticated with keycloak and decryption with decompression can't be triggered unless the user first log in with a valid user

swagger:response checkDecryptionDecompressionStatusUnauthorized
*/
type CheckDecryptionDecompressionStatusUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckDecryptionDecompressionStatusUnauthorized creates CheckDecryptionDecompressionStatusUnauthorized with default headers values
func NewCheckDecryptionDecompressionStatusUnauthorized() *CheckDecryptionDecompressionStatusUnauthorized {

	return &CheckDecryptionDecompressionStatusUnauthorized{}
}

// WithPayload adds the payload to the check decryption decompression status unauthorized response
func (o *CheckDecryptionDecompressionStatusUnauthorized) WithPayload(payload *models.ErrorResponse) *CheckDecryptionDecompressionStatusUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check decryption decompression status unauthorized response
func (o *CheckDecryptionDecompressionStatusUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckDecryptionDecompressionStatusUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckDecryptionDecompressionStatusNotFoundCode is the HTTP code returned for type CheckDecryptionDecompressionStatusNotFound
const CheckDecryptionDecompressionStatusNotFoundCode int = 404

/*CheckDecryptionDecompressionStatusNotFound This means that the ID doesn't exist and thus a status can't be returned.

swagger:response checkDecryptionDecompressionStatusNotFound
*/
type CheckDecryptionDecompressionStatusNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckDecryptionDecompressionStatusNotFound creates CheckDecryptionDecompressionStatusNotFound with default headers values
func NewCheckDecryptionDecompressionStatusNotFound() *CheckDecryptionDecompressionStatusNotFound {

	return &CheckDecryptionDecompressionStatusNotFound{}
}

// WithPayload adds the payload to the check decryption decompression status not found response
func (o *CheckDecryptionDecompressionStatusNotFound) WithPayload(payload *models.ErrorResponse) *CheckDecryptionDecompressionStatusNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check decryption decompression status not found response
func (o *CheckDecryptionDecompressionStatusNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckDecryptionDecompressionStatusNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckDecryptionDecompressionStatusRequestURITooLongCode is the HTTP code returned for type CheckDecryptionDecompressionStatusRequestURITooLong
const CheckDecryptionDecompressionStatusRequestURITooLongCode int = 414

/*CheckDecryptionDecompressionStatusRequestURITooLong This means that the the request ID is longer than the server is willing to interpret.

swagger:response checkDecryptionDecompressionStatusRequestUriTooLong
*/
type CheckDecryptionDecompressionStatusRequestURITooLong struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckDecryptionDecompressionStatusRequestURITooLong creates CheckDecryptionDecompressionStatusRequestURITooLong with default headers values
func NewCheckDecryptionDecompressionStatusRequestURITooLong() *CheckDecryptionDecompressionStatusRequestURITooLong {

	return &CheckDecryptionDecompressionStatusRequestURITooLong{}
}

// WithPayload adds the payload to the check decryption decompression status request Uri too long response
func (o *CheckDecryptionDecompressionStatusRequestURITooLong) WithPayload(payload *models.ErrorResponse) *CheckDecryptionDecompressionStatusRequestURITooLong {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check decryption decompression status request Uri too long response
func (o *CheckDecryptionDecompressionStatusRequestURITooLong) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckDecryptionDecompressionStatusRequestURITooLong) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(414)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckDecryptionDecompressionStatusInternalServerErrorCode is the HTTP code returned for type CheckDecryptionDecompressionStatusInternalServerError
const CheckDecryptionDecompressionStatusInternalServerErrorCode int = 500

/*CheckDecryptionDecompressionStatusInternalServerError This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.

swagger:response checkDecryptionDecompressionStatusInternalServerError
*/
type CheckDecryptionDecompressionStatusInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckDecryptionDecompressionStatusInternalServerError creates CheckDecryptionDecompressionStatusInternalServerError with default headers values
func NewCheckDecryptionDecompressionStatusInternalServerError() *CheckDecryptionDecompressionStatusInternalServerError {

	return &CheckDecryptionDecompressionStatusInternalServerError{}
}

// WithPayload adds the payload to the check decryption decompression status internal server error response
func (o *CheckDecryptionDecompressionStatusInternalServerError) WithPayload(payload *models.ErrorResponse) *CheckDecryptionDecompressionStatusInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check decryption decompression status internal server error response
func (o *CheckDecryptionDecompressionStatusInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckDecryptionDecompressionStatusInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

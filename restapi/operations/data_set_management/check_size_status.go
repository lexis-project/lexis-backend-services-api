// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CheckSizeStatusHandlerFunc turns a function with the right signature into a check size status handler
type CheckSizeStatusHandlerFunc func(CheckSizeStatusParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn CheckSizeStatusHandlerFunc) Handle(params CheckSizeStatusParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// CheckSizeStatusHandler interface for that can handle valid check size status params
type CheckSizeStatusHandler interface {
	Handle(CheckSizeStatusParams, interface{}) middleware.Responder
}

// NewCheckSizeStatus creates a new http.Handler for the check size status operation
func NewCheckSizeStatus(ctx *middleware.Context, handler CheckSizeStatusHandler) *CheckSizeStatus {
	return &CheckSizeStatus{Context: ctx, Handler: handler}
}

/*CheckSizeStatus swagger:route GET /dataset/data/size/{request_id} dataSetManagement checkSizeStatus

This is called when a user requests to check the status of datasize request

This is called when a user requests to check the status of datasize request

*/
type CheckSizeStatus struct {
	Context *middleware.Context
	Handler CheckSizeStatusHandler
}

func (o *CheckSizeStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCheckSizeStatusParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

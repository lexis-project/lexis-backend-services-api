// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// CheckCompressionStatusOKCode is the HTTP code returned for type CheckCompressionStatusOK
const CheckCompressionStatusOKCode int = 200

/*CheckCompressionStatusOK This means that the status has been returned to the user in the response body.

swagger:response checkCompressionStatusOK
*/
type CheckCompressionStatusOK struct {

	/*
	  In: Body
	*/
	Payload *CheckCompressionStatusOKBody `json:"body,omitempty"`
}

// NewCheckCompressionStatusOK creates CheckCompressionStatusOK with default headers values
func NewCheckCompressionStatusOK() *CheckCompressionStatusOK {

	return &CheckCompressionStatusOK{}
}

// WithPayload adds the payload to the check compression status o k response
func (o *CheckCompressionStatusOK) WithPayload(payload *CheckCompressionStatusOKBody) *CheckCompressionStatusOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check compression status o k response
func (o *CheckCompressionStatusOK) SetPayload(payload *CheckCompressionStatusOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckCompressionStatusOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckCompressionStatusBadRequestCode is the HTTP code returned for type CheckCompressionStatusBadRequest
const CheckCompressionStatusBadRequestCode int = 400

/*CheckCompressionStatusBadRequest This means that the request ID given by the user is incorrect.

swagger:response checkCompressionStatusBadRequest
*/
type CheckCompressionStatusBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckCompressionStatusBadRequest creates CheckCompressionStatusBadRequest with default headers values
func NewCheckCompressionStatusBadRequest() *CheckCompressionStatusBadRequest {

	return &CheckCompressionStatusBadRequest{}
}

// WithPayload adds the payload to the check compression status bad request response
func (o *CheckCompressionStatusBadRequest) WithPayload(payload *models.ErrorResponse) *CheckCompressionStatusBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check compression status bad request response
func (o *CheckCompressionStatusBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckCompressionStatusBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckCompressionStatusUnauthorizedCode is the HTTP code returned for type CheckCompressionStatusUnauthorized
const CheckCompressionStatusUnauthorizedCode int = 401

/*CheckCompressionStatusUnauthorized This means that the user is not authenticated with keycloak and compression can't be triggered unless the user first log in with a valid user

swagger:response checkCompressionStatusUnauthorized
*/
type CheckCompressionStatusUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckCompressionStatusUnauthorized creates CheckCompressionStatusUnauthorized with default headers values
func NewCheckCompressionStatusUnauthorized() *CheckCompressionStatusUnauthorized {

	return &CheckCompressionStatusUnauthorized{}
}

// WithPayload adds the payload to the check compression status unauthorized response
func (o *CheckCompressionStatusUnauthorized) WithPayload(payload *models.ErrorResponse) *CheckCompressionStatusUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check compression status unauthorized response
func (o *CheckCompressionStatusUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckCompressionStatusUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckCompressionStatusNotFoundCode is the HTTP code returned for type CheckCompressionStatusNotFound
const CheckCompressionStatusNotFoundCode int = 404

/*CheckCompressionStatusNotFound This means that the ID doesn't exist and thus a status can't be returned.

swagger:response checkCompressionStatusNotFound
*/
type CheckCompressionStatusNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckCompressionStatusNotFound creates CheckCompressionStatusNotFound with default headers values
func NewCheckCompressionStatusNotFound() *CheckCompressionStatusNotFound {

	return &CheckCompressionStatusNotFound{}
}

// WithPayload adds the payload to the check compression status not found response
func (o *CheckCompressionStatusNotFound) WithPayload(payload *models.ErrorResponse) *CheckCompressionStatusNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check compression status not found response
func (o *CheckCompressionStatusNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckCompressionStatusNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckCompressionStatusRequestURITooLongCode is the HTTP code returned for type CheckCompressionStatusRequestURITooLong
const CheckCompressionStatusRequestURITooLongCode int = 414

/*CheckCompressionStatusRequestURITooLong This means that the the request ID is longer than the server is willing to interpret.

swagger:response checkCompressionStatusRequestUriTooLong
*/
type CheckCompressionStatusRequestURITooLong struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckCompressionStatusRequestURITooLong creates CheckCompressionStatusRequestURITooLong with default headers values
func NewCheckCompressionStatusRequestURITooLong() *CheckCompressionStatusRequestURITooLong {

	return &CheckCompressionStatusRequestURITooLong{}
}

// WithPayload adds the payload to the check compression status request Uri too long response
func (o *CheckCompressionStatusRequestURITooLong) WithPayload(payload *models.ErrorResponse) *CheckCompressionStatusRequestURITooLong {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check compression status request Uri too long response
func (o *CheckCompressionStatusRequestURITooLong) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckCompressionStatusRequestURITooLong) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(414)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckCompressionStatusInternalServerErrorCode is the HTTP code returned for type CheckCompressionStatusInternalServerError
const CheckCompressionStatusInternalServerErrorCode int = 500

/*CheckCompressionStatusInternalServerError This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.

swagger:response checkCompressionStatusInternalServerError
*/
type CheckCompressionStatusInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckCompressionStatusInternalServerError creates CheckCompressionStatusInternalServerError with default headers values
func NewCheckCompressionStatusInternalServerError() *CheckCompressionStatusInternalServerError {

	return &CheckCompressionStatusInternalServerError{}
}

// WithPayload adds the payload to the check compression status internal server error response
func (o *CheckCompressionStatusInternalServerError) WithPayload(payload *models.ErrorResponse) *CheckCompressionStatusInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check compression status internal server error response
func (o *CheckCompressionStatusInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckCompressionStatusInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

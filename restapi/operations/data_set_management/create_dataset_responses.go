// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// CreateDatasetOKCode is the HTTP code returned for type CreateDatasetOK
const CreateDatasetOKCode int = 200

/*CreateDatasetOK dataset modified

swagger:response createDatasetOK
*/
type CreateDatasetOK struct {

	/*
	  In: Body
	*/
	Payload *models.DatasetItemCreatedResponse `json:"body,omitempty"`
}

// NewCreateDatasetOK creates CreateDatasetOK with default headers values
func NewCreateDatasetOK() *CreateDatasetOK {

	return &CreateDatasetOK{}
}

// WithPayload adds the payload to the create dataset o k response
func (o *CreateDatasetOK) WithPayload(payload *models.DatasetItemCreatedResponse) *CreateDatasetOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create dataset o k response
func (o *CreateDatasetOK) SetPayload(payload *models.DatasetItemCreatedResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateDatasetOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateDatasetCreatedCode is the HTTP code returned for type CreateDatasetCreated
const CreateDatasetCreatedCode int = 201

/*CreateDatasetCreated dataset created

swagger:response createDatasetCreated
*/
type CreateDatasetCreated struct {

	/*
	  In: Body
	*/
	Payload *models.DatasetItemCreatedResponse `json:"body,omitempty"`
}

// NewCreateDatasetCreated creates CreateDatasetCreated with default headers values
func NewCreateDatasetCreated() *CreateDatasetCreated {

	return &CreateDatasetCreated{}
}

// WithPayload adds the payload to the create dataset created response
func (o *CreateDatasetCreated) WithPayload(payload *models.DatasetItemCreatedResponse) *CreateDatasetCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create dataset created response
func (o *CreateDatasetCreated) SetPayload(payload *models.DatasetItemCreatedResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateDatasetCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateDatasetBadRequestCode is the HTTP code returned for type CreateDatasetBadRequest
const CreateDatasetBadRequestCode int = 400

/*CreateDatasetBadRequest invalid input, object invalid

swagger:response createDatasetBadRequest
*/
type CreateDatasetBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCreateDatasetBadRequest creates CreateDatasetBadRequest with default headers values
func NewCreateDatasetBadRequest() *CreateDatasetBadRequest {

	return &CreateDatasetBadRequest{}
}

// WithPayload adds the payload to the create dataset bad request response
func (o *CreateDatasetBadRequest) WithPayload(payload *models.ErrorResponse) *CreateDatasetBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create dataset bad request response
func (o *CreateDatasetBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateDatasetBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateDatasetUnauthorizedCode is the HTTP code returned for type CreateDatasetUnauthorized
const CreateDatasetUnauthorizedCode int = 401

/*CreateDatasetUnauthorized Unauthorized

swagger:response createDatasetUnauthorized
*/
type CreateDatasetUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCreateDatasetUnauthorized creates CreateDatasetUnauthorized with default headers values
func NewCreateDatasetUnauthorized() *CreateDatasetUnauthorized {

	return &CreateDatasetUnauthorized{}
}

// WithPayload adds the payload to the create dataset unauthorized response
func (o *CreateDatasetUnauthorized) WithPayload(payload *models.ErrorResponse) *CreateDatasetUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create dataset unauthorized response
func (o *CreateDatasetUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateDatasetUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateDatasetForbiddenCode is the HTTP code returned for type CreateDatasetForbidden
const CreateDatasetForbiddenCode int = 403

/*CreateDatasetForbidden User not authorized to perform action

swagger:response createDatasetForbidden
*/
type CreateDatasetForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCreateDatasetForbidden creates CreateDatasetForbidden with default headers values
func NewCreateDatasetForbidden() *CreateDatasetForbidden {

	return &CreateDatasetForbidden{}
}

// WithPayload adds the payload to the create dataset forbidden response
func (o *CreateDatasetForbidden) WithPayload(payload *models.ErrorResponse) *CreateDatasetForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create dataset forbidden response
func (o *CreateDatasetForbidden) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateDatasetForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateDatasetInternalServerErrorCode is the HTTP code returned for type CreateDatasetInternalServerError
const CreateDatasetInternalServerErrorCode int = 500

/*CreateDatasetInternalServerError unexpected error

swagger:response createDatasetInternalServerError
*/
type CreateDatasetInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCreateDatasetInternalServerError creates CreateDatasetInternalServerError with default headers values
func NewCreateDatasetInternalServerError() *CreateDatasetInternalServerError {

	return &CreateDatasetInternalServerError{}
}

// WithPayload adds the payload to the create dataset internal server error response
func (o *CreateDatasetInternalServerError) WithPayload(payload *models.ErrorResponse) *CreateDatasetInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create dataset internal server error response
func (o *CreateDatasetInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateDatasetInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateDatasetBadGatewayCode is the HTTP code returned for type CreateDatasetBadGateway
const CreateDatasetBadGatewayCode int = 502

/*CreateDatasetBadGateway Bad Gateway

swagger:response createDatasetBadGateway
*/
type CreateDatasetBadGateway struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCreateDatasetBadGateway creates CreateDatasetBadGateway with default headers values
func NewCreateDatasetBadGateway() *CreateDatasetBadGateway {

	return &CreateDatasetBadGateway{}
}

// WithPayload adds the payload to the create dataset bad gateway response
func (o *CreateDatasetBadGateway) WithPayload(payload *models.ErrorResponse) *CreateDatasetBadGateway {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create dataset bad gateway response
func (o *CreateDatasetBadGateway) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateDatasetBadGateway) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(502)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateDatasetServiceUnavailableCode is the HTTP code returned for type CreateDatasetServiceUnavailable
const CreateDatasetServiceUnavailableCode int = 503

/*CreateDatasetServiceUnavailable unexpected error

swagger:response createDatasetServiceUnavailable
*/
type CreateDatasetServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCreateDatasetServiceUnavailable creates CreateDatasetServiceUnavailable with default headers values
func NewCreateDatasetServiceUnavailable() *CreateDatasetServiceUnavailable {

	return &CreateDatasetServiceUnavailable{}
}

// WithPayload adds the payload to the create dataset service unavailable response
func (o *CreateDatasetServiceUnavailable) WithPayload(payload *models.ErrorResponse) *CreateDatasetServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create dataset service unavailable response
func (o *CreateDatasetServiceUnavailable) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateDatasetServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

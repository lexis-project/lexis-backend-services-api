// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// DownloadDatasetHandlerFunc turns a function with the right signature into a download dataset handler
type DownloadDatasetHandlerFunc func(DownloadDatasetParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn DownloadDatasetHandlerFunc) Handle(params DownloadDatasetParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// DownloadDatasetHandler interface for that can handle valid download dataset params
type DownloadDatasetHandler interface {
	Handle(DownloadDatasetParams, interface{}) middleware.Responder
}

// NewDownloadDataset creates a new http.Handler for the download dataset operation
func NewDownloadDataset(ctx *middleware.Context, handler DownloadDatasetHandler) *DownloadDataset {
	return &DownloadDataset{Context: ctx, Handler: handler}
}

/*DownloadDataset swagger:route POST /dataset/download dataSetManagement downloadDataset

DownloadDataset

Downloads a dataset. Use the header "Accept: application/octet-stream"
or "Accept: [*]/*" to enable the api to provide either zip content (normal
operation) or json (error reporting).


*/
type DownloadDataset struct {
	Context *middleware.Context
	Handler DownloadDatasetHandler
}

func (o *DownloadDataset) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDownloadDatasetParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DownloadDatasetBody download dataset body
//
// swagger:model DownloadDatasetBody
type DownloadDatasetBody struct {

	// access
	// Required: true
	Access models.AccessMode `json:"access"`

	// archivetype
	Archivetype models.ArchiveType `json:"archivetype,omitempty"`

	// internal ID
	// Required: true
	InternalID *string `json:"internalID"`

	// path within the dataset, without a starting slash. An empty
	// string pushes to the root of the dataset (i.e. inside the
	// directory named <internalID> in the iRODS backend).
	//
	Path string `json:"path,omitempty"`

	// project
	// Required: true
	Project *string `json:"project"`

	// push method
	// Enum: [directupload]
	PushMethod string `json:"push_method,omitempty"`

	// zone
	Zone string `json:"zone,omitempty"`
}

// Validate validates this download dataset body
func (o *DownloadDatasetBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateArchivetype(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInternalID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePushMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DownloadDatasetBody) validateAccess(formats strfmt.Registry) error {

	if err := o.Access.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("json" + "." + "access")
		}
		return err
	}

	return nil
}

func (o *DownloadDatasetBody) validateArchivetype(formats strfmt.Registry) error {

	if swag.IsZero(o.Archivetype) { // not required
		return nil
	}

	if err := o.Archivetype.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("json" + "." + "archivetype")
		}
		return err
	}

	return nil
}

func (o *DownloadDatasetBody) validateInternalID(formats strfmt.Registry) error {

	if err := validate.Required("json"+"."+"internalID", "body", o.InternalID); err != nil {
		return err
	}

	return nil
}

func (o *DownloadDatasetBody) validateProject(formats strfmt.Registry) error {

	if err := validate.Required("json"+"."+"project", "body", o.Project); err != nil {
		return err
	}

	return nil
}

var downloadDatasetBodyTypePushMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["directupload"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		downloadDatasetBodyTypePushMethodPropEnum = append(downloadDatasetBodyTypePushMethodPropEnum, v)
	}
}

const (

	// DownloadDatasetBodyPushMethodDirectupload captures enum value "directupload"
	DownloadDatasetBodyPushMethodDirectupload string = "directupload"
)

// prop value enum
func (o *DownloadDatasetBody) validatePushMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, downloadDatasetBodyTypePushMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *DownloadDatasetBody) validatePushMethod(formats strfmt.Registry) error {

	if swag.IsZero(o.PushMethod) { // not required
		return nil
	}

	// value enum
	if err := o.validatePushMethodEnum("json"+"."+"push_method", "body", o.PushMethod); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DownloadDatasetBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DownloadDatasetBody) UnmarshalBinary(b []byte) error {
	var res DownloadDatasetBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

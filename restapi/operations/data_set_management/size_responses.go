// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// SizeCreatedCode is the HTTP code returned for type SizeCreated
const SizeCreatedCode int = 201

/*SizeCreated This is called when a user requests size of a dataset.

swagger:response sizeCreated
*/
type SizeCreated struct {

	/*
	  In: Body
	*/
	Payload *models.SteeringRequestID `json:"body,omitempty"`
}

// NewSizeCreated creates SizeCreated with default headers values
func NewSizeCreated() *SizeCreated {

	return &SizeCreated{}
}

// WithPayload adds the payload to the size created response
func (o *SizeCreated) WithPayload(payload *models.SteeringRequestID) *SizeCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the size created response
func (o *SizeCreated) SetPayload(payload *models.SteeringRequestID) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SizeCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SizeBadRequestCode is the HTTP code returned for type SizeBadRequest
const SizeBadRequestCode int = 400

/*SizeBadRequest This means that there's something wrong in the input parameters and the server couldn't understand the request.

swagger:response sizeBadRequest
*/
type SizeBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewSizeBadRequest creates SizeBadRequest with default headers values
func NewSizeBadRequest() *SizeBadRequest {

	return &SizeBadRequest{}
}

// WithPayload adds the payload to the size bad request response
func (o *SizeBadRequest) WithPayload(payload *models.ErrorResponse) *SizeBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the size bad request response
func (o *SizeBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SizeBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SizeUnauthorizedCode is the HTTP code returned for type SizeUnauthorized
const SizeUnauthorizedCode int = 401

/*SizeUnauthorized This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user

swagger:response sizeUnauthorized
*/
type SizeUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewSizeUnauthorized creates SizeUnauthorized with default headers values
func NewSizeUnauthorized() *SizeUnauthorized {

	return &SizeUnauthorized{}
}

// WithPayload adds the payload to the size unauthorized response
func (o *SizeUnauthorized) WithPayload(payload *models.ErrorResponse) *SizeUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the size unauthorized response
func (o *SizeUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SizeUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SizeForbiddenCode is the HTTP code returned for type SizeForbidden
const SizeForbiddenCode int = 403

/*SizeForbidden This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.

swagger:response sizeForbidden
*/
type SizeForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewSizeForbidden creates SizeForbidden with default headers values
func NewSizeForbidden() *SizeForbidden {

	return &SizeForbidden{}
}

// WithPayload adds the payload to the size forbidden response
func (o *SizeForbidden) WithPayload(payload *models.ErrorResponse) *SizeForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the size forbidden response
func (o *SizeForbidden) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SizeForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SizeNotFoundCode is the HTTP code returned for type SizeNotFound
const SizeNotFoundCode int = 404

/*SizeNotFound This means that either the source path or the the target path on the system doesn't exist.

swagger:response sizeNotFound
*/
type SizeNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewSizeNotFound creates SizeNotFound with default headers values
func NewSizeNotFound() *SizeNotFound {

	return &SizeNotFound{}
}

// WithPayload adds the payload to the size not found response
func (o *SizeNotFound) WithPayload(payload *models.ErrorResponse) *SizeNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the size not found response
func (o *SizeNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SizeNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SizeRequestURITooLongCode is the HTTP code returned for type SizeRequestURITooLong
const SizeRequestURITooLongCode int = 414

/*SizeRequestURITooLong This means that the either the source path or the target path is longer than the server is willing to interpret.

swagger:response sizeRequestUriTooLong
*/
type SizeRequestURITooLong struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewSizeRequestURITooLong creates SizeRequestURITooLong with default headers values
func NewSizeRequestURITooLong() *SizeRequestURITooLong {

	return &SizeRequestURITooLong{}
}

// WithPayload adds the payload to the size request Uri too long response
func (o *SizeRequestURITooLong) WithPayload(payload *models.ErrorResponse) *SizeRequestURITooLong {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the size request Uri too long response
func (o *SizeRequestURITooLong) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SizeRequestURITooLong) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(414)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SizeTooManyRequestsCode is the HTTP code returned for type SizeTooManyRequests
const SizeTooManyRequestsCode int = 429

/*SizeTooManyRequests This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.

swagger:response sizeTooManyRequests
*/
type SizeTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewSizeTooManyRequests creates SizeTooManyRequests with default headers values
func NewSizeTooManyRequests() *SizeTooManyRequests {

	return &SizeTooManyRequests{}
}

// WithPayload adds the payload to the size too many requests response
func (o *SizeTooManyRequests) WithPayload(payload *models.ErrorResponse) *SizeTooManyRequests {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the size too many requests response
func (o *SizeTooManyRequests) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SizeTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(429)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SizeInternalServerErrorCode is the HTTP code returned for type SizeInternalServerError
const SizeInternalServerErrorCode int = 500

/*SizeInternalServerError This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.

swagger:response sizeInternalServerError
*/
type SizeInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewSizeInternalServerError creates SizeInternalServerError with default headers values
func NewSizeInternalServerError() *SizeInternalServerError {

	return &SizeInternalServerError{}
}

// WithPayload adds the payload to the size internal server error response
func (o *SizeInternalServerError) WithPayload(payload *models.ErrorResponse) *SizeInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the size internal server error response
func (o *SizeInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SizeInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

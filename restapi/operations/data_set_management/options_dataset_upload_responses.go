// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// OptionsDatasetUploadOKCode is the HTTP code returned for type OptionsDatasetUploadOK
const OptionsDatasetUploadOKCode int = 200

/*OptionsDatasetUploadOK Success

swagger:response optionsDatasetUploadOK
*/
type OptionsDatasetUploadOK struct {
	/*Needed to make browsers accept the additional headers used by
	the tus protocol.


	*/
	AccessControlExposeHeaders string `json:"Access-Control-Expose-Headers"`
	/*Added by the checksum extension. The Tus-Checksum-Algorithm response header MUST be a comma-separated list of the checksum algorithms supported by the server.

	 */
	TusChecksumAlgorithm string `json:"Tus-Checksum-Algorithm"`
	/*The Tus-Extension response header MUST be a comma-separated list of the extensions supported by the Server. If no extensions are supported, the Tus-Extension header MUST be omitted.

	 */
	TusExtension string `json:"Tus-Extension"`
	/*The Tus-Max-Size response header MUST be a non-negative integer indicating the maximum allowed size of an entire upload in bytes. The Server SHOULD set this header if there is a known hard limit.

	 */
	TusMaxSize int64 `json:"Tus-Max-Size"`
	/*Protocol version

	 */
	TusResumable string `json:"Tus-Resumable"`
	/*The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one.

	 */
	TusVersion string `json:"Tus-Version"`
}

// NewOptionsDatasetUploadOK creates OptionsDatasetUploadOK with default headers values
func NewOptionsDatasetUploadOK() *OptionsDatasetUploadOK {

	return &OptionsDatasetUploadOK{}
}

// WithAccessControlExposeHeaders adds the accessControlExposeHeaders to the options dataset upload o k response
func (o *OptionsDatasetUploadOK) WithAccessControlExposeHeaders(accessControlExposeHeaders string) *OptionsDatasetUploadOK {
	o.AccessControlExposeHeaders = accessControlExposeHeaders
	return o
}

// SetAccessControlExposeHeaders sets the accessControlExposeHeaders to the options dataset upload o k response
func (o *OptionsDatasetUploadOK) SetAccessControlExposeHeaders(accessControlExposeHeaders string) {
	o.AccessControlExposeHeaders = accessControlExposeHeaders
}

// WithTusChecksumAlgorithm adds the tusChecksumAlgorithm to the options dataset upload o k response
func (o *OptionsDatasetUploadOK) WithTusChecksumAlgorithm(tusChecksumAlgorithm string) *OptionsDatasetUploadOK {
	o.TusChecksumAlgorithm = tusChecksumAlgorithm
	return o
}

// SetTusChecksumAlgorithm sets the tusChecksumAlgorithm to the options dataset upload o k response
func (o *OptionsDatasetUploadOK) SetTusChecksumAlgorithm(tusChecksumAlgorithm string) {
	o.TusChecksumAlgorithm = tusChecksumAlgorithm
}

// WithTusExtension adds the tusExtension to the options dataset upload o k response
func (o *OptionsDatasetUploadOK) WithTusExtension(tusExtension string) *OptionsDatasetUploadOK {
	o.TusExtension = tusExtension
	return o
}

// SetTusExtension sets the tusExtension to the options dataset upload o k response
func (o *OptionsDatasetUploadOK) SetTusExtension(tusExtension string) {
	o.TusExtension = tusExtension
}

// WithTusMaxSize adds the tusMaxSize to the options dataset upload o k response
func (o *OptionsDatasetUploadOK) WithTusMaxSize(tusMaxSize int64) *OptionsDatasetUploadOK {
	o.TusMaxSize = tusMaxSize
	return o
}

// SetTusMaxSize sets the tusMaxSize to the options dataset upload o k response
func (o *OptionsDatasetUploadOK) SetTusMaxSize(tusMaxSize int64) {
	o.TusMaxSize = tusMaxSize
}

// WithTusResumable adds the tusResumable to the options dataset upload o k response
func (o *OptionsDatasetUploadOK) WithTusResumable(tusResumable string) *OptionsDatasetUploadOK {
	o.TusResumable = tusResumable
	return o
}

// SetTusResumable sets the tusResumable to the options dataset upload o k response
func (o *OptionsDatasetUploadOK) SetTusResumable(tusResumable string) {
	o.TusResumable = tusResumable
}

// WithTusVersion adds the tusVersion to the options dataset upload o k response
func (o *OptionsDatasetUploadOK) WithTusVersion(tusVersion string) *OptionsDatasetUploadOK {
	o.TusVersion = tusVersion
	return o
}

// SetTusVersion sets the tusVersion to the options dataset upload o k response
func (o *OptionsDatasetUploadOK) SetTusVersion(tusVersion string) {
	o.TusVersion = tusVersion
}

// WriteResponse to the client
func (o *OptionsDatasetUploadOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Access-Control-Expose-Headers

	accessControlExposeHeaders := o.AccessControlExposeHeaders
	if accessControlExposeHeaders != "" {
		rw.Header().Set("Access-Control-Expose-Headers", accessControlExposeHeaders)
	}

	// response header Tus-Checksum-Algorithm

	tusChecksumAlgorithm := o.TusChecksumAlgorithm
	if tusChecksumAlgorithm != "" {
		rw.Header().Set("Tus-Checksum-Algorithm", tusChecksumAlgorithm)
	}

	// response header Tus-Extension

	tusExtension := o.TusExtension
	if tusExtension != "" {
		rw.Header().Set("Tus-Extension", tusExtension)
	}

	// response header Tus-Max-Size

	tusMaxSize := swag.FormatInt64(o.TusMaxSize)
	if tusMaxSize != "" {
		rw.Header().Set("Tus-Max-Size", tusMaxSize)
	}

	// response header Tus-Resumable

	tusResumable := o.TusResumable
	if tusResumable != "" {
		rw.Header().Set("Tus-Resumable", tusResumable)
	}

	// response header Tus-Version

	tusVersion := o.TusVersion
	if tusVersion != "" {
		rw.Header().Set("Tus-Version", tusVersion)
	}

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// OptionsDatasetUploadNoContentCode is the HTTP code returned for type OptionsDatasetUploadNoContent
const OptionsDatasetUploadNoContentCode int = 204

/*OptionsDatasetUploadNoContent Success

swagger:response optionsDatasetUploadNoContent
*/
type OptionsDatasetUploadNoContent struct {
	/*Needed to make browsers accept the additional headers used by
	the tus protocol.


	*/
	AccessControlExposeHeaders string `json:"Access-Control-Expose-Headers"`
	/*Added by the checksum extension. The Tus-Checksum-Algorithm response header MUST be a comma-separated list of the checksum algorithms supported by the server.

	 */
	TusChecksumAlgorithm string `json:"Tus-Checksum-Algorithm"`
	/*The Tus-Extension response header MUST be a comma-separated list of the extensions supported by the Server. If no extensions are supported, the Tus-Extension header MUST be omitted.

	 */
	TusExtension string `json:"Tus-Extension"`
	/*The Tus-Max-Size response header MUST be a non-negative integer indicating the maximum allowed size of an entire upload in bytes. The Server SHOULD set this header if there is a known hard limit.

	 */
	TusMaxSize int64 `json:"Tus-Max-Size"`
	/*

	 */
	TusResumable string `json:"Tus-Resumable"`
	/*The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one.

	 */
	TusVersion string `json:"Tus-Version"`
}

// NewOptionsDatasetUploadNoContent creates OptionsDatasetUploadNoContent with default headers values
func NewOptionsDatasetUploadNoContent() *OptionsDatasetUploadNoContent {

	return &OptionsDatasetUploadNoContent{}
}

// WithAccessControlExposeHeaders adds the accessControlExposeHeaders to the options dataset upload no content response
func (o *OptionsDatasetUploadNoContent) WithAccessControlExposeHeaders(accessControlExposeHeaders string) *OptionsDatasetUploadNoContent {
	o.AccessControlExposeHeaders = accessControlExposeHeaders
	return o
}

// SetAccessControlExposeHeaders sets the accessControlExposeHeaders to the options dataset upload no content response
func (o *OptionsDatasetUploadNoContent) SetAccessControlExposeHeaders(accessControlExposeHeaders string) {
	o.AccessControlExposeHeaders = accessControlExposeHeaders
}

// WithTusChecksumAlgorithm adds the tusChecksumAlgorithm to the options dataset upload no content response
func (o *OptionsDatasetUploadNoContent) WithTusChecksumAlgorithm(tusChecksumAlgorithm string) *OptionsDatasetUploadNoContent {
	o.TusChecksumAlgorithm = tusChecksumAlgorithm
	return o
}

// SetTusChecksumAlgorithm sets the tusChecksumAlgorithm to the options dataset upload no content response
func (o *OptionsDatasetUploadNoContent) SetTusChecksumAlgorithm(tusChecksumAlgorithm string) {
	o.TusChecksumAlgorithm = tusChecksumAlgorithm
}

// WithTusExtension adds the tusExtension to the options dataset upload no content response
func (o *OptionsDatasetUploadNoContent) WithTusExtension(tusExtension string) *OptionsDatasetUploadNoContent {
	o.TusExtension = tusExtension
	return o
}

// SetTusExtension sets the tusExtension to the options dataset upload no content response
func (o *OptionsDatasetUploadNoContent) SetTusExtension(tusExtension string) {
	o.TusExtension = tusExtension
}

// WithTusMaxSize adds the tusMaxSize to the options dataset upload no content response
func (o *OptionsDatasetUploadNoContent) WithTusMaxSize(tusMaxSize int64) *OptionsDatasetUploadNoContent {
	o.TusMaxSize = tusMaxSize
	return o
}

// SetTusMaxSize sets the tusMaxSize to the options dataset upload no content response
func (o *OptionsDatasetUploadNoContent) SetTusMaxSize(tusMaxSize int64) {
	o.TusMaxSize = tusMaxSize
}

// WithTusResumable adds the tusResumable to the options dataset upload no content response
func (o *OptionsDatasetUploadNoContent) WithTusResumable(tusResumable string) *OptionsDatasetUploadNoContent {
	o.TusResumable = tusResumable
	return o
}

// SetTusResumable sets the tusResumable to the options dataset upload no content response
func (o *OptionsDatasetUploadNoContent) SetTusResumable(tusResumable string) {
	o.TusResumable = tusResumable
}

// WithTusVersion adds the tusVersion to the options dataset upload no content response
func (o *OptionsDatasetUploadNoContent) WithTusVersion(tusVersion string) *OptionsDatasetUploadNoContent {
	o.TusVersion = tusVersion
	return o
}

// SetTusVersion sets the tusVersion to the options dataset upload no content response
func (o *OptionsDatasetUploadNoContent) SetTusVersion(tusVersion string) {
	o.TusVersion = tusVersion
}

// WriteResponse to the client
func (o *OptionsDatasetUploadNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Access-Control-Expose-Headers

	accessControlExposeHeaders := o.AccessControlExposeHeaders
	if accessControlExposeHeaders != "" {
		rw.Header().Set("Access-Control-Expose-Headers", accessControlExposeHeaders)
	}

	// response header Tus-Checksum-Algorithm

	tusChecksumAlgorithm := o.TusChecksumAlgorithm
	if tusChecksumAlgorithm != "" {
		rw.Header().Set("Tus-Checksum-Algorithm", tusChecksumAlgorithm)
	}

	// response header Tus-Extension

	tusExtension := o.TusExtension
	if tusExtension != "" {
		rw.Header().Set("Tus-Extension", tusExtension)
	}

	// response header Tus-Max-Size

	tusMaxSize := swag.FormatInt64(o.TusMaxSize)
	if tusMaxSize != "" {
		rw.Header().Set("Tus-Max-Size", tusMaxSize)
	}

	// response header Tus-Resumable

	tusResumable := o.TusResumable
	if tusResumable != "" {
		rw.Header().Set("Tus-Resumable", tusResumable)
	}

	// response header Tus-Version

	tusVersion := o.TusVersion
	if tusVersion != "" {
		rw.Header().Set("Tus-Version", tusVersion)
	}

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// OptionsDatasetUploadUnauthorizedCode is the HTTP code returned for type OptionsDatasetUploadUnauthorized
const OptionsDatasetUploadUnauthorizedCode int = 401

/*OptionsDatasetUploadUnauthorized Authorization failed

swagger:response optionsDatasetUploadUnauthorized
*/
type OptionsDatasetUploadUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewOptionsDatasetUploadUnauthorized creates OptionsDatasetUploadUnauthorized with default headers values
func NewOptionsDatasetUploadUnauthorized() *OptionsDatasetUploadUnauthorized {

	return &OptionsDatasetUploadUnauthorized{}
}

// WithPayload adds the payload to the options dataset upload unauthorized response
func (o *OptionsDatasetUploadUnauthorized) WithPayload(payload *models.ErrorResponse) *OptionsDatasetUploadUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the options dataset upload unauthorized response
func (o *OptionsDatasetUploadUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *OptionsDatasetUploadUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// OptionsDatasetUploadServiceUnavailableCode is the HTTP code returned for type OptionsDatasetUploadServiceUnavailable
const OptionsDatasetUploadServiceUnavailableCode int = 503

/*OptionsDatasetUploadServiceUnavailable Service Unavailable

swagger:response optionsDatasetUploadServiceUnavailable
*/
type OptionsDatasetUploadServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewOptionsDatasetUploadServiceUnavailable creates OptionsDatasetUploadServiceUnavailable with default headers values
func NewOptionsDatasetUploadServiceUnavailable() *OptionsDatasetUploadServiceUnavailable {

	return &OptionsDatasetUploadServiceUnavailable{}
}

// WithPayload adds the payload to the options dataset upload service unavailable response
func (o *OptionsDatasetUploadServiceUnavailable) WithPayload(payload *models.ErrorResponse) *OptionsDatasetUploadServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the options dataset upload service unavailable response
func (o *OptionsDatasetUploadServiceUnavailable) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *OptionsDatasetUploadServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

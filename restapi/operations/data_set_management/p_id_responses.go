// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// PIDCreatedCode is the HTTP code returned for type PIDCreated
const PIDCreatedCode int = 201

/*PIDCreated This is called when a user requests PID assignment to a dataset.

swagger:response pIdCreated
*/
type PIDCreated struct {

	/*
	  In: Body
	*/
	Payload *models.SteeringRequestID `json:"body,omitempty"`
}

// NewPIDCreated creates PIDCreated with default headers values
func NewPIDCreated() *PIDCreated {

	return &PIDCreated{}
}

// WithPayload adds the payload to the p Id created response
func (o *PIDCreated) WithPayload(payload *models.SteeringRequestID) *PIDCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the p Id created response
func (o *PIDCreated) SetPayload(payload *models.SteeringRequestID) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PIDCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PIDBadRequestCode is the HTTP code returned for type PIDBadRequest
const PIDBadRequestCode int = 400

/*PIDBadRequest This means that there's something wrong in the input parameters and the server couldn't understand the request.

swagger:response pIdBadRequest
*/
type PIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewPIDBadRequest creates PIDBadRequest with default headers values
func NewPIDBadRequest() *PIDBadRequest {

	return &PIDBadRequest{}
}

// WithPayload adds the payload to the p Id bad request response
func (o *PIDBadRequest) WithPayload(payload *models.ErrorResponse) *PIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the p Id bad request response
func (o *PIDBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PIDUnauthorizedCode is the HTTP code returned for type PIDUnauthorized
const PIDUnauthorizedCode int = 401

/*PIDUnauthorized This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user

swagger:response pIdUnauthorized
*/
type PIDUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewPIDUnauthorized creates PIDUnauthorized with default headers values
func NewPIDUnauthorized() *PIDUnauthorized {

	return &PIDUnauthorized{}
}

// WithPayload adds the payload to the p Id unauthorized response
func (o *PIDUnauthorized) WithPayload(payload *models.ErrorResponse) *PIDUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the p Id unauthorized response
func (o *PIDUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PIDUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PIDForbiddenCode is the HTTP code returned for type PIDForbidden
const PIDForbiddenCode int = 403

/*PIDForbidden This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.

swagger:response pIdForbidden
*/
type PIDForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewPIDForbidden creates PIDForbidden with default headers values
func NewPIDForbidden() *PIDForbidden {

	return &PIDForbidden{}
}

// WithPayload adds the payload to the p Id forbidden response
func (o *PIDForbidden) WithPayload(payload *models.ErrorResponse) *PIDForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the p Id forbidden response
func (o *PIDForbidden) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PIDForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PIDNotFoundCode is the HTTP code returned for type PIDNotFound
const PIDNotFoundCode int = 404

/*PIDNotFound This means that either the source path or the the target path on the system doesn't exist.

swagger:response pIdNotFound
*/
type PIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewPIDNotFound creates PIDNotFound with default headers values
func NewPIDNotFound() *PIDNotFound {

	return &PIDNotFound{}
}

// WithPayload adds the payload to the p Id not found response
func (o *PIDNotFound) WithPayload(payload *models.ErrorResponse) *PIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the p Id not found response
func (o *PIDNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PIDRequestURITooLongCode is the HTTP code returned for type PIDRequestURITooLong
const PIDRequestURITooLongCode int = 414

/*PIDRequestURITooLong This means that the either the source path or the target path is longer than the server is willing to interpret.

swagger:response pIdRequestUriTooLong
*/
type PIDRequestURITooLong struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewPIDRequestURITooLong creates PIDRequestURITooLong with default headers values
func NewPIDRequestURITooLong() *PIDRequestURITooLong {

	return &PIDRequestURITooLong{}
}

// WithPayload adds the payload to the p Id request Uri too long response
func (o *PIDRequestURITooLong) WithPayload(payload *models.ErrorResponse) *PIDRequestURITooLong {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the p Id request Uri too long response
func (o *PIDRequestURITooLong) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PIDRequestURITooLong) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(414)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PIDTooManyRequestsCode is the HTTP code returned for type PIDTooManyRequests
const PIDTooManyRequestsCode int = 429

/*PIDTooManyRequests This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.

swagger:response pIdTooManyRequests
*/
type PIDTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewPIDTooManyRequests creates PIDTooManyRequests with default headers values
func NewPIDTooManyRequests() *PIDTooManyRequests {

	return &PIDTooManyRequests{}
}

// WithPayload adds the payload to the p Id too many requests response
func (o *PIDTooManyRequests) WithPayload(payload *models.ErrorResponse) *PIDTooManyRequests {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the p Id too many requests response
func (o *PIDTooManyRequests) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PIDTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(429)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PIDInternalServerErrorCode is the HTTP code returned for type PIDInternalServerError
const PIDInternalServerErrorCode int = 500

/*PIDInternalServerError This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.

swagger:response pIdInternalServerError
*/
type PIDInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewPIDInternalServerError creates PIDInternalServerError with default headers values
func NewPIDInternalServerError() *PIDInternalServerError {

	return &PIDInternalServerError{}
}

// WithPayload adds the payload to the p Id internal server error response
func (o *PIDInternalServerError) WithPayload(payload *models.ErrorResponse) *PIDInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the p Id internal server error response
func (o *PIDInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PIDInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

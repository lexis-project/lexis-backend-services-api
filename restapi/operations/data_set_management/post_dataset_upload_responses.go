// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// PostDatasetUploadCreatedCode is the HTTP code returned for type PostDatasetUploadCreated
const PostDatasetUploadCreatedCode int = 201

/*PostDatasetUploadCreated Created

swagger:response postDatasetUploadCreated
*/
type PostDatasetUploadCreated struct {
	/*Needed to make browsers accept the additional headers used by
	the tus protocol.


	*/
	AccessControlExposeHeaders string `json:"Access-Control-Expose-Headers"`
	/*Url of the created resource.

	 */
	Location string `json:"Location"`
	/*

	 */
	TusResumable string `json:"Tus-Resumable"`
	/*Added by the Creation With Upload Extension in combination with the expiration extension. The Upload-Expires response header indicates the time after which the unfinished upload expires. A Server MAY wish to remove incomplete uploads after a given period of time to prevent abandoned uploads from taking up extra storage. The Client SHOULD use this header to determine if an upload is still valid before attempting to resume the upload. This header MUST be included in every PATCH response if the upload is going to expire. If the expiration is known at the creation, the Upload-Expires header MUST be included in the response to the initial POST request. Its value MAY change over time. If a Client does attempt to resume an upload which has since been removed by the Server, the Server SHOULD respond with the 404 Not Found or 410 Gone status. The latter one SHOULD be used if the Server is keeping track of expired uploads. In both cases the Client SHOULD start a new upload. The value of the Upload-Expires header MUST be in RFC 7231 datetime format.

	 */
	UploadExpires string `json:"Upload-Expires"`
	/*Added by the Creation With Upload Extension. The Upload-Offset request and response header indicates a byte offset within a resource. The value MUST be a non-negative integer.

	 */
	UploadOffset int64 `json:"Upload-Offset"`
}

// NewPostDatasetUploadCreated creates PostDatasetUploadCreated with default headers values
func NewPostDatasetUploadCreated() *PostDatasetUploadCreated {

	return &PostDatasetUploadCreated{}
}

// WithAccessControlExposeHeaders adds the accessControlExposeHeaders to the post dataset upload created response
func (o *PostDatasetUploadCreated) WithAccessControlExposeHeaders(accessControlExposeHeaders string) *PostDatasetUploadCreated {
	o.AccessControlExposeHeaders = accessControlExposeHeaders
	return o
}

// SetAccessControlExposeHeaders sets the accessControlExposeHeaders to the post dataset upload created response
func (o *PostDatasetUploadCreated) SetAccessControlExposeHeaders(accessControlExposeHeaders string) {
	o.AccessControlExposeHeaders = accessControlExposeHeaders
}

// WithLocation adds the location to the post dataset upload created response
func (o *PostDatasetUploadCreated) WithLocation(location string) *PostDatasetUploadCreated {
	o.Location = location
	return o
}

// SetLocation sets the location to the post dataset upload created response
func (o *PostDatasetUploadCreated) SetLocation(location string) {
	o.Location = location
}

// WithTusResumable adds the tusResumable to the post dataset upload created response
func (o *PostDatasetUploadCreated) WithTusResumable(tusResumable string) *PostDatasetUploadCreated {
	o.TusResumable = tusResumable
	return o
}

// SetTusResumable sets the tusResumable to the post dataset upload created response
func (o *PostDatasetUploadCreated) SetTusResumable(tusResumable string) {
	o.TusResumable = tusResumable
}

// WithUploadExpires adds the uploadExpires to the post dataset upload created response
func (o *PostDatasetUploadCreated) WithUploadExpires(uploadExpires string) *PostDatasetUploadCreated {
	o.UploadExpires = uploadExpires
	return o
}

// SetUploadExpires sets the uploadExpires to the post dataset upload created response
func (o *PostDatasetUploadCreated) SetUploadExpires(uploadExpires string) {
	o.UploadExpires = uploadExpires
}

// WithUploadOffset adds the uploadOffset to the post dataset upload created response
func (o *PostDatasetUploadCreated) WithUploadOffset(uploadOffset int64) *PostDatasetUploadCreated {
	o.UploadOffset = uploadOffset
	return o
}

// SetUploadOffset sets the uploadOffset to the post dataset upload created response
func (o *PostDatasetUploadCreated) SetUploadOffset(uploadOffset int64) {
	o.UploadOffset = uploadOffset
}

// WriteResponse to the client
func (o *PostDatasetUploadCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Access-Control-Expose-Headers

	accessControlExposeHeaders := o.AccessControlExposeHeaders
	if accessControlExposeHeaders != "" {
		rw.Header().Set("Access-Control-Expose-Headers", accessControlExposeHeaders)
	}

	// response header Location

	location := o.Location
	if location != "" {
		rw.Header().Set("Location", location)
	}

	// response header Tus-Resumable

	tusResumable := o.TusResumable
	if tusResumable != "" {
		rw.Header().Set("Tus-Resumable", tusResumable)
	}

	// response header Upload-Expires

	uploadExpires := o.UploadExpires
	if uploadExpires != "" {
		rw.Header().Set("Upload-Expires", uploadExpires)
	}

	// response header Upload-Offset

	uploadOffset := swag.FormatInt64(o.UploadOffset)
	if uploadOffset != "" {
		rw.Header().Set("Upload-Offset", uploadOffset)
	}

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// PostDatasetUploadBadRequestCode is the HTTP code returned for type PostDatasetUploadBadRequest
const PostDatasetUploadBadRequestCode int = 400

/*PostDatasetUploadBadRequest Added by the Creation With Upload Extension in combination with the checksum extension. The checksum algorithm is not supported by the server

swagger:response postDatasetUploadBadRequest
*/
type PostDatasetUploadBadRequest struct {
	/*Needed to make browsers accept the additional headers used by
	the tus protocol.


	*/
	AccessControlExposeHeaders string `json:"Access-Control-Expose-Headers"`
	/*Protocol version

	 */
	TusResumable string `json:"Tus-Resumable"`
}

// NewPostDatasetUploadBadRequest creates PostDatasetUploadBadRequest with default headers values
func NewPostDatasetUploadBadRequest() *PostDatasetUploadBadRequest {

	return &PostDatasetUploadBadRequest{}
}

// WithAccessControlExposeHeaders adds the accessControlExposeHeaders to the post dataset upload bad request response
func (o *PostDatasetUploadBadRequest) WithAccessControlExposeHeaders(accessControlExposeHeaders string) *PostDatasetUploadBadRequest {
	o.AccessControlExposeHeaders = accessControlExposeHeaders
	return o
}

// SetAccessControlExposeHeaders sets the accessControlExposeHeaders to the post dataset upload bad request response
func (o *PostDatasetUploadBadRequest) SetAccessControlExposeHeaders(accessControlExposeHeaders string) {
	o.AccessControlExposeHeaders = accessControlExposeHeaders
}

// WithTusResumable adds the tusResumable to the post dataset upload bad request response
func (o *PostDatasetUploadBadRequest) WithTusResumable(tusResumable string) *PostDatasetUploadBadRequest {
	o.TusResumable = tusResumable
	return o
}

// SetTusResumable sets the tusResumable to the post dataset upload bad request response
func (o *PostDatasetUploadBadRequest) SetTusResumable(tusResumable string) {
	o.TusResumable = tusResumable
}

// WriteResponse to the client
func (o *PostDatasetUploadBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Access-Control-Expose-Headers

	accessControlExposeHeaders := o.AccessControlExposeHeaders
	if accessControlExposeHeaders != "" {
		rw.Header().Set("Access-Control-Expose-Headers", accessControlExposeHeaders)
	}

	// response header Tus-Resumable

	tusResumable := o.TusResumable
	if tusResumable != "" {
		rw.Header().Set("Tus-Resumable", tusResumable)
	}

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}

// PostDatasetUploadUnauthorizedCode is the HTTP code returned for type PostDatasetUploadUnauthorized
const PostDatasetUploadUnauthorizedCode int = 401

/*PostDatasetUploadUnauthorized Authorization failed

swagger:response postDatasetUploadUnauthorized
*/
type PostDatasetUploadUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewPostDatasetUploadUnauthorized creates PostDatasetUploadUnauthorized with default headers values
func NewPostDatasetUploadUnauthorized() *PostDatasetUploadUnauthorized {

	return &PostDatasetUploadUnauthorized{}
}

// WithPayload adds the payload to the post dataset upload unauthorized response
func (o *PostDatasetUploadUnauthorized) WithPayload(payload *models.ErrorResponse) *PostDatasetUploadUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post dataset upload unauthorized response
func (o *PostDatasetUploadUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostDatasetUploadUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostDatasetUploadPreconditionFailedCode is the HTTP code returned for type PostDatasetUploadPreconditionFailed
const PostDatasetUploadPreconditionFailedCode int = 412

/*PostDatasetUploadPreconditionFailed Precondition Failed

swagger:response postDatasetUploadPreconditionFailed
*/
type PostDatasetUploadPreconditionFailed struct {
	/*Needed to make browsers accept the additional headers used by
	the tus protocol.


	*/
	AccessControlExposeHeaders string `json:"Access-Control-Expose-Headers"`
	/*

	 */
	TusResumable string `json:"Tus-Resumable"`
	/*The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one.

	 */
	TusVersion string `json:"Tus-Version"`
}

// NewPostDatasetUploadPreconditionFailed creates PostDatasetUploadPreconditionFailed with default headers values
func NewPostDatasetUploadPreconditionFailed() *PostDatasetUploadPreconditionFailed {

	return &PostDatasetUploadPreconditionFailed{}
}

// WithAccessControlExposeHeaders adds the accessControlExposeHeaders to the post dataset upload precondition failed response
func (o *PostDatasetUploadPreconditionFailed) WithAccessControlExposeHeaders(accessControlExposeHeaders string) *PostDatasetUploadPreconditionFailed {
	o.AccessControlExposeHeaders = accessControlExposeHeaders
	return o
}

// SetAccessControlExposeHeaders sets the accessControlExposeHeaders to the post dataset upload precondition failed response
func (o *PostDatasetUploadPreconditionFailed) SetAccessControlExposeHeaders(accessControlExposeHeaders string) {
	o.AccessControlExposeHeaders = accessControlExposeHeaders
}

// WithTusResumable adds the tusResumable to the post dataset upload precondition failed response
func (o *PostDatasetUploadPreconditionFailed) WithTusResumable(tusResumable string) *PostDatasetUploadPreconditionFailed {
	o.TusResumable = tusResumable
	return o
}

// SetTusResumable sets the tusResumable to the post dataset upload precondition failed response
func (o *PostDatasetUploadPreconditionFailed) SetTusResumable(tusResumable string) {
	o.TusResumable = tusResumable
}

// WithTusVersion adds the tusVersion to the post dataset upload precondition failed response
func (o *PostDatasetUploadPreconditionFailed) WithTusVersion(tusVersion string) *PostDatasetUploadPreconditionFailed {
	o.TusVersion = tusVersion
	return o
}

// SetTusVersion sets the tusVersion to the post dataset upload precondition failed response
func (o *PostDatasetUploadPreconditionFailed) SetTusVersion(tusVersion string) {
	o.TusVersion = tusVersion
}

// WriteResponse to the client
func (o *PostDatasetUploadPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Access-Control-Expose-Headers

	accessControlExposeHeaders := o.AccessControlExposeHeaders
	if accessControlExposeHeaders != "" {
		rw.Header().Set("Access-Control-Expose-Headers", accessControlExposeHeaders)
	}

	// response header Tus-Resumable

	tusResumable := o.TusResumable
	if tusResumable != "" {
		rw.Header().Set("Tus-Resumable", tusResumable)
	}

	// response header Tus-Version

	tusVersion := o.TusVersion
	if tusVersion != "" {
		rw.Header().Set("Tus-Version", tusVersion)
	}

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(412)
}

// PostDatasetUploadRequestEntityTooLargeCode is the HTTP code returned for type PostDatasetUploadRequestEntityTooLarge
const PostDatasetUploadRequestEntityTooLargeCode int = 413

/*PostDatasetUploadRequestEntityTooLarge If the length of the upload exceeds the maximum, which MAY be specified using the Tus-Max-Size header, the Server MUST respond with the 413 Request Entity Too Large status.

swagger:response postDatasetUploadRequestEntityTooLarge
*/
type PostDatasetUploadRequestEntityTooLarge struct {
	/*Needed to make browsers accept the additional headers used by
	the tus protocol.


	*/
	AccessControlExposeHeaders string `json:"Access-Control-Expose-Headers"`
	/*

	 */
	TusResumable string `json:"Tus-Resumable"`
}

// NewPostDatasetUploadRequestEntityTooLarge creates PostDatasetUploadRequestEntityTooLarge with default headers values
func NewPostDatasetUploadRequestEntityTooLarge() *PostDatasetUploadRequestEntityTooLarge {

	return &PostDatasetUploadRequestEntityTooLarge{}
}

// WithAccessControlExposeHeaders adds the accessControlExposeHeaders to the post dataset upload request entity too large response
func (o *PostDatasetUploadRequestEntityTooLarge) WithAccessControlExposeHeaders(accessControlExposeHeaders string) *PostDatasetUploadRequestEntityTooLarge {
	o.AccessControlExposeHeaders = accessControlExposeHeaders
	return o
}

// SetAccessControlExposeHeaders sets the accessControlExposeHeaders to the post dataset upload request entity too large response
func (o *PostDatasetUploadRequestEntityTooLarge) SetAccessControlExposeHeaders(accessControlExposeHeaders string) {
	o.AccessControlExposeHeaders = accessControlExposeHeaders
}

// WithTusResumable adds the tusResumable to the post dataset upload request entity too large response
func (o *PostDatasetUploadRequestEntityTooLarge) WithTusResumable(tusResumable string) *PostDatasetUploadRequestEntityTooLarge {
	o.TusResumable = tusResumable
	return o
}

// SetTusResumable sets the tusResumable to the post dataset upload request entity too large response
func (o *PostDatasetUploadRequestEntityTooLarge) SetTusResumable(tusResumable string) {
	o.TusResumable = tusResumable
}

// WriteResponse to the client
func (o *PostDatasetUploadRequestEntityTooLarge) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Access-Control-Expose-Headers

	accessControlExposeHeaders := o.AccessControlExposeHeaders
	if accessControlExposeHeaders != "" {
		rw.Header().Set("Access-Control-Expose-Headers", accessControlExposeHeaders)
	}

	// response header Tus-Resumable

	tusResumable := o.TusResumable
	if tusResumable != "" {
		rw.Header().Set("Tus-Resumable", tusResumable)
	}

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(413)
}

// PostDatasetUploadUnsupportedMediaTypeCode is the HTTP code returned for type PostDatasetUploadUnsupportedMediaType
const PostDatasetUploadUnsupportedMediaTypeCode int = 415

/*PostDatasetUploadUnsupportedMediaType Added by the Creation With Upload Extension. Content-Type was not application/offset+octet-stream

swagger:response postDatasetUploadUnsupportedMediaType
*/
type PostDatasetUploadUnsupportedMediaType struct {
	/*Needed to make browsers accept the additional headers used by
	the tus protocol.


	*/
	AccessControlExposeHeaders string `json:"Access-Control-Expose-Headers"`
	/*Protocol version

	 */
	TusResumable string `json:"Tus-Resumable"`
}

// NewPostDatasetUploadUnsupportedMediaType creates PostDatasetUploadUnsupportedMediaType with default headers values
func NewPostDatasetUploadUnsupportedMediaType() *PostDatasetUploadUnsupportedMediaType {

	return &PostDatasetUploadUnsupportedMediaType{}
}

// WithAccessControlExposeHeaders adds the accessControlExposeHeaders to the post dataset upload unsupported media type response
func (o *PostDatasetUploadUnsupportedMediaType) WithAccessControlExposeHeaders(accessControlExposeHeaders string) *PostDatasetUploadUnsupportedMediaType {
	o.AccessControlExposeHeaders = accessControlExposeHeaders
	return o
}

// SetAccessControlExposeHeaders sets the accessControlExposeHeaders to the post dataset upload unsupported media type response
func (o *PostDatasetUploadUnsupportedMediaType) SetAccessControlExposeHeaders(accessControlExposeHeaders string) {
	o.AccessControlExposeHeaders = accessControlExposeHeaders
}

// WithTusResumable adds the tusResumable to the post dataset upload unsupported media type response
func (o *PostDatasetUploadUnsupportedMediaType) WithTusResumable(tusResumable string) *PostDatasetUploadUnsupportedMediaType {
	o.TusResumable = tusResumable
	return o
}

// SetTusResumable sets the tusResumable to the post dataset upload unsupported media type response
func (o *PostDatasetUploadUnsupportedMediaType) SetTusResumable(tusResumable string) {
	o.TusResumable = tusResumable
}

// WriteResponse to the client
func (o *PostDatasetUploadUnsupportedMediaType) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Access-Control-Expose-Headers

	accessControlExposeHeaders := o.AccessControlExposeHeaders
	if accessControlExposeHeaders != "" {
		rw.Header().Set("Access-Control-Expose-Headers", accessControlExposeHeaders)
	}

	// response header Tus-Resumable

	tusResumable := o.TusResumable
	if tusResumable != "" {
		rw.Header().Set("Tus-Resumable", tusResumable)
	}

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(415)
}

// PostDatasetUploadStatus460Code is the HTTP code returned for type PostDatasetUploadStatus460
const PostDatasetUploadStatus460Code int = 460

/*PostDatasetUploadStatus460 Added by the Creation With Upload Extension in combination with the checksum extension. Checksums mismatch

swagger:response postDatasetUploadStatus460
*/
type PostDatasetUploadStatus460 struct {
	/*Needed to make browsers accept the additional headers used by
	the tus protocol.


	*/
	AccessControlExposeHeaders string `json:"Access-Control-Expose-Headers"`
	/*Protocol version

	 */
	TusResumable string `json:"Tus-Resumable"`
}

// NewPostDatasetUploadStatus460 creates PostDatasetUploadStatus460 with default headers values
func NewPostDatasetUploadStatus460() *PostDatasetUploadStatus460 {

	return &PostDatasetUploadStatus460{}
}

// WithAccessControlExposeHeaders adds the accessControlExposeHeaders to the post dataset upload status460 response
func (o *PostDatasetUploadStatus460) WithAccessControlExposeHeaders(accessControlExposeHeaders string) *PostDatasetUploadStatus460 {
	o.AccessControlExposeHeaders = accessControlExposeHeaders
	return o
}

// SetAccessControlExposeHeaders sets the accessControlExposeHeaders to the post dataset upload status460 response
func (o *PostDatasetUploadStatus460) SetAccessControlExposeHeaders(accessControlExposeHeaders string) {
	o.AccessControlExposeHeaders = accessControlExposeHeaders
}

// WithTusResumable adds the tusResumable to the post dataset upload status460 response
func (o *PostDatasetUploadStatus460) WithTusResumable(tusResumable string) *PostDatasetUploadStatus460 {
	o.TusResumable = tusResumable
	return o
}

// SetTusResumable sets the tusResumable to the post dataset upload status460 response
func (o *PostDatasetUploadStatus460) SetTusResumable(tusResumable string) {
	o.TusResumable = tusResumable
}

// WriteResponse to the client
func (o *PostDatasetUploadStatus460) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Access-Control-Expose-Headers

	accessControlExposeHeaders := o.AccessControlExposeHeaders
	if accessControlExposeHeaders != "" {
		rw.Header().Set("Access-Control-Expose-Headers", accessControlExposeHeaders)
	}

	// response header Tus-Resumable

	tusResumable := o.TusResumable
	if tusResumable != "" {
		rw.Header().Set("Tus-Resumable", tusResumable)
	}

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(460)
}

// PostDatasetUploadServiceUnavailableCode is the HTTP code returned for type PostDatasetUploadServiceUnavailable
const PostDatasetUploadServiceUnavailableCode int = 503

/*PostDatasetUploadServiceUnavailable Service Unavailable

swagger:response postDatasetUploadServiceUnavailable
*/
type PostDatasetUploadServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewPostDatasetUploadServiceUnavailable creates PostDatasetUploadServiceUnavailable with default headers values
func NewPostDatasetUploadServiceUnavailable() *PostDatasetUploadServiceUnavailable {

	return &PostDatasetUploadServiceUnavailable{}
}

// WithPayload adds the payload to the post dataset upload service unavailable response
func (o *PostDatasetUploadServiceUnavailable) WithPayload(payload *models.ErrorResponse) *PostDatasetUploadServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post dataset upload service unavailable response
func (o *PostDatasetUploadServiceUnavailable) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostDatasetUploadServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

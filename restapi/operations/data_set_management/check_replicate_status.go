// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CheckReplicateStatusHandlerFunc turns a function with the right signature into a check replicate status handler
type CheckReplicateStatusHandlerFunc func(CheckReplicateStatusParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn CheckReplicateStatusHandlerFunc) Handle(params CheckReplicateStatusParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// CheckReplicateStatusHandler interface for that can handle valid check replicate status params
type CheckReplicateStatusHandler interface {
	Handle(CheckReplicateStatusParams, interface{}) middleware.Responder
}

// NewCheckReplicateStatus creates a new http.Handler for the check replicate status operation
func NewCheckReplicateStatus(ctx *middleware.Context, handler CheckReplicateStatusHandler) *CheckReplicateStatus {
	return &CheckReplicateStatus{Context: ctx, Handler: handler}
}

/*CheckReplicateStatus swagger:route GET /dataset/replicate/{request_id} dataSetManagement EUDATReplication checkReplicateStatus

This is called when a user requests to check the status of his data replication

This is called when a user requests to check the status of his data replication

*/
type CheckReplicateStatus struct {
	Context *middleware.Context
	Handler CheckReplicateStatusHandler
}

func (o *CheckReplicateStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCheckReplicateStatusParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

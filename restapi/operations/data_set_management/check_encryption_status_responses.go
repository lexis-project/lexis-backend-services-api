// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// CheckEncryptionStatusOKCode is the HTTP code returned for type CheckEncryptionStatusOK
const CheckEncryptionStatusOKCode int = 200

/*CheckEncryptionStatusOK This means that the status has been returned to the user in the response body.

swagger:response checkEncryptionStatusOK
*/
type CheckEncryptionStatusOK struct {

	/*
	  In: Body
	*/
	Payload *CheckEncryptionStatusOKBody `json:"body,omitempty"`
}

// NewCheckEncryptionStatusOK creates CheckEncryptionStatusOK with default headers values
func NewCheckEncryptionStatusOK() *CheckEncryptionStatusOK {

	return &CheckEncryptionStatusOK{}
}

// WithPayload adds the payload to the check encryption status o k response
func (o *CheckEncryptionStatusOK) WithPayload(payload *CheckEncryptionStatusOKBody) *CheckEncryptionStatusOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check encryption status o k response
func (o *CheckEncryptionStatusOK) SetPayload(payload *CheckEncryptionStatusOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckEncryptionStatusOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckEncryptionStatusBadRequestCode is the HTTP code returned for type CheckEncryptionStatusBadRequest
const CheckEncryptionStatusBadRequestCode int = 400

/*CheckEncryptionStatusBadRequest This means that the request ID given by the user is incorrect.

swagger:response checkEncryptionStatusBadRequest
*/
type CheckEncryptionStatusBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckEncryptionStatusBadRequest creates CheckEncryptionStatusBadRequest with default headers values
func NewCheckEncryptionStatusBadRequest() *CheckEncryptionStatusBadRequest {

	return &CheckEncryptionStatusBadRequest{}
}

// WithPayload adds the payload to the check encryption status bad request response
func (o *CheckEncryptionStatusBadRequest) WithPayload(payload *models.ErrorResponse) *CheckEncryptionStatusBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check encryption status bad request response
func (o *CheckEncryptionStatusBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckEncryptionStatusBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckEncryptionStatusUnauthorizedCode is the HTTP code returned for type CheckEncryptionStatusUnauthorized
const CheckEncryptionStatusUnauthorizedCode int = 401

/*CheckEncryptionStatusUnauthorized This means that the user is not authenticated with keycloak and encryption can't be triggered unless the user first log in with a valid user

swagger:response checkEncryptionStatusUnauthorized
*/
type CheckEncryptionStatusUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckEncryptionStatusUnauthorized creates CheckEncryptionStatusUnauthorized with default headers values
func NewCheckEncryptionStatusUnauthorized() *CheckEncryptionStatusUnauthorized {

	return &CheckEncryptionStatusUnauthorized{}
}

// WithPayload adds the payload to the check encryption status unauthorized response
func (o *CheckEncryptionStatusUnauthorized) WithPayload(payload *models.ErrorResponse) *CheckEncryptionStatusUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check encryption status unauthorized response
func (o *CheckEncryptionStatusUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckEncryptionStatusUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckEncryptionStatusNotFoundCode is the HTTP code returned for type CheckEncryptionStatusNotFound
const CheckEncryptionStatusNotFoundCode int = 404

/*CheckEncryptionStatusNotFound This means that the ID doesn't exist and thus a status can't be returned.

swagger:response checkEncryptionStatusNotFound
*/
type CheckEncryptionStatusNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckEncryptionStatusNotFound creates CheckEncryptionStatusNotFound with default headers values
func NewCheckEncryptionStatusNotFound() *CheckEncryptionStatusNotFound {

	return &CheckEncryptionStatusNotFound{}
}

// WithPayload adds the payload to the check encryption status not found response
func (o *CheckEncryptionStatusNotFound) WithPayload(payload *models.ErrorResponse) *CheckEncryptionStatusNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check encryption status not found response
func (o *CheckEncryptionStatusNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckEncryptionStatusNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckEncryptionStatusRequestURITooLongCode is the HTTP code returned for type CheckEncryptionStatusRequestURITooLong
const CheckEncryptionStatusRequestURITooLongCode int = 414

/*CheckEncryptionStatusRequestURITooLong This means that the the request ID is longer than the server is willing to interpret.

swagger:response checkEncryptionStatusRequestUriTooLong
*/
type CheckEncryptionStatusRequestURITooLong struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckEncryptionStatusRequestURITooLong creates CheckEncryptionStatusRequestURITooLong with default headers values
func NewCheckEncryptionStatusRequestURITooLong() *CheckEncryptionStatusRequestURITooLong {

	return &CheckEncryptionStatusRequestURITooLong{}
}

// WithPayload adds the payload to the check encryption status request Uri too long response
func (o *CheckEncryptionStatusRequestURITooLong) WithPayload(payload *models.ErrorResponse) *CheckEncryptionStatusRequestURITooLong {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check encryption status request Uri too long response
func (o *CheckEncryptionStatusRequestURITooLong) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckEncryptionStatusRequestURITooLong) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(414)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckEncryptionStatusInternalServerErrorCode is the HTTP code returned for type CheckEncryptionStatusInternalServerError
const CheckEncryptionStatusInternalServerErrorCode int = 500

/*CheckEncryptionStatusInternalServerError This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.

swagger:response checkEncryptionStatusInternalServerError
*/
type CheckEncryptionStatusInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckEncryptionStatusInternalServerError creates CheckEncryptionStatusInternalServerError with default headers values
func NewCheckEncryptionStatusInternalServerError() *CheckEncryptionStatusInternalServerError {

	return &CheckEncryptionStatusInternalServerError{}
}

// WithPayload adds the payload to the check encryption status internal server error response
func (o *CheckEncryptionStatusInternalServerError) WithPayload(payload *models.ErrorResponse) *CheckEncryptionStatusInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check encryption status internal server error response
func (o *CheckEncryptionStatusInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckEncryptionStatusInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// FilesDeleteHandlerFunc turns a function with the right signature into a files delete handler
type FilesDeleteHandlerFunc func(FilesDeleteParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn FilesDeleteHandlerFunc) Handle(params FilesDeleteParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// FilesDeleteHandler interface for that can handle valid files delete params
type FilesDeleteHandler interface {
	Handle(FilesDeleteParams, interface{}) middleware.Responder
}

// NewFilesDelete creates a new http.Handler for the files delete operation
func NewFilesDelete(ctx *middleware.Context, handler FilesDeleteHandler) *FilesDelete {
	return &FilesDelete{Context: ctx, Handler: handler}
}

/*FilesDelete swagger:route DELETE /dataset/upload/{id} dataSetManagement filesDelete

Added by the Termination extension.

When receiving a DELETE request for an existing upload the Server SHOULD free associated resources and MUST respond with the 204 No Content status confirming that the upload was terminated. For all future requests to this URL, the Server SHOULD respond with the 404 Not Found or 410 Gone status.

*/
type FilesDelete struct {
	Context *middleware.Context
	Handler FilesDeleteHandler
}

func (o *FilesDelete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewFilesDeleteParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

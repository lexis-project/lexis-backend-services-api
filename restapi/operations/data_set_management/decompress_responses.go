// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// DecompressCreatedCode is the HTTP code returned for type DecompressCreated
const DecompressCreatedCode int = 201

/*DecompressCreated The response code means that the decompression has been initiated. Status of the operation can be checked by querying the status.

swagger:response decompressCreated
*/
type DecompressCreated struct {

	/*
	  In: Body
	*/
	Payload *models.SteeringRequestID `json:"body,omitempty"`
}

// NewDecompressCreated creates DecompressCreated with default headers values
func NewDecompressCreated() *DecompressCreated {

	return &DecompressCreated{}
}

// WithPayload adds the payload to the decompress created response
func (o *DecompressCreated) WithPayload(payload *models.SteeringRequestID) *DecompressCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the decompress created response
func (o *DecompressCreated) SetPayload(payload *models.SteeringRequestID) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DecompressCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DecompressBadRequestCode is the HTTP code returned for type DecompressBadRequest
const DecompressBadRequestCode int = 400

/*DecompressBadRequest This means that there's something wrong in the input parameters and the server couldn't understand the request.

swagger:response decompressBadRequest
*/
type DecompressBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDecompressBadRequest creates DecompressBadRequest with default headers values
func NewDecompressBadRequest() *DecompressBadRequest {

	return &DecompressBadRequest{}
}

// WithPayload adds the payload to the decompress bad request response
func (o *DecompressBadRequest) WithPayload(payload *models.ErrorResponse) *DecompressBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the decompress bad request response
func (o *DecompressBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DecompressBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DecompressUnauthorizedCode is the HTTP code returned for type DecompressUnauthorized
const DecompressUnauthorizedCode int = 401

/*DecompressUnauthorized This means that the user is not authenticated with keycloak and decompression can't be triggered unless the user first log in with a valid user

swagger:response decompressUnauthorized
*/
type DecompressUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDecompressUnauthorized creates DecompressUnauthorized with default headers values
func NewDecompressUnauthorized() *DecompressUnauthorized {

	return &DecompressUnauthorized{}
}

// WithPayload adds the payload to the decompress unauthorized response
func (o *DecompressUnauthorized) WithPayload(payload *models.ErrorResponse) *DecompressUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the decompress unauthorized response
func (o *DecompressUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DecompressUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DecompressForbiddenCode is the HTTP code returned for type DecompressForbidden
const DecompressForbiddenCode int = 403

/*DecompressForbidden This means that the resource the user is trying to compress is not readable by the user. User doesn't have the correct rights to read the source file.

swagger:response decompressForbidden
*/
type DecompressForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDecompressForbidden creates DecompressForbidden with default headers values
func NewDecompressForbidden() *DecompressForbidden {

	return &DecompressForbidden{}
}

// WithPayload adds the payload to the decompress forbidden response
func (o *DecompressForbidden) WithPayload(payload *models.ErrorResponse) *DecompressForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the decompress forbidden response
func (o *DecompressForbidden) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DecompressForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DecompressNotFoundCode is the HTTP code returned for type DecompressNotFound
const DecompressNotFoundCode int = 404

/*DecompressNotFound This means that either the source path on the system doesn't exist.

swagger:response decompressNotFound
*/
type DecompressNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDecompressNotFound creates DecompressNotFound with default headers values
func NewDecompressNotFound() *DecompressNotFound {

	return &DecompressNotFound{}
}

// WithPayload adds the payload to the decompress not found response
func (o *DecompressNotFound) WithPayload(payload *models.ErrorResponse) *DecompressNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the decompress not found response
func (o *DecompressNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DecompressNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DecompressRequestURITooLongCode is the HTTP code returned for type DecompressRequestURITooLong
const DecompressRequestURITooLongCode int = 414

/*DecompressRequestURITooLong This means that the either the source path is longer than the server is willing to interpret.

swagger:response decompressRequestUriTooLong
*/
type DecompressRequestURITooLong struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDecompressRequestURITooLong creates DecompressRequestURITooLong with default headers values
func NewDecompressRequestURITooLong() *DecompressRequestURITooLong {

	return &DecompressRequestURITooLong{}
}

// WithPayload adds the payload to the decompress request Uri too long response
func (o *DecompressRequestURITooLong) WithPayload(payload *models.ErrorResponse) *DecompressRequestURITooLong {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the decompress request Uri too long response
func (o *DecompressRequestURITooLong) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DecompressRequestURITooLong) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(414)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DecompressTooManyRequestsCode is the HTTP code returned for type DecompressTooManyRequests
const DecompressTooManyRequestsCode int = 429

/*DecompressTooManyRequests This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.

swagger:response decompressTooManyRequests
*/
type DecompressTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDecompressTooManyRequests creates DecompressTooManyRequests with default headers values
func NewDecompressTooManyRequests() *DecompressTooManyRequests {

	return &DecompressTooManyRequests{}
}

// WithPayload adds the payload to the decompress too many requests response
func (o *DecompressTooManyRequests) WithPayload(payload *models.ErrorResponse) *DecompressTooManyRequests {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the decompress too many requests response
func (o *DecompressTooManyRequests) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DecompressTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(429)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DecompressInternalServerErrorCode is the HTTP code returned for type DecompressInternalServerError
const DecompressInternalServerErrorCode int = 500

/*DecompressInternalServerError This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.

swagger:response decompressInternalServerError
*/
type DecompressInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDecompressInternalServerError creates DecompressInternalServerError with default headers values
func NewDecompressInternalServerError() *DecompressInternalServerError {

	return &DecompressInternalServerError{}
}

// WithPayload adds the payload to the decompress internal server error response
func (o *DecompressInternalServerError) WithPayload(payload *models.ErrorResponse) *DecompressInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the decompress internal server error response
func (o *DecompressInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DecompressInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// CheckReplicateStatusOKCode is the HTTP code returned for type CheckReplicateStatusOK
const CheckReplicateStatusOKCode int = 200

/*CheckReplicateStatusOK This means that the status has been returned to the user in the response body.

swagger:response checkReplicateStatusOK
*/
type CheckReplicateStatusOK struct {

	/*
	  In: Body
	*/
	Payload *models.DataReplication `json:"body,omitempty"`
}

// NewCheckReplicateStatusOK creates CheckReplicateStatusOK with default headers values
func NewCheckReplicateStatusOK() *CheckReplicateStatusOK {

	return &CheckReplicateStatusOK{}
}

// WithPayload adds the payload to the check replicate status o k response
func (o *CheckReplicateStatusOK) WithPayload(payload *models.DataReplication) *CheckReplicateStatusOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check replicate status o k response
func (o *CheckReplicateStatusOK) SetPayload(payload *models.DataReplication) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckReplicateStatusOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckReplicateStatusBadRequestCode is the HTTP code returned for type CheckReplicateStatusBadRequest
const CheckReplicateStatusBadRequestCode int = 400

/*CheckReplicateStatusBadRequest This means that there's something wrong in the input parameters and the server couldn't understand the request.

swagger:response checkReplicateStatusBadRequest
*/
type CheckReplicateStatusBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckReplicateStatusBadRequest creates CheckReplicateStatusBadRequest with default headers values
func NewCheckReplicateStatusBadRequest() *CheckReplicateStatusBadRequest {

	return &CheckReplicateStatusBadRequest{}
}

// WithPayload adds the payload to the check replicate status bad request response
func (o *CheckReplicateStatusBadRequest) WithPayload(payload *models.ErrorResponse) *CheckReplicateStatusBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check replicate status bad request response
func (o *CheckReplicateStatusBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckReplicateStatusBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckReplicateStatusUnauthorizedCode is the HTTP code returned for type CheckReplicateStatusUnauthorized
const CheckReplicateStatusUnauthorizedCode int = 401

/*CheckReplicateStatusUnauthorized This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user

swagger:response checkReplicateStatusUnauthorized
*/
type CheckReplicateStatusUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckReplicateStatusUnauthorized creates CheckReplicateStatusUnauthorized with default headers values
func NewCheckReplicateStatusUnauthorized() *CheckReplicateStatusUnauthorized {

	return &CheckReplicateStatusUnauthorized{}
}

// WithPayload adds the payload to the check replicate status unauthorized response
func (o *CheckReplicateStatusUnauthorized) WithPayload(payload *models.ErrorResponse) *CheckReplicateStatusUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check replicate status unauthorized response
func (o *CheckReplicateStatusUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckReplicateStatusUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckReplicateStatusForbiddenCode is the HTTP code returned for type CheckReplicateStatusForbidden
const CheckReplicateStatusForbiddenCode int = 403

/*CheckReplicateStatusForbidden This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.

swagger:response checkReplicateStatusForbidden
*/
type CheckReplicateStatusForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckReplicateStatusForbidden creates CheckReplicateStatusForbidden with default headers values
func NewCheckReplicateStatusForbidden() *CheckReplicateStatusForbidden {

	return &CheckReplicateStatusForbidden{}
}

// WithPayload adds the payload to the check replicate status forbidden response
func (o *CheckReplicateStatusForbidden) WithPayload(payload *models.ErrorResponse) *CheckReplicateStatusForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check replicate status forbidden response
func (o *CheckReplicateStatusForbidden) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckReplicateStatusForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckReplicateStatusNotFoundCode is the HTTP code returned for type CheckReplicateStatusNotFound
const CheckReplicateStatusNotFoundCode int = 404

/*CheckReplicateStatusNotFound This means that either the source path or the the target path on the system doesn't exist.

swagger:response checkReplicateStatusNotFound
*/
type CheckReplicateStatusNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckReplicateStatusNotFound creates CheckReplicateStatusNotFound with default headers values
func NewCheckReplicateStatusNotFound() *CheckReplicateStatusNotFound {

	return &CheckReplicateStatusNotFound{}
}

// WithPayload adds the payload to the check replicate status not found response
func (o *CheckReplicateStatusNotFound) WithPayload(payload *models.ErrorResponse) *CheckReplicateStatusNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check replicate status not found response
func (o *CheckReplicateStatusNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckReplicateStatusNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckReplicateStatusRequestURITooLongCode is the HTTP code returned for type CheckReplicateStatusRequestURITooLong
const CheckReplicateStatusRequestURITooLongCode int = 414

/*CheckReplicateStatusRequestURITooLong This means that the either the source path or the target path is longer than the server is willing to interpret.

swagger:response checkReplicateStatusRequestUriTooLong
*/
type CheckReplicateStatusRequestURITooLong struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckReplicateStatusRequestURITooLong creates CheckReplicateStatusRequestURITooLong with default headers values
func NewCheckReplicateStatusRequestURITooLong() *CheckReplicateStatusRequestURITooLong {

	return &CheckReplicateStatusRequestURITooLong{}
}

// WithPayload adds the payload to the check replicate status request Uri too long response
func (o *CheckReplicateStatusRequestURITooLong) WithPayload(payload *models.ErrorResponse) *CheckReplicateStatusRequestURITooLong {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check replicate status request Uri too long response
func (o *CheckReplicateStatusRequestURITooLong) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckReplicateStatusRequestURITooLong) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(414)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckReplicateStatusTooManyRequestsCode is the HTTP code returned for type CheckReplicateStatusTooManyRequests
const CheckReplicateStatusTooManyRequestsCode int = 429

/*CheckReplicateStatusTooManyRequests This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.

swagger:response checkReplicateStatusTooManyRequests
*/
type CheckReplicateStatusTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckReplicateStatusTooManyRequests creates CheckReplicateStatusTooManyRequests with default headers values
func NewCheckReplicateStatusTooManyRequests() *CheckReplicateStatusTooManyRequests {

	return &CheckReplicateStatusTooManyRequests{}
}

// WithPayload adds the payload to the check replicate status too many requests response
func (o *CheckReplicateStatusTooManyRequests) WithPayload(payload *models.ErrorResponse) *CheckReplicateStatusTooManyRequests {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check replicate status too many requests response
func (o *CheckReplicateStatusTooManyRequests) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckReplicateStatusTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(429)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckReplicateStatusInternalServerErrorCode is the HTTP code returned for type CheckReplicateStatusInternalServerError
const CheckReplicateStatusInternalServerErrorCode int = 500

/*CheckReplicateStatusInternalServerError This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.

swagger:response checkReplicateStatusInternalServerError
*/
type CheckReplicateStatusInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckReplicateStatusInternalServerError creates CheckReplicateStatusInternalServerError with default headers values
func NewCheckReplicateStatusInternalServerError() *CheckReplicateStatusInternalServerError {

	return &CheckReplicateStatusInternalServerError{}
}

// WithPayload adds the payload to the check replicate status internal server error response
func (o *CheckReplicateStatusInternalServerError) WithPayload(payload *models.ErrorResponse) *CheckReplicateStatusInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check replicate status internal server error response
func (o *CheckReplicateStatusInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckReplicateStatusInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

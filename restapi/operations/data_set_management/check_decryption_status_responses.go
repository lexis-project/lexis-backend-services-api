// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// CheckDecryptionStatusOKCode is the HTTP code returned for type CheckDecryptionStatusOK
const CheckDecryptionStatusOKCode int = 200

/*CheckDecryptionStatusOK This means that the status has been returned to the user in the response body.

swagger:response checkDecryptionStatusOK
*/
type CheckDecryptionStatusOK struct {

	/*
	  In: Body
	*/
	Payload *CheckDecryptionStatusOKBody `json:"body,omitempty"`
}

// NewCheckDecryptionStatusOK creates CheckDecryptionStatusOK with default headers values
func NewCheckDecryptionStatusOK() *CheckDecryptionStatusOK {

	return &CheckDecryptionStatusOK{}
}

// WithPayload adds the payload to the check decryption status o k response
func (o *CheckDecryptionStatusOK) WithPayload(payload *CheckDecryptionStatusOKBody) *CheckDecryptionStatusOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check decryption status o k response
func (o *CheckDecryptionStatusOK) SetPayload(payload *CheckDecryptionStatusOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckDecryptionStatusOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckDecryptionStatusBadRequestCode is the HTTP code returned for type CheckDecryptionStatusBadRequest
const CheckDecryptionStatusBadRequestCode int = 400

/*CheckDecryptionStatusBadRequest This means that the request ID given by the user is incorrect.

swagger:response checkDecryptionStatusBadRequest
*/
type CheckDecryptionStatusBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckDecryptionStatusBadRequest creates CheckDecryptionStatusBadRequest with default headers values
func NewCheckDecryptionStatusBadRequest() *CheckDecryptionStatusBadRequest {

	return &CheckDecryptionStatusBadRequest{}
}

// WithPayload adds the payload to the check decryption status bad request response
func (o *CheckDecryptionStatusBadRequest) WithPayload(payload *models.ErrorResponse) *CheckDecryptionStatusBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check decryption status bad request response
func (o *CheckDecryptionStatusBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckDecryptionStatusBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckDecryptionStatusUnauthorizedCode is the HTTP code returned for type CheckDecryptionStatusUnauthorized
const CheckDecryptionStatusUnauthorizedCode int = 401

/*CheckDecryptionStatusUnauthorized This means that the user is not authenticated with keycloak and decryption can't be triggered unless the user first log in with a valid user

swagger:response checkDecryptionStatusUnauthorized
*/
type CheckDecryptionStatusUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckDecryptionStatusUnauthorized creates CheckDecryptionStatusUnauthorized with default headers values
func NewCheckDecryptionStatusUnauthorized() *CheckDecryptionStatusUnauthorized {

	return &CheckDecryptionStatusUnauthorized{}
}

// WithPayload adds the payload to the check decryption status unauthorized response
func (o *CheckDecryptionStatusUnauthorized) WithPayload(payload *models.ErrorResponse) *CheckDecryptionStatusUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check decryption status unauthorized response
func (o *CheckDecryptionStatusUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckDecryptionStatusUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckDecryptionStatusNotFoundCode is the HTTP code returned for type CheckDecryptionStatusNotFound
const CheckDecryptionStatusNotFoundCode int = 404

/*CheckDecryptionStatusNotFound This means that the ID doesn't exist and thus a status can't be returned.

swagger:response checkDecryptionStatusNotFound
*/
type CheckDecryptionStatusNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckDecryptionStatusNotFound creates CheckDecryptionStatusNotFound with default headers values
func NewCheckDecryptionStatusNotFound() *CheckDecryptionStatusNotFound {

	return &CheckDecryptionStatusNotFound{}
}

// WithPayload adds the payload to the check decryption status not found response
func (o *CheckDecryptionStatusNotFound) WithPayload(payload *models.ErrorResponse) *CheckDecryptionStatusNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check decryption status not found response
func (o *CheckDecryptionStatusNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckDecryptionStatusNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckDecryptionStatusRequestURITooLongCode is the HTTP code returned for type CheckDecryptionStatusRequestURITooLong
const CheckDecryptionStatusRequestURITooLongCode int = 414

/*CheckDecryptionStatusRequestURITooLong This means that the the request ID is longer than the server is willing to interpret.

swagger:response checkDecryptionStatusRequestUriTooLong
*/
type CheckDecryptionStatusRequestURITooLong struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckDecryptionStatusRequestURITooLong creates CheckDecryptionStatusRequestURITooLong with default headers values
func NewCheckDecryptionStatusRequestURITooLong() *CheckDecryptionStatusRequestURITooLong {

	return &CheckDecryptionStatusRequestURITooLong{}
}

// WithPayload adds the payload to the check decryption status request Uri too long response
func (o *CheckDecryptionStatusRequestURITooLong) WithPayload(payload *models.ErrorResponse) *CheckDecryptionStatusRequestURITooLong {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check decryption status request Uri too long response
func (o *CheckDecryptionStatusRequestURITooLong) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckDecryptionStatusRequestURITooLong) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(414)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckDecryptionStatusInternalServerErrorCode is the HTTP code returned for type CheckDecryptionStatusInternalServerError
const CheckDecryptionStatusInternalServerErrorCode int = 500

/*CheckDecryptionStatusInternalServerError This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.

swagger:response checkDecryptionStatusInternalServerError
*/
type CheckDecryptionStatusInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckDecryptionStatusInternalServerError creates CheckDecryptionStatusInternalServerError with default headers values
func NewCheckDecryptionStatusInternalServerError() *CheckDecryptionStatusInternalServerError {

	return &CheckDecryptionStatusInternalServerError{}
}

// WithPayload adds the payload to the check decryption status internal server error response
func (o *CheckDecryptionStatusInternalServerError) WithPayload(payload *models.ErrorResponse) *CheckDecryptionStatusInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check decryption status internal server error response
func (o *CheckDecryptionStatusInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckDecryptionStatusInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

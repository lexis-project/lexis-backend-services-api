// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeleteDatasetByMetadataHandlerFunc turns a function with the right signature into a delete dataset by metadata handler
type DeleteDatasetByMetadataHandlerFunc func(DeleteDatasetByMetadataParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteDatasetByMetadataHandlerFunc) Handle(params DeleteDatasetByMetadataParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// DeleteDatasetByMetadataHandler interface for that can handle valid delete dataset by metadata params
type DeleteDatasetByMetadataHandler interface {
	Handle(DeleteDatasetByMetadataParams, interface{}) middleware.Responder
}

// NewDeleteDatasetByMetadata creates a new http.Handler for the delete dataset by metadata operation
func NewDeleteDatasetByMetadata(ctx *middleware.Context, handler DeleteDatasetByMetadataHandler) *DeleteDatasetByMetadata {
	return &DeleteDatasetByMetadata{Context: ctx, Handler: handler}
}

/*DeleteDatasetByMetadata swagger:route DELETE /dataset/search/metadata dataSetManagement deleteDatasetByMetadata

Search for datasets based on metadata, and delete them

Search for datasets based on metadata, and delete them

*/
type DeleteDatasetByMetadata struct {
	Context *middleware.Context
	Handler DeleteDatasetByMetadataHandler
}

func (o *DeleteDatasetByMetadata) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteDatasetByMetadataParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DeleteDatasetByMetadataForbiddenBody delete dataset by metadata forbidden body
//
// swagger:model DeleteDatasetByMetadataForbiddenBody
type DeleteDatasetByMetadataForbiddenBody struct {

	// error string
	// Required: true
	ErrorString *string `json:"errorString"`

	// permission error
	PermissionError []*DeleteDatasetByMetadataForbiddenBodyPermissionErrorItems0 `json:"permission_error"`
}

// Validate validates this delete dataset by metadata forbidden body
func (o *DeleteDatasetByMetadataForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrorString(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissionError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteDatasetByMetadataForbiddenBody) validateErrorString(formats strfmt.Registry) error {

	if err := validate.Required("deleteDatasetByMetadataForbidden"+"."+"errorString", "body", o.ErrorString); err != nil {
		return err
	}

	return nil
}

func (o *DeleteDatasetByMetadataForbiddenBody) validatePermissionError(formats strfmt.Registry) error {

	if swag.IsZero(o.PermissionError) { // not required
		return nil
	}

	for i := 0; i < len(o.PermissionError); i++ {
		if swag.IsZero(o.PermissionError[i]) { // not required
			continue
		}

		if o.PermissionError[i] != nil {
			if err := o.PermissionError[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteDatasetByMetadataForbidden" + "." + "permission_error" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteDatasetByMetadataForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteDatasetByMetadataForbiddenBody) UnmarshalBinary(b []byte) error {
	var res DeleteDatasetByMetadataForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DeleteDatasetByMetadataForbiddenBodyPermissionErrorItems0 delete dataset by metadata forbidden body permission error items0
//
// swagger:model DeleteDatasetByMetadataForbiddenBodyPermissionErrorItems0
type DeleteDatasetByMetadataForbiddenBodyPermissionErrorItems0 struct {

	// internal ID
	// Required: true
	InternalID *string `json:"internalID"`
}

// Validate validates this delete dataset by metadata forbidden body permission error items0
func (o *DeleteDatasetByMetadataForbiddenBodyPermissionErrorItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInternalID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteDatasetByMetadataForbiddenBodyPermissionErrorItems0) validateInternalID(formats strfmt.Registry) error {

	if err := validate.Required("internalID", "body", o.InternalID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteDatasetByMetadataForbiddenBodyPermissionErrorItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteDatasetByMetadataForbiddenBodyPermissionErrorItems0) UnmarshalBinary(b []byte) error {
	var res DeleteDatasetByMetadataForbiddenBodyPermissionErrorItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// QueryDatasetsOKCode is the HTTP code returned for type QueryDatasetsOK
const QueryDatasetsOKCode int = 200

/*QueryDatasetsOK Metadata for matching datasets returned

swagger:response queryDatasetsOK
*/
type QueryDatasetsOK struct {

	/*
	  In: Body
	*/
	Payload []*models.DatasetMetadataQueryResponse `json:"body,omitempty"`
}

// NewQueryDatasetsOK creates QueryDatasetsOK with default headers values
func NewQueryDatasetsOK() *QueryDatasetsOK {

	return &QueryDatasetsOK{}
}

// WithPayload adds the payload to the query datasets o k response
func (o *QueryDatasetsOK) WithPayload(payload []*models.DatasetMetadataQueryResponse) *QueryDatasetsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the query datasets o k response
func (o *QueryDatasetsOK) SetPayload(payload []*models.DatasetMetadataQueryResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *QueryDatasetsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.DatasetMetadataQueryResponse, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// QueryDatasetsBadRequestCode is the HTTP code returned for type QueryDatasetsBadRequest
const QueryDatasetsBadRequestCode int = 400

/*QueryDatasetsBadRequest Malformed Request

swagger:response queryDatasetsBadRequest
*/
type QueryDatasetsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewQueryDatasetsBadRequest creates QueryDatasetsBadRequest with default headers values
func NewQueryDatasetsBadRequest() *QueryDatasetsBadRequest {

	return &QueryDatasetsBadRequest{}
}

// WithPayload adds the payload to the query datasets bad request response
func (o *QueryDatasetsBadRequest) WithPayload(payload *models.ErrorResponse) *QueryDatasetsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the query datasets bad request response
func (o *QueryDatasetsBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *QueryDatasetsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// QueryDatasetsUnauthorizedCode is the HTTP code returned for type QueryDatasetsUnauthorized
const QueryDatasetsUnauthorizedCode int = 401

/*QueryDatasetsUnauthorized Authorization failed

swagger:response queryDatasetsUnauthorized
*/
type QueryDatasetsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewQueryDatasetsUnauthorized creates QueryDatasetsUnauthorized with default headers values
func NewQueryDatasetsUnauthorized() *QueryDatasetsUnauthorized {

	return &QueryDatasetsUnauthorized{}
}

// WithPayload adds the payload to the query datasets unauthorized response
func (o *QueryDatasetsUnauthorized) WithPayload(payload *models.ErrorResponse) *QueryDatasetsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the query datasets unauthorized response
func (o *QueryDatasetsUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *QueryDatasetsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// QueryDatasetsInternalServerErrorCode is the HTTP code returned for type QueryDatasetsInternalServerError
const QueryDatasetsInternalServerErrorCode int = 500

/*QueryDatasetsInternalServerError Internal error processing request

swagger:response queryDatasetsInternalServerError
*/
type QueryDatasetsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewQueryDatasetsInternalServerError creates QueryDatasetsInternalServerError with default headers values
func NewQueryDatasetsInternalServerError() *QueryDatasetsInternalServerError {

	return &QueryDatasetsInternalServerError{}
}

// WithPayload adds the payload to the query datasets internal server error response
func (o *QueryDatasetsInternalServerError) WithPayload(payload *models.ErrorResponse) *QueryDatasetsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the query datasets internal server error response
func (o *QueryDatasetsInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *QueryDatasetsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// QueryDatasetsBadGatewayCode is the HTTP code returned for type QueryDatasetsBadGateway
const QueryDatasetsBadGatewayCode int = 502

/*QueryDatasetsBadGateway Bad Gateway

swagger:response queryDatasetsBadGateway
*/
type QueryDatasetsBadGateway struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewQueryDatasetsBadGateway creates QueryDatasetsBadGateway with default headers values
func NewQueryDatasetsBadGateway() *QueryDatasetsBadGateway {

	return &QueryDatasetsBadGateway{}
}

// WithPayload adds the payload to the query datasets bad gateway response
func (o *QueryDatasetsBadGateway) WithPayload(payload *models.ErrorResponse) *QueryDatasetsBadGateway {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the query datasets bad gateway response
func (o *QueryDatasetsBadGateway) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *QueryDatasetsBadGateway) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(502)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// QueryDatasetsServiceUnavailableCode is the HTTP code returned for type QueryDatasetsServiceUnavailable
const QueryDatasetsServiceUnavailableCode int = 503

/*QueryDatasetsServiceUnavailable unexpected error connecting to further backends

swagger:response queryDatasetsServiceUnavailable
*/
type QueryDatasetsServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewQueryDatasetsServiceUnavailable creates QueryDatasetsServiceUnavailable with default headers values
func NewQueryDatasetsServiceUnavailable() *QueryDatasetsServiceUnavailable {

	return &QueryDatasetsServiceUnavailable{}
}

// WithPayload adds the payload to the query datasets service unavailable response
func (o *QueryDatasetsServiceUnavailable) WithPayload(payload *models.ErrorResponse) *QueryDatasetsServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the query datasets service unavailable response
func (o *QueryDatasetsServiceUnavailable) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *QueryDatasetsServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

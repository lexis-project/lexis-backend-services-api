// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// CheckSizeStatusOKCode is the HTTP code returned for type CheckSizeStatusOK
const CheckSizeStatusOKCode int = 200

/*CheckSizeStatusOK This means that the status has been returned to the user in the response body.

swagger:response checkSizeStatusOK
*/
type CheckSizeStatusOK struct {

	/*
	  In: Body
	*/
	Payload *models.DataSize `json:"body,omitempty"`
}

// NewCheckSizeStatusOK creates CheckSizeStatusOK with default headers values
func NewCheckSizeStatusOK() *CheckSizeStatusOK {

	return &CheckSizeStatusOK{}
}

// WithPayload adds the payload to the check size status o k response
func (o *CheckSizeStatusOK) WithPayload(payload *models.DataSize) *CheckSizeStatusOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check size status o k response
func (o *CheckSizeStatusOK) SetPayload(payload *models.DataSize) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckSizeStatusOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckSizeStatusBadRequestCode is the HTTP code returned for type CheckSizeStatusBadRequest
const CheckSizeStatusBadRequestCode int = 400

/*CheckSizeStatusBadRequest This means that there's something wrong in the input parameters and the server couldn't understand the request.

swagger:response checkSizeStatusBadRequest
*/
type CheckSizeStatusBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckSizeStatusBadRequest creates CheckSizeStatusBadRequest with default headers values
func NewCheckSizeStatusBadRequest() *CheckSizeStatusBadRequest {

	return &CheckSizeStatusBadRequest{}
}

// WithPayload adds the payload to the check size status bad request response
func (o *CheckSizeStatusBadRequest) WithPayload(payload *models.ErrorResponse) *CheckSizeStatusBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check size status bad request response
func (o *CheckSizeStatusBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckSizeStatusBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckSizeStatusUnauthorizedCode is the HTTP code returned for type CheckSizeStatusUnauthorized
const CheckSizeStatusUnauthorizedCode int = 401

/*CheckSizeStatusUnauthorized This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user

swagger:response checkSizeStatusUnauthorized
*/
type CheckSizeStatusUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckSizeStatusUnauthorized creates CheckSizeStatusUnauthorized with default headers values
func NewCheckSizeStatusUnauthorized() *CheckSizeStatusUnauthorized {

	return &CheckSizeStatusUnauthorized{}
}

// WithPayload adds the payload to the check size status unauthorized response
func (o *CheckSizeStatusUnauthorized) WithPayload(payload *models.ErrorResponse) *CheckSizeStatusUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check size status unauthorized response
func (o *CheckSizeStatusUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckSizeStatusUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckSizeStatusForbiddenCode is the HTTP code returned for type CheckSizeStatusForbidden
const CheckSizeStatusForbiddenCode int = 403

/*CheckSizeStatusForbidden This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.

swagger:response checkSizeStatusForbidden
*/
type CheckSizeStatusForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckSizeStatusForbidden creates CheckSizeStatusForbidden with default headers values
func NewCheckSizeStatusForbidden() *CheckSizeStatusForbidden {

	return &CheckSizeStatusForbidden{}
}

// WithPayload adds the payload to the check size status forbidden response
func (o *CheckSizeStatusForbidden) WithPayload(payload *models.ErrorResponse) *CheckSizeStatusForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check size status forbidden response
func (o *CheckSizeStatusForbidden) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckSizeStatusForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckSizeStatusNotFoundCode is the HTTP code returned for type CheckSizeStatusNotFound
const CheckSizeStatusNotFoundCode int = 404

/*CheckSizeStatusNotFound This means that either the source path or the the target path on the system doesn't exist.

swagger:response checkSizeStatusNotFound
*/
type CheckSizeStatusNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckSizeStatusNotFound creates CheckSizeStatusNotFound with default headers values
func NewCheckSizeStatusNotFound() *CheckSizeStatusNotFound {

	return &CheckSizeStatusNotFound{}
}

// WithPayload adds the payload to the check size status not found response
func (o *CheckSizeStatusNotFound) WithPayload(payload *models.ErrorResponse) *CheckSizeStatusNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check size status not found response
func (o *CheckSizeStatusNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckSizeStatusNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckSizeStatusRequestURITooLongCode is the HTTP code returned for type CheckSizeStatusRequestURITooLong
const CheckSizeStatusRequestURITooLongCode int = 414

/*CheckSizeStatusRequestURITooLong This means that the either the source path or the target path is longer than the server is willing to interpret.

swagger:response checkSizeStatusRequestUriTooLong
*/
type CheckSizeStatusRequestURITooLong struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckSizeStatusRequestURITooLong creates CheckSizeStatusRequestURITooLong with default headers values
func NewCheckSizeStatusRequestURITooLong() *CheckSizeStatusRequestURITooLong {

	return &CheckSizeStatusRequestURITooLong{}
}

// WithPayload adds the payload to the check size status request Uri too long response
func (o *CheckSizeStatusRequestURITooLong) WithPayload(payload *models.ErrorResponse) *CheckSizeStatusRequestURITooLong {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check size status request Uri too long response
func (o *CheckSizeStatusRequestURITooLong) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckSizeStatusRequestURITooLong) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(414)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckSizeStatusTooManyRequestsCode is the HTTP code returned for type CheckSizeStatusTooManyRequests
const CheckSizeStatusTooManyRequestsCode int = 429

/*CheckSizeStatusTooManyRequests This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.

swagger:response checkSizeStatusTooManyRequests
*/
type CheckSizeStatusTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckSizeStatusTooManyRequests creates CheckSizeStatusTooManyRequests with default headers values
func NewCheckSizeStatusTooManyRequests() *CheckSizeStatusTooManyRequests {

	return &CheckSizeStatusTooManyRequests{}
}

// WithPayload adds the payload to the check size status too many requests response
func (o *CheckSizeStatusTooManyRequests) WithPayload(payload *models.ErrorResponse) *CheckSizeStatusTooManyRequests {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check size status too many requests response
func (o *CheckSizeStatusTooManyRequests) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckSizeStatusTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(429)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckSizeStatusInternalServerErrorCode is the HTTP code returned for type CheckSizeStatusInternalServerError
const CheckSizeStatusInternalServerErrorCode int = 500

/*CheckSizeStatusInternalServerError This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.

swagger:response checkSizeStatusInternalServerError
*/
type CheckSizeStatusInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckSizeStatusInternalServerError creates CheckSizeStatusInternalServerError with default headers values
func NewCheckSizeStatusInternalServerError() *CheckSizeStatusInternalServerError {

	return &CheckSizeStatusInternalServerError{}
}

// WithPayload adds the payload to the check size status internal server error response
func (o *CheckSizeStatusInternalServerError) WithPayload(payload *models.ErrorResponse) *CheckSizeStatusInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check size status internal server error response
func (o *CheckSizeStatusInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckSizeStatusInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

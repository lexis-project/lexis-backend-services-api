// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// CheckPIDStatusOKCode is the HTTP code returned for type CheckPIDStatusOK
const CheckPIDStatusOKCode int = 200

/*CheckPIDStatusOK This means that the status has been returned to the user in the response body.

swagger:response checkPIdStatusOK
*/
type CheckPIDStatusOK struct {

	/*
	  In: Body
	*/
	Payload *models.DataReplication `json:"body,omitempty"`
}

// NewCheckPIDStatusOK creates CheckPIDStatusOK with default headers values
func NewCheckPIDStatusOK() *CheckPIDStatusOK {

	return &CheckPIDStatusOK{}
}

// WithPayload adds the payload to the check p Id status o k response
func (o *CheckPIDStatusOK) WithPayload(payload *models.DataReplication) *CheckPIDStatusOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check p Id status o k response
func (o *CheckPIDStatusOK) SetPayload(payload *models.DataReplication) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckPIDStatusOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckPIDStatusBadRequestCode is the HTTP code returned for type CheckPIDStatusBadRequest
const CheckPIDStatusBadRequestCode int = 400

/*CheckPIDStatusBadRequest This means that there's something wrong in the input parameters and the server couldn't understand the request.

swagger:response checkPIdStatusBadRequest
*/
type CheckPIDStatusBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckPIDStatusBadRequest creates CheckPIDStatusBadRequest with default headers values
func NewCheckPIDStatusBadRequest() *CheckPIDStatusBadRequest {

	return &CheckPIDStatusBadRequest{}
}

// WithPayload adds the payload to the check p Id status bad request response
func (o *CheckPIDStatusBadRequest) WithPayload(payload *models.ErrorResponse) *CheckPIDStatusBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check p Id status bad request response
func (o *CheckPIDStatusBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckPIDStatusBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckPIDStatusUnauthorizedCode is the HTTP code returned for type CheckPIDStatusUnauthorized
const CheckPIDStatusUnauthorizedCode int = 401

/*CheckPIDStatusUnauthorized This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user

swagger:response checkPIdStatusUnauthorized
*/
type CheckPIDStatusUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckPIDStatusUnauthorized creates CheckPIDStatusUnauthorized with default headers values
func NewCheckPIDStatusUnauthorized() *CheckPIDStatusUnauthorized {

	return &CheckPIDStatusUnauthorized{}
}

// WithPayload adds the payload to the check p Id status unauthorized response
func (o *CheckPIDStatusUnauthorized) WithPayload(payload *models.ErrorResponse) *CheckPIDStatusUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check p Id status unauthorized response
func (o *CheckPIDStatusUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckPIDStatusUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckPIDStatusForbiddenCode is the HTTP code returned for type CheckPIDStatusForbidden
const CheckPIDStatusForbiddenCode int = 403

/*CheckPIDStatusForbidden This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.

swagger:response checkPIdStatusForbidden
*/
type CheckPIDStatusForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckPIDStatusForbidden creates CheckPIDStatusForbidden with default headers values
func NewCheckPIDStatusForbidden() *CheckPIDStatusForbidden {

	return &CheckPIDStatusForbidden{}
}

// WithPayload adds the payload to the check p Id status forbidden response
func (o *CheckPIDStatusForbidden) WithPayload(payload *models.ErrorResponse) *CheckPIDStatusForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check p Id status forbidden response
func (o *CheckPIDStatusForbidden) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckPIDStatusForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckPIDStatusNotFoundCode is the HTTP code returned for type CheckPIDStatusNotFound
const CheckPIDStatusNotFoundCode int = 404

/*CheckPIDStatusNotFound This means that either the source path or the the target path on the system doesn't exist.

swagger:response checkPIdStatusNotFound
*/
type CheckPIDStatusNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckPIDStatusNotFound creates CheckPIDStatusNotFound with default headers values
func NewCheckPIDStatusNotFound() *CheckPIDStatusNotFound {

	return &CheckPIDStatusNotFound{}
}

// WithPayload adds the payload to the check p Id status not found response
func (o *CheckPIDStatusNotFound) WithPayload(payload *models.ErrorResponse) *CheckPIDStatusNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check p Id status not found response
func (o *CheckPIDStatusNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckPIDStatusNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckPIDStatusRequestURITooLongCode is the HTTP code returned for type CheckPIDStatusRequestURITooLong
const CheckPIDStatusRequestURITooLongCode int = 414

/*CheckPIDStatusRequestURITooLong This means that the either the source path or the target path is longer than the server is willing to interpret.

swagger:response checkPIdStatusRequestUriTooLong
*/
type CheckPIDStatusRequestURITooLong struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckPIDStatusRequestURITooLong creates CheckPIDStatusRequestURITooLong with default headers values
func NewCheckPIDStatusRequestURITooLong() *CheckPIDStatusRequestURITooLong {

	return &CheckPIDStatusRequestURITooLong{}
}

// WithPayload adds the payload to the check p Id status request Uri too long response
func (o *CheckPIDStatusRequestURITooLong) WithPayload(payload *models.ErrorResponse) *CheckPIDStatusRequestURITooLong {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check p Id status request Uri too long response
func (o *CheckPIDStatusRequestURITooLong) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckPIDStatusRequestURITooLong) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(414)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckPIDStatusTooManyRequestsCode is the HTTP code returned for type CheckPIDStatusTooManyRequests
const CheckPIDStatusTooManyRequestsCode int = 429

/*CheckPIDStatusTooManyRequests This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.

swagger:response checkPIdStatusTooManyRequests
*/
type CheckPIDStatusTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckPIDStatusTooManyRequests creates CheckPIDStatusTooManyRequests with default headers values
func NewCheckPIDStatusTooManyRequests() *CheckPIDStatusTooManyRequests {

	return &CheckPIDStatusTooManyRequests{}
}

// WithPayload adds the payload to the check p Id status too many requests response
func (o *CheckPIDStatusTooManyRequests) WithPayload(payload *models.ErrorResponse) *CheckPIDStatusTooManyRequests {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check p Id status too many requests response
func (o *CheckPIDStatusTooManyRequests) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckPIDStatusTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(429)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckPIDStatusInternalServerErrorCode is the HTTP code returned for type CheckPIDStatusInternalServerError
const CheckPIDStatusInternalServerErrorCode int = 500

/*CheckPIDStatusInternalServerError This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.

swagger:response checkPIdStatusInternalServerError
*/
type CheckPIDStatusInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckPIDStatusInternalServerError creates CheckPIDStatusInternalServerError with default headers values
func NewCheckPIDStatusInternalServerError() *CheckPIDStatusInternalServerError {

	return &CheckPIDStatusInternalServerError{}
}

// WithPayload adds the payload to the check p Id status internal server error response
func (o *CheckPIDStatusInternalServerError) WithPayload(payload *models.ErrorResponse) *CheckPIDStatusInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check p Id status internal server error response
func (o *CheckPIDStatusInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckPIDStatusInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// DecryptCreatedCode is the HTTP code returned for type DecryptCreated
const DecryptCreatedCode int = 201

/*DecryptCreated The response code means that the decryption has been initiated. Status of the operation can be checked by querying the status.

swagger:response decryptCreated
*/
type DecryptCreated struct {

	/*
	  In: Body
	*/
	Payload *models.SteeringRequestID `json:"body,omitempty"`
}

// NewDecryptCreated creates DecryptCreated with default headers values
func NewDecryptCreated() *DecryptCreated {

	return &DecryptCreated{}
}

// WithPayload adds the payload to the decrypt created response
func (o *DecryptCreated) WithPayload(payload *models.SteeringRequestID) *DecryptCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the decrypt created response
func (o *DecryptCreated) SetPayload(payload *models.SteeringRequestID) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DecryptCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DecryptBadRequestCode is the HTTP code returned for type DecryptBadRequest
const DecryptBadRequestCode int = 400

/*DecryptBadRequest This means that there's something wrong in the input parameters and the server couldn't understand the request.

swagger:response decryptBadRequest
*/
type DecryptBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDecryptBadRequest creates DecryptBadRequest with default headers values
func NewDecryptBadRequest() *DecryptBadRequest {

	return &DecryptBadRequest{}
}

// WithPayload adds the payload to the decrypt bad request response
func (o *DecryptBadRequest) WithPayload(payload *models.ErrorResponse) *DecryptBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the decrypt bad request response
func (o *DecryptBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DecryptBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DecryptUnauthorizedCode is the HTTP code returned for type DecryptUnauthorized
const DecryptUnauthorizedCode int = 401

/*DecryptUnauthorized This means that the user is not authenticated with keycloak and decryption can't be triggered unless the user first log in with a valid user

swagger:response decryptUnauthorized
*/
type DecryptUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDecryptUnauthorized creates DecryptUnauthorized with default headers values
func NewDecryptUnauthorized() *DecryptUnauthorized {

	return &DecryptUnauthorized{}
}

// WithPayload adds the payload to the decrypt unauthorized response
func (o *DecryptUnauthorized) WithPayload(payload *models.ErrorResponse) *DecryptUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the decrypt unauthorized response
func (o *DecryptUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DecryptUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DecryptForbiddenCode is the HTTP code returned for type DecryptForbidden
const DecryptForbiddenCode int = 403

/*DecryptForbidden This means that the resource the user is trying to decrypt from or to is not readable. User doesn't have the correct rights to read the source file.

swagger:response decryptForbidden
*/
type DecryptForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDecryptForbidden creates DecryptForbidden with default headers values
func NewDecryptForbidden() *DecryptForbidden {

	return &DecryptForbidden{}
}

// WithPayload adds the payload to the decrypt forbidden response
func (o *DecryptForbidden) WithPayload(payload *models.ErrorResponse) *DecryptForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the decrypt forbidden response
func (o *DecryptForbidden) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DecryptForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DecryptNotFoundCode is the HTTP code returned for type DecryptNotFound
const DecryptNotFoundCode int = 404

/*DecryptNotFound This means that the source path on the system doesn't exist.

swagger:response decryptNotFound
*/
type DecryptNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDecryptNotFound creates DecryptNotFound with default headers values
func NewDecryptNotFound() *DecryptNotFound {

	return &DecryptNotFound{}
}

// WithPayload adds the payload to the decrypt not found response
func (o *DecryptNotFound) WithPayload(payload *models.ErrorResponse) *DecryptNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the decrypt not found response
func (o *DecryptNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DecryptNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DecryptRequestURITooLongCode is the HTTP code returned for type DecryptRequestURITooLong
const DecryptRequestURITooLongCode int = 414

/*DecryptRequestURITooLong This means that the either the source path is longer than the server is willing to interpret.

swagger:response decryptRequestUriTooLong
*/
type DecryptRequestURITooLong struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDecryptRequestURITooLong creates DecryptRequestURITooLong with default headers values
func NewDecryptRequestURITooLong() *DecryptRequestURITooLong {

	return &DecryptRequestURITooLong{}
}

// WithPayload adds the payload to the decrypt request Uri too long response
func (o *DecryptRequestURITooLong) WithPayload(payload *models.ErrorResponse) *DecryptRequestURITooLong {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the decrypt request Uri too long response
func (o *DecryptRequestURITooLong) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DecryptRequestURITooLong) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(414)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DecryptTooManyRequestsCode is the HTTP code returned for type DecryptTooManyRequests
const DecryptTooManyRequestsCode int = 429

/*DecryptTooManyRequests This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.

swagger:response decryptTooManyRequests
*/
type DecryptTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDecryptTooManyRequests creates DecryptTooManyRequests with default headers values
func NewDecryptTooManyRequests() *DecryptTooManyRequests {

	return &DecryptTooManyRequests{}
}

// WithPayload adds the payload to the decrypt too many requests response
func (o *DecryptTooManyRequests) WithPayload(payload *models.ErrorResponse) *DecryptTooManyRequests {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the decrypt too many requests response
func (o *DecryptTooManyRequests) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DecryptTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(429)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DecryptInternalServerErrorCode is the HTTP code returned for type DecryptInternalServerError
const DecryptInternalServerErrorCode int = 500

/*DecryptInternalServerError This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.

swagger:response decryptInternalServerError
*/
type DecryptInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDecryptInternalServerError creates DecryptInternalServerError with default headers values
func NewDecryptInternalServerError() *DecryptInternalServerError {

	return &DecryptInternalServerError{}
}

// WithPayload adds the payload to the decrypt internal server error response
func (o *DecryptInternalServerError) WithPayload(payload *models.ErrorResponse) *DecryptInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the decrypt internal server error response
func (o *DecryptInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DecryptInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// FilePatchHandlerFunc turns a function with the right signature into a file patch handler
type FilePatchHandlerFunc func(FilePatchParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn FilePatchHandlerFunc) Handle(params FilePatchParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// FilePatchHandler interface for that can handle valid file patch params
type FilePatchHandler interface {
	Handle(FilePatchParams, interface{}) middleware.Responder
}

// NewFilePatch creates a new http.Handler for the file patch operation
func NewFilePatch(ctx *middleware.Context, handler FilePatchHandler) *FilePatch {
	return &FilePatch{Context: ctx, Handler: handler}
}

/*FilePatch swagger:route PATCH /dataset/upload/{id} dataSetManagement filePatch

Used to resume the upload

The Server SHOULD accept PATCH requests against any upload URL and apply the bytes contained in the message at the given offset specified by the Upload-Offset header. All PATCH requests MUST use Content-Type: application/offset+octet-stream, otherwise the server SHOULD return a 415 Unsupported Media Type status.

*/
type FilePatch struct {
	Context *middleware.Context
	Handler FilePatchHandler
}

func (o *FilePatch) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewFilePatchParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

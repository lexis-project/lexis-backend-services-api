// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/lexis-project/lexis-backend-services-api.git/restapi/operations/approval_system_management"
	"github.com/lexis-project/lexis-backend-services-api.git/restapi/operations/cluster_information"
	"github.com/lexis-project/lexis-backend-services-api.git/restapi/operations/data_set_management"
	"github.com/lexis-project/lexis-backend-services-api.git/restapi/operations/staging"
	"github.com/lexis-project/lexis-backend-services-api.git/restapi/operations/usage_management"
	"github.com/lexis-project/lexis-backend-services-api.git/restapi/operations/user_org_management"
	"github.com/lexis-project/lexis-backend-services-api.git/restapi/operations/workflow_management"
)

// NewLEXISPortalAPIAPI creates a new LEXISPortalAPI instance
func NewLEXISPortalAPIAPI(spec *loads.Document) *LEXISPortalAPIAPI {
	return &LEXISPortalAPIAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		BinConsumer:           runtime.ByteStreamConsumer(),
		JSONConsumer:          runtime.JSONConsumer(),
		MultipartformConsumer: runtime.DiscardConsumer,

		BinProducer:  runtime.ByteStreamProducer(),
		JSONProducer: runtime.JSONProducer(),

		DataSetManagementAddGridmapEntryHandler: data_set_management.AddGridmapEntryHandlerFunc(func(params data_set_management.AddGridmapEntryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.AddGridmapEntry has not yet been implemented")
		}),
		DataSetManagementCertificateHandler: data_set_management.CertificateHandlerFunc(func(params data_set_management.CertificateParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.Certificate has not yet been implemented")
		}),
		StagingCheckCloudNFSExportAddStatusHandler: staging.CheckCloudNFSExportAddStatusHandlerFunc(func(params staging.CheckCloudNFSExportAddStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation staging.CheckCloudNFSExportAddStatus has not yet been implemented")
		}),
		StagingCheckCloudNFSExportRemoveStatusHandler: staging.CheckCloudNFSExportRemoveStatusHandlerFunc(func(params staging.CheckCloudNFSExportRemoveStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation staging.CheckCloudNFSExportRemoveStatus has not yet been implemented")
		}),
		StagingCheckCompressToZipStatusHandler: staging.CheckCompressToZipStatusHandlerFunc(func(params staging.CheckCompressToZipStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation staging.CheckCompressToZipStatus has not yet been implemented")
		}),
		DataSetManagementCheckCompressionEncryptionStatusHandler: data_set_management.CheckCompressionEncryptionStatusHandlerFunc(func(params data_set_management.CheckCompressionEncryptionStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.CheckCompressionEncryptionStatus has not yet been implemented")
		}),
		DataSetManagementCheckCompressionStatusHandler: data_set_management.CheckCompressionStatusHandlerFunc(func(params data_set_management.CheckCompressionStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.CheckCompressionStatus has not yet been implemented")
		}),
		DataSetManagementCheckDecompressionStatusHandler: data_set_management.CheckDecompressionStatusHandlerFunc(func(params data_set_management.CheckDecompressionStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.CheckDecompressionStatus has not yet been implemented")
		}),
		DataSetManagementCheckDecryptionDecompressionStatusHandler: data_set_management.CheckDecryptionDecompressionStatusHandlerFunc(func(params data_set_management.CheckDecryptionDecompressionStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.CheckDecryptionDecompressionStatus has not yet been implemented")
		}),
		DataSetManagementCheckDecryptionStatusHandler: data_set_management.CheckDecryptionStatusHandlerFunc(func(params data_set_management.CheckDecryptionStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.CheckDecryptionStatus has not yet been implemented")
		}),
		StagingCheckDeletionStatusHandler: staging.CheckDeletionStatusHandlerFunc(func(params staging.CheckDeletionStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation staging.CheckDeletionStatus has not yet been implemented")
		}),
		StagingCheckDuplicationStatusHandler: staging.CheckDuplicationStatusHandlerFunc(func(params staging.CheckDuplicationStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation staging.CheckDuplicationStatus has not yet been implemented")
		}),
		DataSetManagementCheckEncryptionStatusHandler: data_set_management.CheckEncryptionStatusHandlerFunc(func(params data_set_management.CheckEncryptionStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.CheckEncryptionStatus has not yet been implemented")
		}),
		DataSetManagementCheckPIDStatusHandler: data_set_management.CheckPIDStatusHandlerFunc(func(params data_set_management.CheckPIDStatusParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.CheckPIDStatus has not yet been implemented")
		}),
		DataSetManagementCheckPermissionHandler: data_set_management.CheckPermissionHandlerFunc(func(params data_set_management.CheckPermissionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.CheckPermission has not yet been implemented")
		}),
		DataSetManagementCheckReplicateStatusHandler: data_set_management.CheckReplicateStatusHandlerFunc(func(params data_set_management.CheckReplicateStatusParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.CheckReplicateStatus has not yet been implemented")
		}),
		DataSetManagementCheckSizeStatusHandler: data_set_management.CheckSizeStatusHandlerFunc(func(params data_set_management.CheckSizeStatusParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.CheckSizeStatus has not yet been implemented")
		}),
		StagingCheckStageStatusHandler: staging.CheckStageStatusHandlerFunc(func(params staging.CheckStageStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation staging.CheckStageStatus has not yet been implemented")
		}),
		StagingCloudNFSExportAddHandler: staging.CloudNFSExportAddHandlerFunc(func(params staging.CloudNFSExportAddParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation staging.CloudNFSExportAdd has not yet been implemented")
		}),
		StagingCloudNFSExportRemoveHandler: staging.CloudNFSExportRemoveHandlerFunc(func(params staging.CloudNFSExportRemoveParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation staging.CloudNFSExportRemove has not yet been implemented")
		}),
		DataSetManagementCompressHandler: data_set_management.CompressHandlerFunc(func(params data_set_management.CompressParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.Compress has not yet been implemented")
		}),
		DataSetManagementCompressEncryptHandler: data_set_management.CompressEncryptHandlerFunc(func(params data_set_management.CompressEncryptParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.CompressEncrypt has not yet been implemented")
		}),
		StagingCompressToZipHandler: staging.CompressToZipHandlerFunc(func(params staging.CompressToZipParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation staging.CompressToZip has not yet been implemented")
		}),
		ApprovalSystemManagementCreateApprovedResourceRequestHandler: approval_system_management.CreateApprovedResourceRequestHandlerFunc(func(params approval_system_management.CreateApprovedResourceRequestParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation approval_system_management.CreateApprovedResourceRequest has not yet been implemented")
		}),
		ApprovalSystemManagementCreateResourceRequestHandler: approval_system_management.CreateResourceRequestHandlerFunc(func(params approval_system_management.CreateResourceRequestParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation approval_system_management.CreateResourceRequest has not yet been implemented")
		}),
		DataSetManagementCreateSSHFSExportHandler: data_set_management.CreateSSHFSExportHandlerFunc(func(params data_set_management.CreateSSHFSExportParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.CreateSSHFSExport has not yet been implemented")
		}),
		DataSetManagementDecompressHandler: data_set_management.DecompressHandlerFunc(func(params data_set_management.DecompressParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.Decompress has not yet been implemented")
		}),
		DataSetManagementDecryptHandler: data_set_management.DecryptHandlerFunc(func(params data_set_management.DecryptParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.Decrypt has not yet been implemented")
		}),
		DataSetManagementDecryptDecompressHandler: data_set_management.DecryptDecompressHandlerFunc(func(params data_set_management.DecryptDecompressParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.DecryptDecompress has not yet been implemented")
		}),
		StagingDeleteHandler: staging.DeleteHandlerFunc(func(params staging.DeleteParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation staging.Delete has not yet been implemented")
		}),
		DataSetManagementDeleteDatasetHandler: data_set_management.DeleteDatasetHandlerFunc(func(params data_set_management.DeleteDatasetParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.DeleteDataset has not yet been implemented")
		}),
		DataSetManagementDeleteDatasetByMetadataHandler: data_set_management.DeleteDatasetByMetadataHandlerFunc(func(params data_set_management.DeleteDatasetByMetadataParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.DeleteDatasetByMetadata has not yet been implemented")
		}),
		DataSetManagementDeleteSSHFSExportHandler: data_set_management.DeleteSSHFSExportHandlerFunc(func(params data_set_management.DeleteSSHFSExportParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.DeleteSSHFSExport has not yet been implemented")
		}),
		WorkflowManagementDeleteWorkflowHandler: workflow_management.DeleteWorkflowHandlerFunc(func(params workflow_management.DeleteWorkflowParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation workflow_management.DeleteWorkflow has not yet been implemented")
		}),
		DataSetManagementDownloadDatasetHandler: data_set_management.DownloadDatasetHandlerFunc(func(params data_set_management.DownloadDatasetParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.DownloadDataset has not yet been implemented")
		}),
		StagingDuplicateHandler: staging.DuplicateHandlerFunc(func(params staging.DuplicateParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation staging.Duplicate has not yet been implemented")
		}),
		DataSetManagementEncryptHandler: data_set_management.EncryptHandlerFunc(func(params data_set_management.EncryptParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.Encrypt has not yet been implemented")
		}),
		DataSetManagementFilePatchHandler: data_set_management.FilePatchHandlerFunc(func(params data_set_management.FilePatchParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.FilePatch has not yet been implemented")
		}),
		DataSetManagementFilesDeleteHandler: data_set_management.FilesDeleteHandlerFunc(func(params data_set_management.FilesDeleteParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.FilesDelete has not yet been implemented")
		}),
		DataSetManagementFilesHeadHandler: data_set_management.FilesHeadHandlerFunc(func(params data_set_management.FilesHeadParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.FilesHead has not yet been implemented")
		}),
		ApprovalSystemManagementHPCApprovedResourceRequestHandler: approval_system_management.HPCApprovedResourceRequestHandlerFunc(func(params approval_system_management.HPCApprovedResourceRequestParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation approval_system_management.HPCApprovedResourceRequest has not yet been implemented")
		}),
		ApprovalSystemManagementHPCResourceRequestHandler: approval_system_management.HPCResourceRequestHandlerFunc(func(params approval_system_management.HPCResourceRequestParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation approval_system_management.HPCResourceRequest has not yet been implemented")
		}),
		DataSetManagementListingHandler: data_set_management.ListingHandlerFunc(func(params data_set_management.ListingParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.Listing has not yet been implemented")
		}),
		DataSetManagementOptionsDatasetUploadHandler: data_set_management.OptionsDatasetUploadHandlerFunc(func(params data_set_management.OptionsDatasetUploadParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.OptionsDatasetUpload has not yet been implemented")
		}),
		DataSetManagementPIDHandler: data_set_management.PIDHandlerFunc(func(params data_set_management.PIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.PID has not yet been implemented")
		}),
		DataSetManagementPostDatasetStagingDownloadHandler: data_set_management.PostDatasetStagingDownloadHandlerFunc(func(params data_set_management.PostDatasetStagingDownloadParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.PostDatasetStagingDownload has not yet been implemented")
		}),
		DataSetManagementPostDatasetUploadHandler: data_set_management.PostDatasetUploadHandlerFunc(func(params data_set_management.PostDatasetUploadParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.PostDatasetUpload has not yet been implemented")
		}),
		DataSetManagementQueryDatasetsHandler: data_set_management.QueryDatasetsHandlerFunc(func(params data_set_management.QueryDatasetsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.QueryDatasets has not yet been implemented")
		}),
		DataSetManagementRemoveGridmapEntryHandler: data_set_management.RemoveGridmapEntryHandlerFunc(func(params data_set_management.RemoveGridmapEntryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.RemoveGridmapEntry has not yet been implemented")
		}),
		DataSetManagementReplicateHandler: data_set_management.ReplicateHandlerFunc(func(params data_set_management.ReplicateParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.Replicate has not yet been implemented")
		}),
		DataSetManagementSizeHandler: data_set_management.SizeHandlerFunc(func(params data_set_management.SizeParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.Size has not yet been implemented")
		}),
		StagingStageHandler: staging.StageHandlerFunc(func(params staging.StageParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation staging.Stage has not yet been implemented")
		}),
		StagingStagingInfoHandler: staging.StagingInfoHandlerFunc(func(params staging.StagingInfoParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation staging.StagingInfo has not yet been implemented")
		}),
		UsageManagementAddConsumptionHandler: usage_management.AddConsumptionHandlerFunc(func(params usage_management.AddConsumptionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation usage_management.AddConsumption has not yet been implemented")
		}),
		UserOrgManagementAddRoleHandler: user_org_management.AddRoleHandlerFunc(func(params user_org_management.AddRoleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user_org_management.AddRole has not yet been implemented")
		}),
		UserOrgManagementAddUserToOrganizationHandler: user_org_management.AddUserToOrganizationHandlerFunc(func(params user_org_management.AddUserToOrganizationParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user_org_management.AddUserToOrganization has not yet been implemented")
		}),
		UserOrgManagementAddUserToProjectHandler: user_org_management.AddUserToProjectHandlerFunc(func(params user_org_management.AddUserToProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user_org_management.AddUserToProject has not yet been implemented")
		}),
		WorkflowManagementCancelWorkflowExecutionHandler: workflow_management.CancelWorkflowExecutionHandlerFunc(func(params workflow_management.CancelWorkflowExecutionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation workflow_management.CancelWorkflowExecution has not yet been implemented")
		}),
		UserOrgManagementClearRoleHandler: user_org_management.ClearRoleHandlerFunc(func(params user_org_management.ClearRoleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user_org_management.ClearRole has not yet been implemented")
		}),
		DataSetManagementCreateDatasetHandler: data_set_management.CreateDatasetHandlerFunc(func(params data_set_management.CreateDatasetParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.CreateDataset has not yet been implemented")
		}),
		UserOrgManagementCreateHPCResourceHandler: user_org_management.CreateHPCResourceHandlerFunc(func(params user_org_management.CreateHPCResourceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user_org_management.CreateHPCResource has not yet been implemented")
		}),
		UserOrgManagementCreateOrganizationHandler: user_org_management.CreateOrganizationHandlerFunc(func(params user_org_management.CreateOrganizationParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user_org_management.CreateOrganization has not yet been implemented")
		}),
		UserOrgManagementCreateProjectHandler: user_org_management.CreateProjectHandlerFunc(func(params user_org_management.CreateProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user_org_management.CreateProject has not yet been implemented")
		}),
		UserOrgManagementCreateUserHandler: user_org_management.CreateUserHandlerFunc(func(params user_org_management.CreateUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user_org_management.CreateUser has not yet been implemented")
		}),
		WorkflowManagementCreateWorkflowHandler: workflow_management.CreateWorkflowHandlerFunc(func(params workflow_management.CreateWorkflowParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation workflow_management.CreateWorkflow has not yet been implemented")
		}),
		WorkflowManagementCreateWorkflowExecutionHandler: workflow_management.CreateWorkflowExecutionHandlerFunc(func(params workflow_management.CreateWorkflowExecutionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation workflow_management.CreateWorkflowExecution has not yet been implemented")
		}),
		WorkflowManagementCreateWorkflowExecutionsHandler: workflow_management.CreateWorkflowExecutionsHandlerFunc(func(params workflow_management.CreateWorkflowExecutionsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation workflow_management.CreateWorkflowExecutions has not yet been implemented")
		}),
		UsageManagementDecreaseCreditHandler: usage_management.DecreaseCreditHandlerFunc(func(params usage_management.DecreaseCreditParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation usage_management.DecreaseCredit has not yet been implemented")
		}),
		UserOrgManagementDeleteHPCResourceHandler: user_org_management.DeleteHPCResourceHandlerFunc(func(params user_org_management.DeleteHPCResourceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user_org_management.DeleteHPCResource has not yet been implemented")
		}),
		UserOrgManagementDeleteOrganizationHandler: user_org_management.DeleteOrganizationHandlerFunc(func(params user_org_management.DeleteOrganizationParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user_org_management.DeleteOrganization has not yet been implemented")
		}),
		UserOrgManagementDeleteProjectHandler: user_org_management.DeleteProjectHandlerFunc(func(params user_org_management.DeleteProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user_org_management.DeleteProject has not yet been implemented")
		}),
		UserOrgManagementDeleteUserHandler: user_org_management.DeleteUserHandlerFunc(func(params user_org_management.DeleteUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user_org_management.DeleteUser has not yet been implemented")
		}),
		UserOrgManagementDeleteUserFromOrganizationHandler: user_org_management.DeleteUserFromOrganizationHandlerFunc(func(params user_org_management.DeleteUserFromOrganizationParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user_org_management.DeleteUserFromOrganization has not yet been implemented")
		}),
		UserOrgManagementDeleteUserFromProjectHandler: user_org_management.DeleteUserFromProjectHandlerFunc(func(params user_org_management.DeleteUserFromProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user_org_management.DeleteUserFromProject has not yet been implemented")
		}),
		WorkflowManagementDeleteWorkflowExecutionHandler: workflow_management.DeleteWorkflowExecutionHandlerFunc(func(params workflow_management.DeleteWorkflowExecutionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation workflow_management.DeleteWorkflowExecution has not yet been implemented")
		}),
		ClusterInformationGetCommandTemplateHandler: cluster_information.GetCommandTemplateHandlerFunc(func(params cluster_information.GetCommandTemplateParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation cluster_information.GetCommandTemplate has not yet been implemented")
		}),
		UsageManagementGetCreditHandler: usage_management.GetCreditHandlerFunc(func(params usage_management.GetCreditParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation usage_management.GetCredit has not yet been implemented")
		}),
		UserOrgManagementGetHPCResourceHandler: user_org_management.GetHPCResourceHandlerFunc(func(params user_org_management.GetHPCResourceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user_org_management.GetHPCResource has not yet been implemented")
		}),
		UsageManagementGetHistoryHandler: usage_management.GetHistoryHandlerFunc(func(params usage_management.GetHistoryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation usage_management.GetHistory has not yet been implemented")
		}),
		UserOrgManagementGetOrganizationHandler: user_org_management.GetOrganizationHandlerFunc(func(params user_org_management.GetOrganizationParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user_org_management.GetOrganization has not yet been implemented")
		}),
		UserOrgManagementGetProjectHandler: user_org_management.GetProjectHandlerFunc(func(params user_org_management.GetProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user_org_management.GetProject has not yet been implemented")
		}),
		UsageManagementGetUsageHandler: usage_management.GetUsageHandlerFunc(func(params usage_management.GetUsageParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation usage_management.GetUsage has not yet been implemented")
		}),
		UserOrgManagementGetUserHandler: user_org_management.GetUserHandlerFunc(func(params user_org_management.GetUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user_org_management.GetUser has not yet been implemented")
		}),
		WorkflowManagementGetWorkflowHandler: workflow_management.GetWorkflowHandlerFunc(func(params workflow_management.GetWorkflowParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation workflow_management.GetWorkflow has not yet been implemented")
		}),
		WorkflowManagementGetWorkflowExecutionDetailHandler: workflow_management.GetWorkflowExecutionDetailHandlerFunc(func(params workflow_management.GetWorkflowExecutionDetailParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation workflow_management.GetWorkflowExecutionDetail has not yet been implemented")
		}),
		WorkflowManagementGetWorkflowExecutionLogsHandler: workflow_management.GetWorkflowExecutionLogsHandlerFunc(func(params workflow_management.GetWorkflowExecutionLogsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation workflow_management.GetWorkflowExecutionLogs has not yet been implemented")
		}),
		WorkflowManagementGetWorkflowExecutionStepStatusHandler: workflow_management.GetWorkflowExecutionStepStatusHandlerFunc(func(params workflow_management.GetWorkflowExecutionStepStatusParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation workflow_management.GetWorkflowExecutionStepStatus has not yet been implemented")
		}),
		WorkflowManagementGetWorkflowTemplateHandler: workflow_management.GetWorkflowTemplateHandlerFunc(func(params workflow_management.GetWorkflowTemplateParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation workflow_management.GetWorkflowTemplate has not yet been implemented")
		}),
		WorkflowManagementGetWorkflowTemplatesHandler: workflow_management.GetWorkflowTemplatesHandlerFunc(func(params workflow_management.GetWorkflowTemplatesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation workflow_management.GetWorkflowTemplates has not yet been implemented")
		}),
		WorkflowManagementGetWorkflowsHandler: workflow_management.GetWorkflowsHandlerFunc(func(params workflow_management.GetWorkflowsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation workflow_management.GetWorkflows has not yet been implemented")
		}),
		UsageManagementIncreaseCreditHandler: usage_management.IncreaseCreditHandlerFunc(func(params usage_management.IncreaseCreditParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation usage_management.IncreaseCredit has not yet been implemented")
		}),
		ClusterInformationListAvailableClustersHandler: cluster_information.ListAvailableClustersHandlerFunc(func(params cluster_information.ListAvailableClustersParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation cluster_information.ListAvailableClusters has not yet been implemented")
		}),
		UserOrgManagementListHPCResourcesHandler: user_org_management.ListHPCResourcesHandlerFunc(func(params user_org_management.ListHPCResourcesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user_org_management.ListHPCResources has not yet been implemented")
		}),
		UserOrgManagementListOrganizationsHandler: user_org_management.ListOrganizationsHandlerFunc(func(params user_org_management.ListOrganizationsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user_org_management.ListOrganizations has not yet been implemented")
		}),
		ApprovalSystemManagementListProjectHPCApprovedResourceRequestHandler: approval_system_management.ListProjectHPCApprovedResourceRequestHandlerFunc(func(params approval_system_management.ListProjectHPCApprovedResourceRequestParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation approval_system_management.ListProjectHPCApprovedResourceRequest has not yet been implemented")
		}),
		ApprovalSystemManagementListProjectHPCResourceRequestHandler: approval_system_management.ListProjectHPCResourceRequestHandlerFunc(func(params approval_system_management.ListProjectHPCResourceRequestParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation approval_system_management.ListProjectHPCResourceRequest has not yet been implemented")
		}),
		UserOrgManagementListProjectsHandler: user_org_management.ListProjectsHandlerFunc(func(params user_org_management.ListProjectsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user_org_management.ListProjects has not yet been implemented")
		}),
		ApprovalSystemManagementListResourcesHandler: approval_system_management.ListResourcesHandlerFunc(func(params approval_system_management.ListResourcesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation approval_system_management.ListResources has not yet been implemented")
		}),
		UserOrgManagementListUsersHandler: user_org_management.ListUsersHandlerFunc(func(params user_org_management.ListUsersParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user_org_management.ListUsers has not yet been implemented")
		}),
		WorkflowManagementListWorkflowExecutionsHandler: workflow_management.ListWorkflowExecutionsHandlerFunc(func(params workflow_management.ListWorkflowExecutionsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation workflow_management.ListWorkflowExecutions has not yet been implemented")
		}),
		UserOrgManagementUpdateHPCResourceHandler: user_org_management.UpdateHPCResourceHandlerFunc(func(params user_org_management.UpdateHPCResourceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user_org_management.UpdateHPCResource has not yet been implemented")
		}),
		UserOrgManagementUpdateOrganizationHandler: user_org_management.UpdateOrganizationHandlerFunc(func(params user_org_management.UpdateOrganizationParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user_org_management.UpdateOrganization has not yet been implemented")
		}),
		UserOrgManagementUpdateProjectHandler: user_org_management.UpdateProjectHandlerFunc(func(params user_org_management.UpdateProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user_org_management.UpdateProject has not yet been implemented")
		}),
		UserOrgManagementUpdateUserHandler: user_org_management.UpdateUserHandlerFunc(func(params user_org_management.UpdateUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user_org_management.UpdateUser has not yet been implemented")
		}),
		WorkflowManagementUploadWorkflowTemplateHandler: workflow_management.UploadWorkflowTemplateHandlerFunc(func(params workflow_management.UploadWorkflowTemplateParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation workflow_management.UploadWorkflowTemplate has not yet been implemented")
		}),

		// Applies when the "X-API-KEY" header is set
		APIKeyHeaderAuth: func(token string) (interface{}, error) {
			return nil, errors.NotImplemented("api key auth (APIKeyHeader) X-API-KEY from header param [X-API-KEY] has not yet been implemented")
		},
		// Applies when the "api_key" query is set
		APIKeyParamAuth: func(token string) (interface{}, error) {
			return nil, errors.NotImplemented("api key auth (APIKeyParam) api_key from query param [api_key] has not yet been implemented")
		},
		KeycloakAuth: func(token string, scopes []string) (interface{}, error) {
			return nil, errors.NotImplemented("oauth2 bearer auth (Keycloak) has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*LEXISPortalAPIAPI The LEXIS Portal API serves as the API proxy to all the interfaces that interact with the parts involved in LEXIS. */
type LEXISPortalAPIAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// BinConsumer registers a consumer for the following mime types:
	//   - application/offset+octet-stream
	BinConsumer runtime.Consumer
	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for the following mime types:
	//   - multipart/form-data
	MultipartformConsumer runtime.Consumer

	// BinProducer registers a producer for the following mime types:
	//   - application/octet-stream
	BinProducer runtime.Producer
	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// APIKeyHeaderAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key X-API-KEY provided in the header
	APIKeyHeaderAuth func(string) (interface{}, error)

	// APIKeyParamAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key api_key provided in the query
	APIKeyParamAuth func(string) (interface{}, error)

	// KeycloakAuth registers a function that takes an access token and a collection of required scopes and returns a principal
	// it performs authentication based on an oauth2 bearer token provided in the request
	KeycloakAuth func(string, []string) (interface{}, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// DataSetManagementAddGridmapEntryHandler sets the operation handler for the add gridmap entry operation
	DataSetManagementAddGridmapEntryHandler data_set_management.AddGridmapEntryHandler
	// DataSetManagementCertificateHandler sets the operation handler for the certificate operation
	DataSetManagementCertificateHandler data_set_management.CertificateHandler
	// StagingCheckCloudNFSExportAddStatusHandler sets the operation handler for the check cloud n f s export add status operation
	StagingCheckCloudNFSExportAddStatusHandler staging.CheckCloudNFSExportAddStatusHandler
	// StagingCheckCloudNFSExportRemoveStatusHandler sets the operation handler for the check cloud n f s export remove status operation
	StagingCheckCloudNFSExportRemoveStatusHandler staging.CheckCloudNFSExportRemoveStatusHandler
	// StagingCheckCompressToZipStatusHandler sets the operation handler for the check compress to zip status operation
	StagingCheckCompressToZipStatusHandler staging.CheckCompressToZipStatusHandler
	// DataSetManagementCheckCompressionEncryptionStatusHandler sets the operation handler for the check compression encryption status operation
	DataSetManagementCheckCompressionEncryptionStatusHandler data_set_management.CheckCompressionEncryptionStatusHandler
	// DataSetManagementCheckCompressionStatusHandler sets the operation handler for the check compression status operation
	DataSetManagementCheckCompressionStatusHandler data_set_management.CheckCompressionStatusHandler
	// DataSetManagementCheckDecompressionStatusHandler sets the operation handler for the check decompression status operation
	DataSetManagementCheckDecompressionStatusHandler data_set_management.CheckDecompressionStatusHandler
	// DataSetManagementCheckDecryptionDecompressionStatusHandler sets the operation handler for the check decryption decompression status operation
	DataSetManagementCheckDecryptionDecompressionStatusHandler data_set_management.CheckDecryptionDecompressionStatusHandler
	// DataSetManagementCheckDecryptionStatusHandler sets the operation handler for the check decryption status operation
	DataSetManagementCheckDecryptionStatusHandler data_set_management.CheckDecryptionStatusHandler
	// StagingCheckDeletionStatusHandler sets the operation handler for the check deletion status operation
	StagingCheckDeletionStatusHandler staging.CheckDeletionStatusHandler
	// StagingCheckDuplicationStatusHandler sets the operation handler for the check duplication status operation
	StagingCheckDuplicationStatusHandler staging.CheckDuplicationStatusHandler
	// DataSetManagementCheckEncryptionStatusHandler sets the operation handler for the check encryption status operation
	DataSetManagementCheckEncryptionStatusHandler data_set_management.CheckEncryptionStatusHandler
	// DataSetManagementCheckPIDStatusHandler sets the operation handler for the check p ID status operation
	DataSetManagementCheckPIDStatusHandler data_set_management.CheckPIDStatusHandler
	// DataSetManagementCheckPermissionHandler sets the operation handler for the check permission operation
	DataSetManagementCheckPermissionHandler data_set_management.CheckPermissionHandler
	// DataSetManagementCheckReplicateStatusHandler sets the operation handler for the check replicate status operation
	DataSetManagementCheckReplicateStatusHandler data_set_management.CheckReplicateStatusHandler
	// DataSetManagementCheckSizeStatusHandler sets the operation handler for the check size status operation
	DataSetManagementCheckSizeStatusHandler data_set_management.CheckSizeStatusHandler
	// StagingCheckStageStatusHandler sets the operation handler for the check stage status operation
	StagingCheckStageStatusHandler staging.CheckStageStatusHandler
	// StagingCloudNFSExportAddHandler sets the operation handler for the cloud n f s export add operation
	StagingCloudNFSExportAddHandler staging.CloudNFSExportAddHandler
	// StagingCloudNFSExportRemoveHandler sets the operation handler for the cloud n f s export remove operation
	StagingCloudNFSExportRemoveHandler staging.CloudNFSExportRemoveHandler
	// DataSetManagementCompressHandler sets the operation handler for the compress operation
	DataSetManagementCompressHandler data_set_management.CompressHandler
	// DataSetManagementCompressEncryptHandler sets the operation handler for the compress encrypt operation
	DataSetManagementCompressEncryptHandler data_set_management.CompressEncryptHandler
	// StagingCompressToZipHandler sets the operation handler for the compress to zip operation
	StagingCompressToZipHandler staging.CompressToZipHandler
	// ApprovalSystemManagementCreateApprovedResourceRequestHandler sets the operation handler for the create approved resource request operation
	ApprovalSystemManagementCreateApprovedResourceRequestHandler approval_system_management.CreateApprovedResourceRequestHandler
	// ApprovalSystemManagementCreateResourceRequestHandler sets the operation handler for the create resource request operation
	ApprovalSystemManagementCreateResourceRequestHandler approval_system_management.CreateResourceRequestHandler
	// DataSetManagementCreateSSHFSExportHandler sets the operation handler for the create SSH f s export operation
	DataSetManagementCreateSSHFSExportHandler data_set_management.CreateSSHFSExportHandler
	// DataSetManagementDecompressHandler sets the operation handler for the decompress operation
	DataSetManagementDecompressHandler data_set_management.DecompressHandler
	// DataSetManagementDecryptHandler sets the operation handler for the decrypt operation
	DataSetManagementDecryptHandler data_set_management.DecryptHandler
	// DataSetManagementDecryptDecompressHandler sets the operation handler for the decrypt decompress operation
	DataSetManagementDecryptDecompressHandler data_set_management.DecryptDecompressHandler
	// StagingDeleteHandler sets the operation handler for the delete operation
	StagingDeleteHandler staging.DeleteHandler
	// DataSetManagementDeleteDatasetHandler sets the operation handler for the delete dataset operation
	DataSetManagementDeleteDatasetHandler data_set_management.DeleteDatasetHandler
	// DataSetManagementDeleteDatasetByMetadataHandler sets the operation handler for the delete dataset by metadata operation
	DataSetManagementDeleteDatasetByMetadataHandler data_set_management.DeleteDatasetByMetadataHandler
	// DataSetManagementDeleteSSHFSExportHandler sets the operation handler for the delete SSH f s export operation
	DataSetManagementDeleteSSHFSExportHandler data_set_management.DeleteSSHFSExportHandler
	// WorkflowManagementDeleteWorkflowHandler sets the operation handler for the delete workflow operation
	WorkflowManagementDeleteWorkflowHandler workflow_management.DeleteWorkflowHandler
	// DataSetManagementDownloadDatasetHandler sets the operation handler for the download dataset operation
	DataSetManagementDownloadDatasetHandler data_set_management.DownloadDatasetHandler
	// StagingDuplicateHandler sets the operation handler for the duplicate operation
	StagingDuplicateHandler staging.DuplicateHandler
	// DataSetManagementEncryptHandler sets the operation handler for the encrypt operation
	DataSetManagementEncryptHandler data_set_management.EncryptHandler
	// DataSetManagementFilePatchHandler sets the operation handler for the file patch operation
	DataSetManagementFilePatchHandler data_set_management.FilePatchHandler
	// DataSetManagementFilesDeleteHandler sets the operation handler for the files delete operation
	DataSetManagementFilesDeleteHandler data_set_management.FilesDeleteHandler
	// DataSetManagementFilesHeadHandler sets the operation handler for the files head operation
	DataSetManagementFilesHeadHandler data_set_management.FilesHeadHandler
	// ApprovalSystemManagementHPCApprovedResourceRequestHandler sets the operation handler for the h p c approved resource request operation
	ApprovalSystemManagementHPCApprovedResourceRequestHandler approval_system_management.HPCApprovedResourceRequestHandler
	// ApprovalSystemManagementHPCResourceRequestHandler sets the operation handler for the h p c resource request operation
	ApprovalSystemManagementHPCResourceRequestHandler approval_system_management.HPCResourceRequestHandler
	// DataSetManagementListingHandler sets the operation handler for the listing operation
	DataSetManagementListingHandler data_set_management.ListingHandler
	// DataSetManagementOptionsDatasetUploadHandler sets the operation handler for the options dataset upload operation
	DataSetManagementOptionsDatasetUploadHandler data_set_management.OptionsDatasetUploadHandler
	// DataSetManagementPIDHandler sets the operation handler for the p ID operation
	DataSetManagementPIDHandler data_set_management.PIDHandler
	// DataSetManagementPostDatasetStagingDownloadHandler sets the operation handler for the post dataset staging download operation
	DataSetManagementPostDatasetStagingDownloadHandler data_set_management.PostDatasetStagingDownloadHandler
	// DataSetManagementPostDatasetUploadHandler sets the operation handler for the post dataset upload operation
	DataSetManagementPostDatasetUploadHandler data_set_management.PostDatasetUploadHandler
	// DataSetManagementQueryDatasetsHandler sets the operation handler for the query datasets operation
	DataSetManagementQueryDatasetsHandler data_set_management.QueryDatasetsHandler
	// DataSetManagementRemoveGridmapEntryHandler sets the operation handler for the remove gridmap entry operation
	DataSetManagementRemoveGridmapEntryHandler data_set_management.RemoveGridmapEntryHandler
	// DataSetManagementReplicateHandler sets the operation handler for the replicate operation
	DataSetManagementReplicateHandler data_set_management.ReplicateHandler
	// DataSetManagementSizeHandler sets the operation handler for the size operation
	DataSetManagementSizeHandler data_set_management.SizeHandler
	// StagingStageHandler sets the operation handler for the stage operation
	StagingStageHandler staging.StageHandler
	// StagingStagingInfoHandler sets the operation handler for the staging info operation
	StagingStagingInfoHandler staging.StagingInfoHandler
	// UsageManagementAddConsumptionHandler sets the operation handler for the add consumption operation
	UsageManagementAddConsumptionHandler usage_management.AddConsumptionHandler
	// UserOrgManagementAddRoleHandler sets the operation handler for the add role operation
	UserOrgManagementAddRoleHandler user_org_management.AddRoleHandler
	// UserOrgManagementAddUserToOrganizationHandler sets the operation handler for the add user to organization operation
	UserOrgManagementAddUserToOrganizationHandler user_org_management.AddUserToOrganizationHandler
	// UserOrgManagementAddUserToProjectHandler sets the operation handler for the add user to project operation
	UserOrgManagementAddUserToProjectHandler user_org_management.AddUserToProjectHandler
	// WorkflowManagementCancelWorkflowExecutionHandler sets the operation handler for the cancel workflow execution operation
	WorkflowManagementCancelWorkflowExecutionHandler workflow_management.CancelWorkflowExecutionHandler
	// UserOrgManagementClearRoleHandler sets the operation handler for the clear role operation
	UserOrgManagementClearRoleHandler user_org_management.ClearRoleHandler
	// DataSetManagementCreateDatasetHandler sets the operation handler for the create dataset operation
	DataSetManagementCreateDatasetHandler data_set_management.CreateDatasetHandler
	// UserOrgManagementCreateHPCResourceHandler sets the operation handler for the create h p c resource operation
	UserOrgManagementCreateHPCResourceHandler user_org_management.CreateHPCResourceHandler
	// UserOrgManagementCreateOrganizationHandler sets the operation handler for the create organization operation
	UserOrgManagementCreateOrganizationHandler user_org_management.CreateOrganizationHandler
	// UserOrgManagementCreateProjectHandler sets the operation handler for the create project operation
	UserOrgManagementCreateProjectHandler user_org_management.CreateProjectHandler
	// UserOrgManagementCreateUserHandler sets the operation handler for the create user operation
	UserOrgManagementCreateUserHandler user_org_management.CreateUserHandler
	// WorkflowManagementCreateWorkflowHandler sets the operation handler for the create workflow operation
	WorkflowManagementCreateWorkflowHandler workflow_management.CreateWorkflowHandler
	// WorkflowManagementCreateWorkflowExecutionHandler sets the operation handler for the create workflow execution operation
	WorkflowManagementCreateWorkflowExecutionHandler workflow_management.CreateWorkflowExecutionHandler
	// WorkflowManagementCreateWorkflowExecutionsHandler sets the operation handler for the create workflow executions operation
	WorkflowManagementCreateWorkflowExecutionsHandler workflow_management.CreateWorkflowExecutionsHandler
	// UsageManagementDecreaseCreditHandler sets the operation handler for the decrease credit operation
	UsageManagementDecreaseCreditHandler usage_management.DecreaseCreditHandler
	// UserOrgManagementDeleteHPCResourceHandler sets the operation handler for the delete h p c resource operation
	UserOrgManagementDeleteHPCResourceHandler user_org_management.DeleteHPCResourceHandler
	// UserOrgManagementDeleteOrganizationHandler sets the operation handler for the delete organization operation
	UserOrgManagementDeleteOrganizationHandler user_org_management.DeleteOrganizationHandler
	// UserOrgManagementDeleteProjectHandler sets the operation handler for the delete project operation
	UserOrgManagementDeleteProjectHandler user_org_management.DeleteProjectHandler
	// UserOrgManagementDeleteUserHandler sets the operation handler for the delete user operation
	UserOrgManagementDeleteUserHandler user_org_management.DeleteUserHandler
	// UserOrgManagementDeleteUserFromOrganizationHandler sets the operation handler for the delete user from organization operation
	UserOrgManagementDeleteUserFromOrganizationHandler user_org_management.DeleteUserFromOrganizationHandler
	// UserOrgManagementDeleteUserFromProjectHandler sets the operation handler for the delete user from project operation
	UserOrgManagementDeleteUserFromProjectHandler user_org_management.DeleteUserFromProjectHandler
	// WorkflowManagementDeleteWorkflowExecutionHandler sets the operation handler for the delete workflow execution operation
	WorkflowManagementDeleteWorkflowExecutionHandler workflow_management.DeleteWorkflowExecutionHandler
	// ClusterInformationGetCommandTemplateHandler sets the operation handler for the get command template operation
	ClusterInformationGetCommandTemplateHandler cluster_information.GetCommandTemplateHandler
	// UsageManagementGetCreditHandler sets the operation handler for the get credit operation
	UsageManagementGetCreditHandler usage_management.GetCreditHandler
	// UserOrgManagementGetHPCResourceHandler sets the operation handler for the get h p c resource operation
	UserOrgManagementGetHPCResourceHandler user_org_management.GetHPCResourceHandler
	// UsageManagementGetHistoryHandler sets the operation handler for the get history operation
	UsageManagementGetHistoryHandler usage_management.GetHistoryHandler
	// UserOrgManagementGetOrganizationHandler sets the operation handler for the get organization operation
	UserOrgManagementGetOrganizationHandler user_org_management.GetOrganizationHandler
	// UserOrgManagementGetProjectHandler sets the operation handler for the get project operation
	UserOrgManagementGetProjectHandler user_org_management.GetProjectHandler
	// UsageManagementGetUsageHandler sets the operation handler for the get usage operation
	UsageManagementGetUsageHandler usage_management.GetUsageHandler
	// UserOrgManagementGetUserHandler sets the operation handler for the get user operation
	UserOrgManagementGetUserHandler user_org_management.GetUserHandler
	// WorkflowManagementGetWorkflowHandler sets the operation handler for the get workflow operation
	WorkflowManagementGetWorkflowHandler workflow_management.GetWorkflowHandler
	// WorkflowManagementGetWorkflowExecutionDetailHandler sets the operation handler for the get workflow execution detail operation
	WorkflowManagementGetWorkflowExecutionDetailHandler workflow_management.GetWorkflowExecutionDetailHandler
	// WorkflowManagementGetWorkflowExecutionLogsHandler sets the operation handler for the get workflow execution logs operation
	WorkflowManagementGetWorkflowExecutionLogsHandler workflow_management.GetWorkflowExecutionLogsHandler
	// WorkflowManagementGetWorkflowExecutionStepStatusHandler sets the operation handler for the get workflow execution step status operation
	WorkflowManagementGetWorkflowExecutionStepStatusHandler workflow_management.GetWorkflowExecutionStepStatusHandler
	// WorkflowManagementGetWorkflowTemplateHandler sets the operation handler for the get workflow template operation
	WorkflowManagementGetWorkflowTemplateHandler workflow_management.GetWorkflowTemplateHandler
	// WorkflowManagementGetWorkflowTemplatesHandler sets the operation handler for the get workflow templates operation
	WorkflowManagementGetWorkflowTemplatesHandler workflow_management.GetWorkflowTemplatesHandler
	// WorkflowManagementGetWorkflowsHandler sets the operation handler for the get workflows operation
	WorkflowManagementGetWorkflowsHandler workflow_management.GetWorkflowsHandler
	// UsageManagementIncreaseCreditHandler sets the operation handler for the increase credit operation
	UsageManagementIncreaseCreditHandler usage_management.IncreaseCreditHandler
	// ClusterInformationListAvailableClustersHandler sets the operation handler for the list available clusters operation
	ClusterInformationListAvailableClustersHandler cluster_information.ListAvailableClustersHandler
	// UserOrgManagementListHPCResourcesHandler sets the operation handler for the list h p c resources operation
	UserOrgManagementListHPCResourcesHandler user_org_management.ListHPCResourcesHandler
	// UserOrgManagementListOrganizationsHandler sets the operation handler for the list organizations operation
	UserOrgManagementListOrganizationsHandler user_org_management.ListOrganizationsHandler
	// ApprovalSystemManagementListProjectHPCApprovedResourceRequestHandler sets the operation handler for the list project h p c approved resource request operation
	ApprovalSystemManagementListProjectHPCApprovedResourceRequestHandler approval_system_management.ListProjectHPCApprovedResourceRequestHandler
	// ApprovalSystemManagementListProjectHPCResourceRequestHandler sets the operation handler for the list project h p c resource request operation
	ApprovalSystemManagementListProjectHPCResourceRequestHandler approval_system_management.ListProjectHPCResourceRequestHandler
	// UserOrgManagementListProjectsHandler sets the operation handler for the list projects operation
	UserOrgManagementListProjectsHandler user_org_management.ListProjectsHandler
	// ApprovalSystemManagementListResourcesHandler sets the operation handler for the list resources operation
	ApprovalSystemManagementListResourcesHandler approval_system_management.ListResourcesHandler
	// UserOrgManagementListUsersHandler sets the operation handler for the list users operation
	UserOrgManagementListUsersHandler user_org_management.ListUsersHandler
	// WorkflowManagementListWorkflowExecutionsHandler sets the operation handler for the list workflow executions operation
	WorkflowManagementListWorkflowExecutionsHandler workflow_management.ListWorkflowExecutionsHandler
	// UserOrgManagementUpdateHPCResourceHandler sets the operation handler for the update h p c resource operation
	UserOrgManagementUpdateHPCResourceHandler user_org_management.UpdateHPCResourceHandler
	// UserOrgManagementUpdateOrganizationHandler sets the operation handler for the update organization operation
	UserOrgManagementUpdateOrganizationHandler user_org_management.UpdateOrganizationHandler
	// UserOrgManagementUpdateProjectHandler sets the operation handler for the update project operation
	UserOrgManagementUpdateProjectHandler user_org_management.UpdateProjectHandler
	// UserOrgManagementUpdateUserHandler sets the operation handler for the update user operation
	UserOrgManagementUpdateUserHandler user_org_management.UpdateUserHandler
	// WorkflowManagementUploadWorkflowTemplateHandler sets the operation handler for the upload workflow template operation
	WorkflowManagementUploadWorkflowTemplateHandler workflow_management.UploadWorkflowTemplateHandler
	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *LEXISPortalAPIAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *LEXISPortalAPIAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *LEXISPortalAPIAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *LEXISPortalAPIAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *LEXISPortalAPIAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *LEXISPortalAPIAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *LEXISPortalAPIAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *LEXISPortalAPIAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *LEXISPortalAPIAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the LEXISPortalAPIAPI
func (o *LEXISPortalAPIAPI) Validate() error {
	var unregistered []string

	if o.BinConsumer == nil {
		unregistered = append(unregistered, "BinConsumer")
	}
	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}
	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}

	if o.BinProducer == nil {
		unregistered = append(unregistered, "BinProducer")
	}
	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.APIKeyHeaderAuth == nil {
		unregistered = append(unregistered, "XAPIKEYAuth")
	}
	if o.APIKeyParamAuth == nil {
		unregistered = append(unregistered, "APIKeyAuth")
	}
	if o.KeycloakAuth == nil {
		unregistered = append(unregistered, "KeycloakAuth")
	}

	if o.DataSetManagementAddGridmapEntryHandler == nil {
		unregistered = append(unregistered, "data_set_management.AddGridmapEntryHandler")
	}
	if o.DataSetManagementCertificateHandler == nil {
		unregistered = append(unregistered, "data_set_management.CertificateHandler")
	}
	if o.StagingCheckCloudNFSExportAddStatusHandler == nil {
		unregistered = append(unregistered, "staging.CheckCloudNFSExportAddStatusHandler")
	}
	if o.StagingCheckCloudNFSExportRemoveStatusHandler == nil {
		unregistered = append(unregistered, "staging.CheckCloudNFSExportRemoveStatusHandler")
	}
	if o.StagingCheckCompressToZipStatusHandler == nil {
		unregistered = append(unregistered, "staging.CheckCompressToZipStatusHandler")
	}
	if o.DataSetManagementCheckCompressionEncryptionStatusHandler == nil {
		unregistered = append(unregistered, "data_set_management.CheckCompressionEncryptionStatusHandler")
	}
	if o.DataSetManagementCheckCompressionStatusHandler == nil {
		unregistered = append(unregistered, "data_set_management.CheckCompressionStatusHandler")
	}
	if o.DataSetManagementCheckDecompressionStatusHandler == nil {
		unregistered = append(unregistered, "data_set_management.CheckDecompressionStatusHandler")
	}
	if o.DataSetManagementCheckDecryptionDecompressionStatusHandler == nil {
		unregistered = append(unregistered, "data_set_management.CheckDecryptionDecompressionStatusHandler")
	}
	if o.DataSetManagementCheckDecryptionStatusHandler == nil {
		unregistered = append(unregistered, "data_set_management.CheckDecryptionStatusHandler")
	}
	if o.StagingCheckDeletionStatusHandler == nil {
		unregistered = append(unregistered, "staging.CheckDeletionStatusHandler")
	}
	if o.StagingCheckDuplicationStatusHandler == nil {
		unregistered = append(unregistered, "staging.CheckDuplicationStatusHandler")
	}
	if o.DataSetManagementCheckEncryptionStatusHandler == nil {
		unregistered = append(unregistered, "data_set_management.CheckEncryptionStatusHandler")
	}
	if o.DataSetManagementCheckPIDStatusHandler == nil {
		unregistered = append(unregistered, "data_set_management.CheckPIDStatusHandler")
	}
	if o.DataSetManagementCheckPermissionHandler == nil {
		unregistered = append(unregistered, "data_set_management.CheckPermissionHandler")
	}
	if o.DataSetManagementCheckReplicateStatusHandler == nil {
		unregistered = append(unregistered, "data_set_management.CheckReplicateStatusHandler")
	}
	if o.DataSetManagementCheckSizeStatusHandler == nil {
		unregistered = append(unregistered, "data_set_management.CheckSizeStatusHandler")
	}
	if o.StagingCheckStageStatusHandler == nil {
		unregistered = append(unregistered, "staging.CheckStageStatusHandler")
	}
	if o.StagingCloudNFSExportAddHandler == nil {
		unregistered = append(unregistered, "staging.CloudNFSExportAddHandler")
	}
	if o.StagingCloudNFSExportRemoveHandler == nil {
		unregistered = append(unregistered, "staging.CloudNFSExportRemoveHandler")
	}
	if o.DataSetManagementCompressHandler == nil {
		unregistered = append(unregistered, "data_set_management.CompressHandler")
	}
	if o.DataSetManagementCompressEncryptHandler == nil {
		unregistered = append(unregistered, "data_set_management.CompressEncryptHandler")
	}
	if o.StagingCompressToZipHandler == nil {
		unregistered = append(unregistered, "staging.CompressToZipHandler")
	}
	if o.ApprovalSystemManagementCreateApprovedResourceRequestHandler == nil {
		unregistered = append(unregistered, "approval_system_management.CreateApprovedResourceRequestHandler")
	}
	if o.ApprovalSystemManagementCreateResourceRequestHandler == nil {
		unregistered = append(unregistered, "approval_system_management.CreateResourceRequestHandler")
	}
	if o.DataSetManagementCreateSSHFSExportHandler == nil {
		unregistered = append(unregistered, "data_set_management.CreateSSHFSExportHandler")
	}
	if o.DataSetManagementDecompressHandler == nil {
		unregistered = append(unregistered, "data_set_management.DecompressHandler")
	}
	if o.DataSetManagementDecryptHandler == nil {
		unregistered = append(unregistered, "data_set_management.DecryptHandler")
	}
	if o.DataSetManagementDecryptDecompressHandler == nil {
		unregistered = append(unregistered, "data_set_management.DecryptDecompressHandler")
	}
	if o.StagingDeleteHandler == nil {
		unregistered = append(unregistered, "staging.DeleteHandler")
	}
	if o.DataSetManagementDeleteDatasetHandler == nil {
		unregistered = append(unregistered, "data_set_management.DeleteDatasetHandler")
	}
	if o.DataSetManagementDeleteDatasetByMetadataHandler == nil {
		unregistered = append(unregistered, "data_set_management.DeleteDatasetByMetadataHandler")
	}
	if o.DataSetManagementDeleteSSHFSExportHandler == nil {
		unregistered = append(unregistered, "data_set_management.DeleteSSHFSExportHandler")
	}
	if o.WorkflowManagementDeleteWorkflowHandler == nil {
		unregistered = append(unregistered, "workflow_management.DeleteWorkflowHandler")
	}
	if o.DataSetManagementDownloadDatasetHandler == nil {
		unregistered = append(unregistered, "data_set_management.DownloadDatasetHandler")
	}
	if o.StagingDuplicateHandler == nil {
		unregistered = append(unregistered, "staging.DuplicateHandler")
	}
	if o.DataSetManagementEncryptHandler == nil {
		unregistered = append(unregistered, "data_set_management.EncryptHandler")
	}
	if o.DataSetManagementFilePatchHandler == nil {
		unregistered = append(unregistered, "data_set_management.FilePatchHandler")
	}
	if o.DataSetManagementFilesDeleteHandler == nil {
		unregistered = append(unregistered, "data_set_management.FilesDeleteHandler")
	}
	if o.DataSetManagementFilesHeadHandler == nil {
		unregistered = append(unregistered, "data_set_management.FilesHeadHandler")
	}
	if o.ApprovalSystemManagementHPCApprovedResourceRequestHandler == nil {
		unregistered = append(unregistered, "approval_system_management.HPCApprovedResourceRequestHandler")
	}
	if o.ApprovalSystemManagementHPCResourceRequestHandler == nil {
		unregistered = append(unregistered, "approval_system_management.HPCResourceRequestHandler")
	}
	if o.DataSetManagementListingHandler == nil {
		unregistered = append(unregistered, "data_set_management.ListingHandler")
	}
	if o.DataSetManagementOptionsDatasetUploadHandler == nil {
		unregistered = append(unregistered, "data_set_management.OptionsDatasetUploadHandler")
	}
	if o.DataSetManagementPIDHandler == nil {
		unregistered = append(unregistered, "data_set_management.PIDHandler")
	}
	if o.DataSetManagementPostDatasetStagingDownloadHandler == nil {
		unregistered = append(unregistered, "data_set_management.PostDatasetStagingDownloadHandler")
	}
	if o.DataSetManagementPostDatasetUploadHandler == nil {
		unregistered = append(unregistered, "data_set_management.PostDatasetUploadHandler")
	}
	if o.DataSetManagementQueryDatasetsHandler == nil {
		unregistered = append(unregistered, "data_set_management.QueryDatasetsHandler")
	}
	if o.DataSetManagementRemoveGridmapEntryHandler == nil {
		unregistered = append(unregistered, "data_set_management.RemoveGridmapEntryHandler")
	}
	if o.DataSetManagementReplicateHandler == nil {
		unregistered = append(unregistered, "data_set_management.ReplicateHandler")
	}
	if o.DataSetManagementSizeHandler == nil {
		unregistered = append(unregistered, "data_set_management.SizeHandler")
	}
	if o.StagingStageHandler == nil {
		unregistered = append(unregistered, "staging.StageHandler")
	}
	if o.StagingStagingInfoHandler == nil {
		unregistered = append(unregistered, "staging.StagingInfoHandler")
	}
	if o.UsageManagementAddConsumptionHandler == nil {
		unregistered = append(unregistered, "usage_management.AddConsumptionHandler")
	}
	if o.UserOrgManagementAddRoleHandler == nil {
		unregistered = append(unregistered, "user_org_management.AddRoleHandler")
	}
	if o.UserOrgManagementAddUserToOrganizationHandler == nil {
		unregistered = append(unregistered, "user_org_management.AddUserToOrganizationHandler")
	}
	if o.UserOrgManagementAddUserToProjectHandler == nil {
		unregistered = append(unregistered, "user_org_management.AddUserToProjectHandler")
	}
	if o.WorkflowManagementCancelWorkflowExecutionHandler == nil {
		unregistered = append(unregistered, "workflow_management.CancelWorkflowExecutionHandler")
	}
	if o.UserOrgManagementClearRoleHandler == nil {
		unregistered = append(unregistered, "user_org_management.ClearRoleHandler")
	}
	if o.DataSetManagementCreateDatasetHandler == nil {
		unregistered = append(unregistered, "data_set_management.CreateDatasetHandler")
	}
	if o.UserOrgManagementCreateHPCResourceHandler == nil {
		unregistered = append(unregistered, "user_org_management.CreateHPCResourceHandler")
	}
	if o.UserOrgManagementCreateOrganizationHandler == nil {
		unregistered = append(unregistered, "user_org_management.CreateOrganizationHandler")
	}
	if o.UserOrgManagementCreateProjectHandler == nil {
		unregistered = append(unregistered, "user_org_management.CreateProjectHandler")
	}
	if o.UserOrgManagementCreateUserHandler == nil {
		unregistered = append(unregistered, "user_org_management.CreateUserHandler")
	}
	if o.WorkflowManagementCreateWorkflowHandler == nil {
		unregistered = append(unregistered, "workflow_management.CreateWorkflowHandler")
	}
	if o.WorkflowManagementCreateWorkflowExecutionHandler == nil {
		unregistered = append(unregistered, "workflow_management.CreateWorkflowExecutionHandler")
	}
	if o.WorkflowManagementCreateWorkflowExecutionsHandler == nil {
		unregistered = append(unregistered, "workflow_management.CreateWorkflowExecutionsHandler")
	}
	if o.UsageManagementDecreaseCreditHandler == nil {
		unregistered = append(unregistered, "usage_management.DecreaseCreditHandler")
	}
	if o.UserOrgManagementDeleteHPCResourceHandler == nil {
		unregistered = append(unregistered, "user_org_management.DeleteHPCResourceHandler")
	}
	if o.UserOrgManagementDeleteOrganizationHandler == nil {
		unregistered = append(unregistered, "user_org_management.DeleteOrganizationHandler")
	}
	if o.UserOrgManagementDeleteProjectHandler == nil {
		unregistered = append(unregistered, "user_org_management.DeleteProjectHandler")
	}
	if o.UserOrgManagementDeleteUserHandler == nil {
		unregistered = append(unregistered, "user_org_management.DeleteUserHandler")
	}
	if o.UserOrgManagementDeleteUserFromOrganizationHandler == nil {
		unregistered = append(unregistered, "user_org_management.DeleteUserFromOrganizationHandler")
	}
	if o.UserOrgManagementDeleteUserFromProjectHandler == nil {
		unregistered = append(unregistered, "user_org_management.DeleteUserFromProjectHandler")
	}
	if o.WorkflowManagementDeleteWorkflowExecutionHandler == nil {
		unregistered = append(unregistered, "workflow_management.DeleteWorkflowExecutionHandler")
	}
	if o.ClusterInformationGetCommandTemplateHandler == nil {
		unregistered = append(unregistered, "cluster_information.GetCommandTemplateHandler")
	}
	if o.UsageManagementGetCreditHandler == nil {
		unregistered = append(unregistered, "usage_management.GetCreditHandler")
	}
	if o.UserOrgManagementGetHPCResourceHandler == nil {
		unregistered = append(unregistered, "user_org_management.GetHPCResourceHandler")
	}
	if o.UsageManagementGetHistoryHandler == nil {
		unregistered = append(unregistered, "usage_management.GetHistoryHandler")
	}
	if o.UserOrgManagementGetOrganizationHandler == nil {
		unregistered = append(unregistered, "user_org_management.GetOrganizationHandler")
	}
	if o.UserOrgManagementGetProjectHandler == nil {
		unregistered = append(unregistered, "user_org_management.GetProjectHandler")
	}
	if o.UsageManagementGetUsageHandler == nil {
		unregistered = append(unregistered, "usage_management.GetUsageHandler")
	}
	if o.UserOrgManagementGetUserHandler == nil {
		unregistered = append(unregistered, "user_org_management.GetUserHandler")
	}
	if o.WorkflowManagementGetWorkflowHandler == nil {
		unregistered = append(unregistered, "workflow_management.GetWorkflowHandler")
	}
	if o.WorkflowManagementGetWorkflowExecutionDetailHandler == nil {
		unregistered = append(unregistered, "workflow_management.GetWorkflowExecutionDetailHandler")
	}
	if o.WorkflowManagementGetWorkflowExecutionLogsHandler == nil {
		unregistered = append(unregistered, "workflow_management.GetWorkflowExecutionLogsHandler")
	}
	if o.WorkflowManagementGetWorkflowExecutionStepStatusHandler == nil {
		unregistered = append(unregistered, "workflow_management.GetWorkflowExecutionStepStatusHandler")
	}
	if o.WorkflowManagementGetWorkflowTemplateHandler == nil {
		unregistered = append(unregistered, "workflow_management.GetWorkflowTemplateHandler")
	}
	if o.WorkflowManagementGetWorkflowTemplatesHandler == nil {
		unregistered = append(unregistered, "workflow_management.GetWorkflowTemplatesHandler")
	}
	if o.WorkflowManagementGetWorkflowsHandler == nil {
		unregistered = append(unregistered, "workflow_management.GetWorkflowsHandler")
	}
	if o.UsageManagementIncreaseCreditHandler == nil {
		unregistered = append(unregistered, "usage_management.IncreaseCreditHandler")
	}
	if o.ClusterInformationListAvailableClustersHandler == nil {
		unregistered = append(unregistered, "cluster_information.ListAvailableClustersHandler")
	}
	if o.UserOrgManagementListHPCResourcesHandler == nil {
		unregistered = append(unregistered, "user_org_management.ListHPCResourcesHandler")
	}
	if o.UserOrgManagementListOrganizationsHandler == nil {
		unregistered = append(unregistered, "user_org_management.ListOrganizationsHandler")
	}
	if o.ApprovalSystemManagementListProjectHPCApprovedResourceRequestHandler == nil {
		unregistered = append(unregistered, "approval_system_management.ListProjectHPCApprovedResourceRequestHandler")
	}
	if o.ApprovalSystemManagementListProjectHPCResourceRequestHandler == nil {
		unregistered = append(unregistered, "approval_system_management.ListProjectHPCResourceRequestHandler")
	}
	if o.UserOrgManagementListProjectsHandler == nil {
		unregistered = append(unregistered, "user_org_management.ListProjectsHandler")
	}
	if o.ApprovalSystemManagementListResourcesHandler == nil {
		unregistered = append(unregistered, "approval_system_management.ListResourcesHandler")
	}
	if o.UserOrgManagementListUsersHandler == nil {
		unregistered = append(unregistered, "user_org_management.ListUsersHandler")
	}
	if o.WorkflowManagementListWorkflowExecutionsHandler == nil {
		unregistered = append(unregistered, "workflow_management.ListWorkflowExecutionsHandler")
	}
	if o.UserOrgManagementUpdateHPCResourceHandler == nil {
		unregistered = append(unregistered, "user_org_management.UpdateHPCResourceHandler")
	}
	if o.UserOrgManagementUpdateOrganizationHandler == nil {
		unregistered = append(unregistered, "user_org_management.UpdateOrganizationHandler")
	}
	if o.UserOrgManagementUpdateProjectHandler == nil {
		unregistered = append(unregistered, "user_org_management.UpdateProjectHandler")
	}
	if o.UserOrgManagementUpdateUserHandler == nil {
		unregistered = append(unregistered, "user_org_management.UpdateUserHandler")
	}
	if o.WorkflowManagementUploadWorkflowTemplateHandler == nil {
		unregistered = append(unregistered, "workflow_management.UploadWorkflowTemplateHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *LEXISPortalAPIAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *LEXISPortalAPIAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "APIKeyHeader":
			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, o.APIKeyHeaderAuth)

		case "APIKeyParam":
			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, o.APIKeyParamAuth)

		case "Keycloak":
			result[name] = o.BearerAuthenticator(name, o.KeycloakAuth)

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *LEXISPortalAPIAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *LEXISPortalAPIAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/offset+octet-stream":
			result["application/offset+octet-stream"] = o.BinConsumer
		case "application/json":
			result["application/json"] = o.JSONConsumer
		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *LEXISPortalAPIAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/octet-stream":
			result["application/octet-stream"] = o.BinProducer
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *LEXISPortalAPIAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the l e x i s portal API API
func (o *LEXISPortalAPIAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *LEXISPortalAPIAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/dataset/gridftp/gridmap"] = data_set_management.NewAddGridmapEntry(o.context, o.DataSetManagementAddGridmapEntryHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/dataset/cert"] = data_set_management.NewCertificate(o.context, o.DataSetManagementCertificateHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/dataset/cloud/add/{param}"] = staging.NewCheckCloudNFSExportAddStatus(o.context, o.StagingCheckCloudNFSExportAddStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/dataset/cloud/remove/{param}"] = staging.NewCheckCloudNFSExportRemoveStatus(o.context, o.StagingCheckCloudNFSExportRemoveStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/dataset/compress/zip/{request_id}"] = staging.NewCheckCompressToZipStatus(o.context, o.StagingCheckCompressToZipStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/dataset/encryption/compress_encrypt/{request_id}"] = data_set_management.NewCheckCompressionEncryptionStatus(o.context, o.DataSetManagementCheckCompressionEncryptionStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/dataset/encryption/compress/{request_id}"] = data_set_management.NewCheckCompressionStatus(o.context, o.DataSetManagementCheckCompressionStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/dataset/encryption/decompress/{request_id}"] = data_set_management.NewCheckDecompressionStatus(o.context, o.DataSetManagementCheckDecompressionStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/dataset/encryption/decrypt_decompress/{request_id}"] = data_set_management.NewCheckDecryptionDecompressionStatus(o.context, o.DataSetManagementCheckDecryptionDecompressionStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/dataset/encryption/decrypt/{request_id}"] = data_set_management.NewCheckDecryptionStatus(o.context, o.DataSetManagementCheckDecryptionStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/dataset/staging/delete/{request_id}"] = staging.NewCheckDeletionStatus(o.context, o.StagingCheckDeletionStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/dataset/duplicate/{request_id}"] = staging.NewCheckDuplicationStatus(o.context, o.StagingCheckDuplicationStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/dataset/encryption/encrypt/{request_id}"] = data_set_management.NewCheckEncryptionStatus(o.context, o.DataSetManagementCheckEncryptionStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/dataset/pid/{request_id}"] = data_set_management.NewCheckPIDStatus(o.context, o.DataSetManagementCheckPIDStatusHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/dataset/checkpermission"] = data_set_management.NewCheckPermission(o.context, o.DataSetManagementCheckPermissionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/dataset/replicate/{request_id}"] = data_set_management.NewCheckReplicateStatus(o.context, o.DataSetManagementCheckReplicateStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/dataset/data/size/{request_id}"] = data_set_management.NewCheckSizeStatus(o.context, o.DataSetManagementCheckSizeStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/dataset/staging/stage/{request_id}"] = staging.NewCheckStageStatus(o.context, o.StagingCheckStageStatusHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/dataset/cloud/add/{param}"] = staging.NewCloudNFSExportAdd(o.context, o.StagingCloudNFSExportAddHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/dataset/cloud/remove/{param}"] = staging.NewCloudNFSExportRemove(o.context, o.StagingCloudNFSExportRemoveHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/dataset/encryption/compress"] = data_set_management.NewCompress(o.context, o.DataSetManagementCompressHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/dataset/encryption/compress_encrypt"] = data_set_management.NewCompressEncrypt(o.context, o.DataSetManagementCompressEncryptHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/dataset/compress/zip"] = staging.NewCompressToZip(o.context, o.StagingCompressToZipHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/approval_system/approvedResourceRequest"] = approval_system_management.NewCreateApprovedResourceRequest(o.context, o.ApprovalSystemManagementCreateApprovedResourceRequestHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/approval_system/resourceRequest"] = approval_system_management.NewCreateResourceRequest(o.context, o.ApprovalSystemManagementCreateResourceRequestHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/dataset/ssh/sshfsexport"] = data_set_management.NewCreateSSHFSExport(o.context, o.DataSetManagementCreateSSHFSExportHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/dataset/encryption/decompress"] = data_set_management.NewDecompress(o.context, o.DataSetManagementDecompressHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/dataset/encryption/decrypt"] = data_set_management.NewDecrypt(o.context, o.DataSetManagementDecryptHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/dataset/encryption/decrypt_decompress"] = data_set_management.NewDecryptDecompress(o.context, o.DataSetManagementDecryptDecompressHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/dataset/staging/delete"] = staging.NewDelete(o.context, o.StagingDeleteHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/dataset"] = data_set_management.NewDeleteDataset(o.context, o.DataSetManagementDeleteDatasetHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/dataset/search/metadata"] = data_set_management.NewDeleteDatasetByMetadata(o.context, o.DataSetManagementDeleteDatasetByMetadataHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/dataset/ssh/sshfsexport"] = data_set_management.NewDeleteSSHFSExport(o.context, o.DataSetManagementDeleteSSHFSExportHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/workflow/{workflowId}"] = workflow_management.NewDeleteWorkflow(o.context, o.WorkflowManagementDeleteWorkflowHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/dataset/download"] = data_set_management.NewDownloadDataset(o.context, o.DataSetManagementDownloadDatasetHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/dataset/duplicate"] = staging.NewDuplicate(o.context, o.StagingDuplicateHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/dataset/encryption/encrypt"] = data_set_management.NewEncrypt(o.context, o.DataSetManagementEncryptHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/dataset/upload/{id}"] = data_set_management.NewFilePatch(o.context, o.DataSetManagementFilePatchHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/dataset/upload/{id}"] = data_set_management.NewFilesDelete(o.context, o.DataSetManagementFilesDeleteHandler)
	if o.handlers["HEAD"] == nil {
		o.handlers["HEAD"] = make(map[string]http.Handler)
	}
	o.handlers["HEAD"]["/dataset/upload/{id}"] = data_set_management.NewFilesHead(o.context, o.DataSetManagementFilesHeadHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/approval_system/approvedResourceRequest/{HPCResourceID}"] = approval_system_management.NewHPCApprovedResourceRequest(o.context, o.ApprovalSystemManagementHPCApprovedResourceRequestHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/approval_system/resourceRequest/{HPCResourceID}"] = approval_system_management.NewHPCResourceRequest(o.context, o.ApprovalSystemManagementHPCResourceRequestHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/dataset/listing"] = data_set_management.NewListing(o.context, o.DataSetManagementListingHandler)
	if o.handlers["OPTIONS"] == nil {
		o.handlers["OPTIONS"] = make(map[string]http.Handler)
	}
	o.handlers["OPTIONS"]["/dataset/upload"] = data_set_management.NewOptionsDatasetUpload(o.context, o.DataSetManagementOptionsDatasetUploadHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/dataset/pid/assign"] = data_set_management.NewPID(o.context, o.DataSetManagementPIDHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/dataset/staging/download"] = data_set_management.NewPostDatasetStagingDownload(o.context, o.DataSetManagementPostDatasetStagingDownloadHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/dataset/upload"] = data_set_management.NewPostDatasetUpload(o.context, o.DataSetManagementPostDatasetUploadHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/dataset/search/metadata"] = data_set_management.NewQueryDatasets(o.context, o.DataSetManagementQueryDatasetsHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/dataset/gridftp/gridmap"] = data_set_management.NewRemoveGridmapEntry(o.context, o.DataSetManagementRemoveGridmapEntryHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/dataset/replicate"] = data_set_management.NewReplicate(o.context, o.DataSetManagementReplicateHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/dataset/data/size"] = data_set_management.NewSize(o.context, o.DataSetManagementSizeHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/dataset/staging/stage"] = staging.NewStage(o.context, o.StagingStageHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/dataset/staging/info"] = staging.NewStagingInfo(o.context, o.StagingStagingInfoHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/accounting/{id}/manage/{medium}/consume/{amount}"] = usage_management.NewAddConsumption(o.context, o.UsageManagementAddConsumptionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/authz/{userID}/add/{role}"] = user_org_management.NewAddRole(o.context, o.UserOrgManagementAddRoleHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/organization/{id}/user/{userID}"] = user_org_management.NewAddUserToOrganization(o.context, o.UserOrgManagementAddUserToOrganizationHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/project/{id}/user/{userID}"] = user_org_management.NewAddUserToProject(o.context, o.UserOrgManagementAddUserToProjectHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/workflow/{workflowId}/execution/{workflowExecutionId}"] = workflow_management.NewCancelWorkflowExecution(o.context, o.WorkflowManagementCancelWorkflowExecutionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/authz/{userID}/clear"] = user_org_management.NewClearRole(o.context, o.UserOrgManagementClearRoleHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/dataset"] = data_set_management.NewCreateDataset(o.context, o.DataSetManagementCreateDatasetHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/hpc/resource"] = user_org_management.NewCreateHPCResource(o.context, o.UserOrgManagementCreateHPCResourceHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/organization"] = user_org_management.NewCreateOrganization(o.context, o.UserOrgManagementCreateOrganizationHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/project"] = user_org_management.NewCreateProject(o.context, o.UserOrgManagementCreateProjectHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user"] = user_org_management.NewCreateUser(o.context, o.UserOrgManagementCreateUserHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/workflow"] = workflow_management.NewCreateWorkflow(o.context, o.WorkflowManagementCreateWorkflowHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/workflow/{workflowId}/execution"] = workflow_management.NewCreateWorkflowExecution(o.context, o.WorkflowManagementCreateWorkflowExecutionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/workflow/{workflowId}/executions"] = workflow_management.NewCreateWorkflowExecutions(o.context, o.WorkflowManagementCreateWorkflowExecutionsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/accounting/{id}/manage/{medium}/decrease/{amount}"] = usage_management.NewDecreaseCredit(o.context, o.UsageManagementDecreaseCreditHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/hpc/resource/{id}"] = user_org_management.NewDeleteHPCResource(o.context, o.UserOrgManagementDeleteHPCResourceHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/organization/{id}"] = user_org_management.NewDeleteOrganization(o.context, o.UserOrgManagementDeleteOrganizationHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/project/{id}"] = user_org_management.NewDeleteProject(o.context, o.UserOrgManagementDeleteProjectHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/user/{id}"] = user_org_management.NewDeleteUser(o.context, o.UserOrgManagementDeleteUserHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/organization/{id}/user/{userID}"] = user_org_management.NewDeleteUserFromOrganization(o.context, o.UserOrgManagementDeleteUserFromOrganizationHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/project/{id}/user/{userID}"] = user_org_management.NewDeleteUserFromProject(o.context, o.UserOrgManagementDeleteUserFromProjectHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/workflow/{workflowId}/execution/{workflowExecutionId}/remove"] = workflow_management.NewDeleteWorkflowExecution(o.context, o.WorkflowManagementDeleteWorkflowExecutionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/heappe/ClusterInformation/GetCommandTemplateParametersName"] = cluster_information.NewGetCommandTemplate(o.context, o.ClusterInformationGetCommandTemplateHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/accounting/{id}/available"] = usage_management.NewGetCredit(o.context, o.UsageManagementGetCreditHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/hpc/resource/{id}"] = user_org_management.NewGetHPCResource(o.context, o.UserOrgManagementGetHPCResourceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/accounting/{id}/history"] = usage_management.NewGetHistory(o.context, o.UsageManagementGetHistoryHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/organization/{id}"] = user_org_management.NewGetOrganization(o.context, o.UserOrgManagementGetOrganizationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/project/{id}"] = user_org_management.NewGetProject(o.context, o.UserOrgManagementGetProjectHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/accounting/{id}/usage"] = usage_management.NewGetUsage(o.context, o.UsageManagementGetUsageHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/{id}"] = user_org_management.NewGetUser(o.context, o.UserOrgManagementGetUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/workflow/{workflowId}"] = workflow_management.NewGetWorkflow(o.context, o.WorkflowManagementGetWorkflowHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/workflow/{workflowId}/execution/{workflowExecutionId}"] = workflow_management.NewGetWorkflowExecutionDetail(o.context, o.WorkflowManagementGetWorkflowExecutionDetailHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/workflow/{workflowId}/execution/{workflowExecutionId}/logs"] = workflow_management.NewGetWorkflowExecutionLogs(o.context, o.WorkflowManagementGetWorkflowExecutionLogsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/workflow/{workflowId}/execution/{workflowExecutionId}/status"] = workflow_management.NewGetWorkflowExecutionStepStatus(o.context, o.WorkflowManagementGetWorkflowExecutionStepStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/workflow/template/{workflowTemplateId}"] = workflow_management.NewGetWorkflowTemplate(o.context, o.WorkflowManagementGetWorkflowTemplateHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/workflow/template"] = workflow_management.NewGetWorkflowTemplates(o.context, o.WorkflowManagementGetWorkflowTemplatesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/workflow"] = workflow_management.NewGetWorkflows(o.context, o.WorkflowManagementGetWorkflowsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/accounting/{id}/manage/{medium}/increase/{amount}"] = usage_management.NewIncreaseCredit(o.context, o.UsageManagementIncreaseCreditHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/heappe/ClusterInformation/ListAvailableClusters"] = cluster_information.NewListAvailableClusters(o.context, o.ClusterInformationListAvailableClustersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/hpc/resource"] = user_org_management.NewListHPCResources(o.context, o.UserOrgManagementListHPCResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/organization"] = user_org_management.NewListOrganizations(o.context, o.UserOrgManagementListOrganizationsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/approval_system/projectApprovedResourceRequest/{AssociatedLEXISProject}"] = approval_system_management.NewListProjectHPCApprovedResourceRequest(o.context, o.ApprovalSystemManagementListProjectHPCApprovedResourceRequestHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/approval_system/projectResourceRequest/{AssociatedLEXISProject}"] = approval_system_management.NewListProjectHPCResourceRequest(o.context, o.ApprovalSystemManagementListProjectHPCResourceRequestHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/project"] = user_org_management.NewListProjects(o.context, o.UserOrgManagementListProjectsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/approval_system/resource"] = approval_system_management.NewListResources(o.context, o.ApprovalSystemManagementListResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user"] = user_org_management.NewListUsers(o.context, o.UserOrgManagementListUsersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/workflow/{workflowId}/execution"] = workflow_management.NewListWorkflowExecutions(o.context, o.WorkflowManagementListWorkflowExecutionsHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/hpc/resource/{id}"] = user_org_management.NewUpdateHPCResource(o.context, o.UserOrgManagementUpdateHPCResourceHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/organization/{id}"] = user_org_management.NewUpdateOrganization(o.context, o.UserOrgManagementUpdateOrganizationHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/project/{id}"] = user_org_management.NewUpdateProject(o.context, o.UserOrgManagementUpdateProjectHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/user/{id}"] = user_org_management.NewUpdateUser(o.context, o.UserOrgManagementUpdateUserHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/workflow/template/upload"] = workflow_management.NewUploadWorkflowTemplate(o.context, o.WorkflowManagementUploadWorkflowTemplateHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *LEXISPortalAPIAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *LEXISPortalAPIAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *LEXISPortalAPIAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *LEXISPortalAPIAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *LEXISPortalAPIAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}

// Code generated by go-swagger; DO NOT EDIT.

package staging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CheckCompressToZipStatusHandlerFunc turns a function with the right signature into a check compress to zip status handler
type CheckCompressToZipStatusHandlerFunc func(CheckCompressToZipStatusParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CheckCompressToZipStatusHandlerFunc) Handle(params CheckCompressToZipStatusParams) middleware.Responder {
	return fn(params)
}

// CheckCompressToZipStatusHandler interface for that can handle valid check compress to zip status params
type CheckCompressToZipStatusHandler interface {
	Handle(CheckCompressToZipStatusParams) middleware.Responder
}

// NewCheckCompressToZipStatus creates a new http.Handler for the check compress to zip status operation
func NewCheckCompressToZipStatus(ctx *middleware.Context, handler CheckCompressToZipStatusHandler) *CheckCompressToZipStatus {
	return &CheckCompressToZipStatus{Context: ctx, Handler: handler}
}

/*CheckCompressToZipStatus swagger:route GET /dataset/compress/zip/{request_id} staging dataSetManagement checkCompressToZipStatus

Check the status of a transfer

Check the status of a transfer

*/
type CheckCompressToZipStatus struct {
	Context *middleware.Context
	Handler CheckCompressToZipStatusHandler
}

func (o *CheckCompressToZipStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCheckCompressToZipStatusParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CheckCompressToZipStatusOKBody check compress to zip status o k body
//
// swagger:model CheckCompressToZipStatusOKBody
type CheckCompressToZipStatusOKBody struct {

	// status
	// Required: true
	Status *string `json:"status"`

	// Multiple paths for CompressAPI endpoints
	TargetPaths []string `json:"target_paths"`
}

// Validate validates this check compress to zip status o k body
func (o *CheckCompressToZipStatusOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CheckCompressToZipStatusOKBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("checkCompressToZipStatusOK"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CheckCompressToZipStatusOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CheckCompressToZipStatusOKBody) UnmarshalBinary(b []byte) error {
	var res CheckCompressToZipStatusOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

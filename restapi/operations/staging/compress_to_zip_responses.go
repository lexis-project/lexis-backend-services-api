// Code generated by go-swagger; DO NOT EDIT.

package staging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// CompressToZipCreatedCode is the HTTP code returned for type CompressToZipCreated
const CompressToZipCreatedCode int = 201

/*CompressToZipCreated Request was added to the queue

swagger:response compressToZipCreated
*/
type CompressToZipCreated struct {

	/*
	  In: Body
	*/
	Payload *models.SteeringRequestID `json:"body,omitempty"`
}

// NewCompressToZipCreated creates CompressToZipCreated with default headers values
func NewCompressToZipCreated() *CompressToZipCreated {

	return &CompressToZipCreated{}
}

// WithPayload adds the payload to the compress to zip created response
func (o *CompressToZipCreated) WithPayload(payload *models.SteeringRequestID) *CompressToZipCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the compress to zip created response
func (o *CompressToZipCreated) SetPayload(payload *models.SteeringRequestID) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CompressToZipCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CompressToZipBadRequestCode is the HTTP code returned for type CompressToZipBadRequest
const CompressToZipBadRequestCode int = 400

/*CompressToZipBadRequest Malformed Request

swagger:response compressToZipBadRequest
*/
type CompressToZipBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCompressToZipBadRequest creates CompressToZipBadRequest with default headers values
func NewCompressToZipBadRequest() *CompressToZipBadRequest {

	return &CompressToZipBadRequest{}
}

// WithPayload adds the payload to the compress to zip bad request response
func (o *CompressToZipBadRequest) WithPayload(payload *models.ErrorResponse) *CompressToZipBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the compress to zip bad request response
func (o *CompressToZipBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CompressToZipBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CompressToZipUnauthorizedCode is the HTTP code returned for type CompressToZipUnauthorized
const CompressToZipUnauthorizedCode int = 401

/*CompressToZipUnauthorized Unauthorized

swagger:response compressToZipUnauthorized
*/
type CompressToZipUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCompressToZipUnauthorized creates CompressToZipUnauthorized with default headers values
func NewCompressToZipUnauthorized() *CompressToZipUnauthorized {

	return &CompressToZipUnauthorized{}
}

// WithPayload adds the payload to the compress to zip unauthorized response
func (o *CompressToZipUnauthorized) WithPayload(payload *models.ErrorResponse) *CompressToZipUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the compress to zip unauthorized response
func (o *CompressToZipUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CompressToZipUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CompressToZipForbiddenCode is the HTTP code returned for type CompressToZipForbidden
const CompressToZipForbiddenCode int = 403

/*CompressToZipForbidden Forbidden

swagger:response compressToZipForbidden
*/
type CompressToZipForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCompressToZipForbidden creates CompressToZipForbidden with default headers values
func NewCompressToZipForbidden() *CompressToZipForbidden {

	return &CompressToZipForbidden{}
}

// WithPayload adds the payload to the compress to zip forbidden response
func (o *CompressToZipForbidden) WithPayload(payload *models.ErrorResponse) *CompressToZipForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the compress to zip forbidden response
func (o *CompressToZipForbidden) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CompressToZipForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CompressToZipBadGatewayCode is the HTTP code returned for type CompressToZipBadGateway
const CompressToZipBadGatewayCode int = 502

/*CompressToZipBadGateway Bad Gateway

swagger:response compressToZipBadGateway
*/
type CompressToZipBadGateway struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCompressToZipBadGateway creates CompressToZipBadGateway with default headers values
func NewCompressToZipBadGateway() *CompressToZipBadGateway {

	return &CompressToZipBadGateway{}
}

// WithPayload adds the payload to the compress to zip bad gateway response
func (o *CompressToZipBadGateway) WithPayload(payload *models.ErrorResponse) *CompressToZipBadGateway {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the compress to zip bad gateway response
func (o *CompressToZipBadGateway) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CompressToZipBadGateway) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(502)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CompressToZipServiceUnavailableCode is the HTTP code returned for type CompressToZipServiceUnavailable
const CompressToZipServiceUnavailableCode int = 503

/*CompressToZipServiceUnavailable Server error

swagger:response compressToZipServiceUnavailable
*/
type CompressToZipServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCompressToZipServiceUnavailable creates CompressToZipServiceUnavailable with default headers values
func NewCompressToZipServiceUnavailable() *CompressToZipServiceUnavailable {

	return &CompressToZipServiceUnavailable{}
}

// WithPayload adds the payload to the compress to zip service unavailable response
func (o *CompressToZipServiceUnavailable) WithPayload(payload *models.ErrorResponse) *CompressToZipServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the compress to zip service unavailable response
func (o *CompressToZipServiceUnavailable) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CompressToZipServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

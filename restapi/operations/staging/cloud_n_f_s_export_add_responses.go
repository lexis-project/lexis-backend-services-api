// Code generated by go-swagger; DO NOT EDIT.

package staging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// CloudNFSExportAddCreatedCode is the HTTP code returned for type CloudNFSExportAddCreated
const CloudNFSExportAddCreatedCode int = 201

/*CloudNFSExportAddCreated The response code means that the request for addition has been initiated. Status of the addition process can be checked by querying the status.

swagger:response cloudNFSExportAddCreated
*/
type CloudNFSExportAddCreated struct {

	/*
	  In: Body
	*/
	Payload *models.SteeringRequestID `json:"body,omitempty"`
}

// NewCloudNFSExportAddCreated creates CloudNFSExportAddCreated with default headers values
func NewCloudNFSExportAddCreated() *CloudNFSExportAddCreated {

	return &CloudNFSExportAddCreated{}
}

// WithPayload adds the payload to the cloud n f s export add created response
func (o *CloudNFSExportAddCreated) WithPayload(payload *models.SteeringRequestID) *CloudNFSExportAddCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the cloud n f s export add created response
func (o *CloudNFSExportAddCreated) SetPayload(payload *models.SteeringRequestID) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CloudNFSExportAddCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CloudNFSExportAddBadRequestCode is the HTTP code returned for type CloudNFSExportAddBadRequest
const CloudNFSExportAddBadRequestCode int = 400

/*CloudNFSExportAddBadRequest This means that the request ID given by the user is incorrect.

swagger:response cloudNFSExportAddBadRequest
*/
type CloudNFSExportAddBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCloudNFSExportAddBadRequest creates CloudNFSExportAddBadRequest with default headers values
func NewCloudNFSExportAddBadRequest() *CloudNFSExportAddBadRequest {

	return &CloudNFSExportAddBadRequest{}
}

// WithPayload adds the payload to the cloud n f s export add bad request response
func (o *CloudNFSExportAddBadRequest) WithPayload(payload *models.ErrorResponse) *CloudNFSExportAddBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the cloud n f s export add bad request response
func (o *CloudNFSExportAddBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CloudNFSExportAddBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CloudNFSExportAddUnauthorizedCode is the HTTP code returned for type CloudNFSExportAddUnauthorized
const CloudNFSExportAddUnauthorizedCode int = 401

/*CloudNFSExportAddUnauthorized This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user

swagger:response cloudNFSExportAddUnauthorized
*/
type CloudNFSExportAddUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCloudNFSExportAddUnauthorized creates CloudNFSExportAddUnauthorized with default headers values
func NewCloudNFSExportAddUnauthorized() *CloudNFSExportAddUnauthorized {

	return &CloudNFSExportAddUnauthorized{}
}

// WithPayload adds the payload to the cloud n f s export add unauthorized response
func (o *CloudNFSExportAddUnauthorized) WithPayload(payload *models.ErrorResponse) *CloudNFSExportAddUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the cloud n f s export add unauthorized response
func (o *CloudNFSExportAddUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CloudNFSExportAddUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CloudNFSExportAddForbiddenCode is the HTTP code returned for type CloudNFSExportAddForbidden
const CloudNFSExportAddForbiddenCode int = 403

/*CloudNFSExportAddForbidden The IP is outside of the allowed range

swagger:response cloudNFSExportAddForbidden
*/
type CloudNFSExportAddForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCloudNFSExportAddForbidden creates CloudNFSExportAddForbidden with default headers values
func NewCloudNFSExportAddForbidden() *CloudNFSExportAddForbidden {

	return &CloudNFSExportAddForbidden{}
}

// WithPayload adds the payload to the cloud n f s export add forbidden response
func (o *CloudNFSExportAddForbidden) WithPayload(payload *models.ErrorResponse) *CloudNFSExportAddForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the cloud n f s export add forbidden response
func (o *CloudNFSExportAddForbidden) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CloudNFSExportAddForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CloudNFSExportAddRequestURITooLongCode is the HTTP code returned for type CloudNFSExportAddRequestURITooLong
const CloudNFSExportAddRequestURITooLongCode int = 414

/*CloudNFSExportAddRequestURITooLong This means that the the request ID is longer than the server is willing to interpret.

swagger:response cloudNFSExportAddRequestUriTooLong
*/
type CloudNFSExportAddRequestURITooLong struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCloudNFSExportAddRequestURITooLong creates CloudNFSExportAddRequestURITooLong with default headers values
func NewCloudNFSExportAddRequestURITooLong() *CloudNFSExportAddRequestURITooLong {

	return &CloudNFSExportAddRequestURITooLong{}
}

// WithPayload adds the payload to the cloud n f s export add request Uri too long response
func (o *CloudNFSExportAddRequestURITooLong) WithPayload(payload *models.ErrorResponse) *CloudNFSExportAddRequestURITooLong {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the cloud n f s export add request Uri too long response
func (o *CloudNFSExportAddRequestURITooLong) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CloudNFSExportAddRequestURITooLong) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(414)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CloudNFSExportAddInternalServerErrorCode is the HTTP code returned for type CloudNFSExportAddInternalServerError
const CloudNFSExportAddInternalServerErrorCode int = 500

/*CloudNFSExportAddInternalServerError This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.

swagger:response cloudNFSExportAddInternalServerError
*/
type CloudNFSExportAddInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCloudNFSExportAddInternalServerError creates CloudNFSExportAddInternalServerError with default headers values
func NewCloudNFSExportAddInternalServerError() *CloudNFSExportAddInternalServerError {

	return &CloudNFSExportAddInternalServerError{}
}

// WithPayload adds the payload to the cloud n f s export add internal server error response
func (o *CloudNFSExportAddInternalServerError) WithPayload(payload *models.ErrorResponse) *CloudNFSExportAddInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the cloud n f s export add internal server error response
func (o *CloudNFSExportAddInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CloudNFSExportAddInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Code generated by go-swagger; DO NOT EDIT.

package staging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// DuplicateCreatedCode is the HTTP code returned for type DuplicateCreated
const DuplicateCreatedCode int = 201

/*DuplicateCreated The response code means that the duplication has been initiated. Status of the transfer can be checked by querying the status.

swagger:response duplicateCreated
*/
type DuplicateCreated struct {

	/*
	  In: Body
	*/
	Payload *models.SteeringRequestID `json:"body,omitempty"`
}

// NewDuplicateCreated creates DuplicateCreated with default headers values
func NewDuplicateCreated() *DuplicateCreated {

	return &DuplicateCreated{}
}

// WithPayload adds the payload to the duplicate created response
func (o *DuplicateCreated) WithPayload(payload *models.SteeringRequestID) *DuplicateCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the duplicate created response
func (o *DuplicateCreated) SetPayload(payload *models.SteeringRequestID) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DuplicateCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DuplicateBadRequestCode is the HTTP code returned for type DuplicateBadRequest
const DuplicateBadRequestCode int = 400

/*DuplicateBadRequest This means that there's something wrong in the input parameters and the server couldn't understand the request.

swagger:response duplicateBadRequest
*/
type DuplicateBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDuplicateBadRequest creates DuplicateBadRequest with default headers values
func NewDuplicateBadRequest() *DuplicateBadRequest {

	return &DuplicateBadRequest{}
}

// WithPayload adds the payload to the duplicate bad request response
func (o *DuplicateBadRequest) WithPayload(payload *models.ErrorResponse) *DuplicateBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the duplicate bad request response
func (o *DuplicateBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DuplicateBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DuplicateUnauthorizedCode is the HTTP code returned for type DuplicateUnauthorized
const DuplicateUnauthorizedCode int = 401

/*DuplicateUnauthorized This means that the user is not authenticated with keycloak and duplication can't be triggered unless the user first log in with a valid user

swagger:response duplicateUnauthorized
*/
type DuplicateUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDuplicateUnauthorized creates DuplicateUnauthorized with default headers values
func NewDuplicateUnauthorized() *DuplicateUnauthorized {

	return &DuplicateUnauthorized{}
}

// WithPayload adds the payload to the duplicate unauthorized response
func (o *DuplicateUnauthorized) WithPayload(payload *models.ErrorResponse) *DuplicateUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the duplicate unauthorized response
func (o *DuplicateUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DuplicateUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DuplicateForbiddenCode is the HTTP code returned for type DuplicateForbidden
const DuplicateForbiddenCode int = 403

/*DuplicateForbidden This means that the resource the user is trying to duplicate from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.

swagger:response duplicateForbidden
*/
type DuplicateForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDuplicateForbidden creates DuplicateForbidden with default headers values
func NewDuplicateForbidden() *DuplicateForbidden {

	return &DuplicateForbidden{}
}

// WithPayload adds the payload to the duplicate forbidden response
func (o *DuplicateForbidden) WithPayload(payload *models.ErrorResponse) *DuplicateForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the duplicate forbidden response
func (o *DuplicateForbidden) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DuplicateForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DuplicateNotFoundCode is the HTTP code returned for type DuplicateNotFound
const DuplicateNotFoundCode int = 404

/*DuplicateNotFound This means that either the source path or the the target path on the system doesn't exist.

swagger:response duplicateNotFound
*/
type DuplicateNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDuplicateNotFound creates DuplicateNotFound with default headers values
func NewDuplicateNotFound() *DuplicateNotFound {

	return &DuplicateNotFound{}
}

// WithPayload adds the payload to the duplicate not found response
func (o *DuplicateNotFound) WithPayload(payload *models.ErrorResponse) *DuplicateNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the duplicate not found response
func (o *DuplicateNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DuplicateNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DuplicateRequestURITooLongCode is the HTTP code returned for type DuplicateRequestURITooLong
const DuplicateRequestURITooLongCode int = 414

/*DuplicateRequestURITooLong This means that the either the source path or the target path is longer than the server is willing to interpret.

swagger:response duplicateRequestUriTooLong
*/
type DuplicateRequestURITooLong struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDuplicateRequestURITooLong creates DuplicateRequestURITooLong with default headers values
func NewDuplicateRequestURITooLong() *DuplicateRequestURITooLong {

	return &DuplicateRequestURITooLong{}
}

// WithPayload adds the payload to the duplicate request Uri too long response
func (o *DuplicateRequestURITooLong) WithPayload(payload *models.ErrorResponse) *DuplicateRequestURITooLong {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the duplicate request Uri too long response
func (o *DuplicateRequestURITooLong) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DuplicateRequestURITooLong) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(414)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DuplicateTooManyRequestsCode is the HTTP code returned for type DuplicateTooManyRequests
const DuplicateTooManyRequestsCode int = 429

/*DuplicateTooManyRequests This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.

swagger:response duplicateTooManyRequests
*/
type DuplicateTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDuplicateTooManyRequests creates DuplicateTooManyRequests with default headers values
func NewDuplicateTooManyRequests() *DuplicateTooManyRequests {

	return &DuplicateTooManyRequests{}
}

// WithPayload adds the payload to the duplicate too many requests response
func (o *DuplicateTooManyRequests) WithPayload(payload *models.ErrorResponse) *DuplicateTooManyRequests {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the duplicate too many requests response
func (o *DuplicateTooManyRequests) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DuplicateTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(429)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DuplicateInternalServerErrorCode is the HTTP code returned for type DuplicateInternalServerError
const DuplicateInternalServerErrorCode int = 500

/*DuplicateInternalServerError This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.

swagger:response duplicateInternalServerError
*/
type DuplicateInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDuplicateInternalServerError creates DuplicateInternalServerError with default headers values
func NewDuplicateInternalServerError() *DuplicateInternalServerError {

	return &DuplicateInternalServerError{}
}

// WithPayload adds the payload to the duplicate internal server error response
func (o *DuplicateInternalServerError) WithPayload(payload *models.ErrorResponse) *DuplicateInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the duplicate internal server error response
func (o *DuplicateInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DuplicateInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

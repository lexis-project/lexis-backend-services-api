// Code generated by go-swagger; DO NOT EDIT.

package staging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// StageHandlerFunc turns a function with the right signature into a stage handler
type StageHandlerFunc func(StageParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn StageHandlerFunc) Handle(params StageParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// StageHandler interface for that can handle valid stage params
type StageHandler interface {
	Handle(StageParams, interface{}) middleware.Responder
}

// NewStage creates a new http.Handler for the stage operation
func NewStage(ctx *middleware.Context, handler StageHandler) *Stage {
	return &Stage{Context: ctx, Handler: handler}
}

/*Stage swagger:route POST /dataset/staging/stage staging dataSetManagement stage

Stage a dataset or subdataset (by enqueuing the request for latter processing)

Stage a dataset or subdataset (by enqueuing the request for latter processing).
If you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:
 - For public datasets: "public/proj"+hash+"/"+internalID
 - For user datasets: "user/proj"+hash+"/"+user+"/"+internalID
 - For project datasets: "project/proj"+hash+"/"+internalID


*/
type Stage struct {
	Context *middleware.Context
	Handler StageHandler
}

func (o *Stage) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewStageParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// StageBody stage body
//
// swagger:model StageBody
type StageBody struct {

	// compression
	// Required: true
	// Enum: [yes no]
	Compression *string `json:"compression"`

	// encryption
	// Required: true
	// Enum: [yes no]
	Encryption *string `json:"encryption"`

	// heappe url
	HeappeURL string `json:"heappe_url,omitempty"`

	// job id
	JobID int64 `json:"job_id,omitempty"`

	// metadata
	Metadata *models.DatasetMetadata `json:"metadata,omitempty"`

	// source path
	// Required: true
	SourcePath *string `json:"source_path"`

	// Possible values are: lrz_iRODS, lrz_staging_area, lrz_staging_area2,
	// lrz_cloud, linux_cluster, superMUC, it4i_iRODS, barbora_lustre,
	// salomon_lustre, barbora_home, salomon_home, it4i_cloud, it4i_staging_area,
	// surf_iRODS, sara_staging_area.
	//
	// Required: true
	SourceSystem *string `json:"source_system"`

	// target path
	// Required: true
	TargetPath *string `json:"target_path"`

	// Possible values are: lrz_iRODS, lrz_staging_area, lrz_staging_area2,
	// lrz_cloud, linux_cluster, superMUC, it4i_iRODS, barbora_lustre,
	// salomon_lustre, barbora_home, salomon_home, it4i_cloud, it4i_staging_area,
	// surf_iRODS, sara_staging_area.
	//
	// Required: true
	TargetSystem *string `json:"target_system"`

	// task id
	TaskID int64 `json:"task_id,omitempty"`
}

// Validate validates this stage body
func (o *StageBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCompression(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEncryption(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSourcePath(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSourceSystem(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTargetPath(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTargetSystem(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var stageBodyTypeCompressionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["yes","no"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stageBodyTypeCompressionPropEnum = append(stageBodyTypeCompressionPropEnum, v)
	}
}

const (

	// StageBodyCompressionYes captures enum value "yes"
	StageBodyCompressionYes string = "yes"

	// StageBodyCompressionNo captures enum value "no"
	StageBodyCompressionNo string = "no"
)

// prop value enum
func (o *StageBody) validateCompressionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, stageBodyTypeCompressionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *StageBody) validateCompression(formats strfmt.Registry) error {

	if err := validate.Required("parameters"+"."+"compression", "body", o.Compression); err != nil {
		return err
	}

	// value enum
	if err := o.validateCompressionEnum("parameters"+"."+"compression", "body", *o.Compression); err != nil {
		return err
	}

	return nil
}

var stageBodyTypeEncryptionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["yes","no"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stageBodyTypeEncryptionPropEnum = append(stageBodyTypeEncryptionPropEnum, v)
	}
}

const (

	// StageBodyEncryptionYes captures enum value "yes"
	StageBodyEncryptionYes string = "yes"

	// StageBodyEncryptionNo captures enum value "no"
	StageBodyEncryptionNo string = "no"
)

// prop value enum
func (o *StageBody) validateEncryptionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, stageBodyTypeEncryptionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *StageBody) validateEncryption(formats strfmt.Registry) error {

	if err := validate.Required("parameters"+"."+"encryption", "body", o.Encryption); err != nil {
		return err
	}

	// value enum
	if err := o.validateEncryptionEnum("parameters"+"."+"encryption", "body", *o.Encryption); err != nil {
		return err
	}

	return nil
}

func (o *StageBody) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameters" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *StageBody) validateSourcePath(formats strfmt.Registry) error {

	if err := validate.Required("parameters"+"."+"source_path", "body", o.SourcePath); err != nil {
		return err
	}

	return nil
}

func (o *StageBody) validateSourceSystem(formats strfmt.Registry) error {

	if err := validate.Required("parameters"+"."+"source_system", "body", o.SourceSystem); err != nil {
		return err
	}

	return nil
}

func (o *StageBody) validateTargetPath(formats strfmt.Registry) error {

	if err := validate.Required("parameters"+"."+"target_path", "body", o.TargetPath); err != nil {
		return err
	}

	return nil
}

func (o *StageBody) validateTargetSystem(formats strfmt.Registry) error {

	if err := validate.Required("parameters"+"."+"target_system", "body", o.TargetSystem); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *StageBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StageBody) UnmarshalBinary(b []byte) error {
	var res StageBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

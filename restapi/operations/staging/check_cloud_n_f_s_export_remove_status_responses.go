// Code generated by go-swagger; DO NOT EDIT.

package staging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// CheckCloudNFSExportRemoveStatusOKCode is the HTTP code returned for type CheckCloudNFSExportRemoveStatusOK
const CheckCloudNFSExportRemoveStatusOKCode int = 200

/*CheckCloudNFSExportRemoveStatusOK This means that the status has been returned to the user in the response body.

swagger:response checkCloudNFSExportRemoveStatusOK
*/
type CheckCloudNFSExportRemoveStatusOK struct {

	/*
	  In: Body
	*/
	Payload *CheckCloudNFSExportRemoveStatusOKBody `json:"body,omitempty"`
}

// NewCheckCloudNFSExportRemoveStatusOK creates CheckCloudNFSExportRemoveStatusOK with default headers values
func NewCheckCloudNFSExportRemoveStatusOK() *CheckCloudNFSExportRemoveStatusOK {

	return &CheckCloudNFSExportRemoveStatusOK{}
}

// WithPayload adds the payload to the check cloud n f s export remove status o k response
func (o *CheckCloudNFSExportRemoveStatusOK) WithPayload(payload *CheckCloudNFSExportRemoveStatusOKBody) *CheckCloudNFSExportRemoveStatusOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check cloud n f s export remove status o k response
func (o *CheckCloudNFSExportRemoveStatusOK) SetPayload(payload *CheckCloudNFSExportRemoveStatusOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckCloudNFSExportRemoveStatusOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckCloudNFSExportRemoveStatusBadRequestCode is the HTTP code returned for type CheckCloudNFSExportRemoveStatusBadRequest
const CheckCloudNFSExportRemoveStatusBadRequestCode int = 400

/*CheckCloudNFSExportRemoveStatusBadRequest This means that the request ID given by the user is incorrect.

swagger:response checkCloudNFSExportRemoveStatusBadRequest
*/
type CheckCloudNFSExportRemoveStatusBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckCloudNFSExportRemoveStatusBadRequest creates CheckCloudNFSExportRemoveStatusBadRequest with default headers values
func NewCheckCloudNFSExportRemoveStatusBadRequest() *CheckCloudNFSExportRemoveStatusBadRequest {

	return &CheckCloudNFSExportRemoveStatusBadRequest{}
}

// WithPayload adds the payload to the check cloud n f s export remove status bad request response
func (o *CheckCloudNFSExportRemoveStatusBadRequest) WithPayload(payload *models.ErrorResponse) *CheckCloudNFSExportRemoveStatusBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check cloud n f s export remove status bad request response
func (o *CheckCloudNFSExportRemoveStatusBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckCloudNFSExportRemoveStatusBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckCloudNFSExportRemoveStatusUnauthorizedCode is the HTTP code returned for type CheckCloudNFSExportRemoveStatusUnauthorized
const CheckCloudNFSExportRemoveStatusUnauthorizedCode int = 401

/*CheckCloudNFSExportRemoveStatusUnauthorized This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user

swagger:response checkCloudNFSExportRemoveStatusUnauthorized
*/
type CheckCloudNFSExportRemoveStatusUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckCloudNFSExportRemoveStatusUnauthorized creates CheckCloudNFSExportRemoveStatusUnauthorized with default headers values
func NewCheckCloudNFSExportRemoveStatusUnauthorized() *CheckCloudNFSExportRemoveStatusUnauthorized {

	return &CheckCloudNFSExportRemoveStatusUnauthorized{}
}

// WithPayload adds the payload to the check cloud n f s export remove status unauthorized response
func (o *CheckCloudNFSExportRemoveStatusUnauthorized) WithPayload(payload *models.ErrorResponse) *CheckCloudNFSExportRemoveStatusUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check cloud n f s export remove status unauthorized response
func (o *CheckCloudNFSExportRemoveStatusUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckCloudNFSExportRemoveStatusUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckCloudNFSExportRemoveStatusNotFoundCode is the HTTP code returned for type CheckCloudNFSExportRemoveStatusNotFound
const CheckCloudNFSExportRemoveStatusNotFoundCode int = 404

/*CheckCloudNFSExportRemoveStatusNotFound This means that the ID doesn't exist and thus a status can't be returned.

swagger:response checkCloudNFSExportRemoveStatusNotFound
*/
type CheckCloudNFSExportRemoveStatusNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckCloudNFSExportRemoveStatusNotFound creates CheckCloudNFSExportRemoveStatusNotFound with default headers values
func NewCheckCloudNFSExportRemoveStatusNotFound() *CheckCloudNFSExportRemoveStatusNotFound {

	return &CheckCloudNFSExportRemoveStatusNotFound{}
}

// WithPayload adds the payload to the check cloud n f s export remove status not found response
func (o *CheckCloudNFSExportRemoveStatusNotFound) WithPayload(payload *models.ErrorResponse) *CheckCloudNFSExportRemoveStatusNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check cloud n f s export remove status not found response
func (o *CheckCloudNFSExportRemoveStatusNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckCloudNFSExportRemoveStatusNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckCloudNFSExportRemoveStatusRequestURITooLongCode is the HTTP code returned for type CheckCloudNFSExportRemoveStatusRequestURITooLong
const CheckCloudNFSExportRemoveStatusRequestURITooLongCode int = 414

/*CheckCloudNFSExportRemoveStatusRequestURITooLong This means that the the request ID is longer than the server is willing to interpret.

swagger:response checkCloudNFSExportRemoveStatusRequestUriTooLong
*/
type CheckCloudNFSExportRemoveStatusRequestURITooLong struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckCloudNFSExportRemoveStatusRequestURITooLong creates CheckCloudNFSExportRemoveStatusRequestURITooLong with default headers values
func NewCheckCloudNFSExportRemoveStatusRequestURITooLong() *CheckCloudNFSExportRemoveStatusRequestURITooLong {

	return &CheckCloudNFSExportRemoveStatusRequestURITooLong{}
}

// WithPayload adds the payload to the check cloud n f s export remove status request Uri too long response
func (o *CheckCloudNFSExportRemoveStatusRequestURITooLong) WithPayload(payload *models.ErrorResponse) *CheckCloudNFSExportRemoveStatusRequestURITooLong {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check cloud n f s export remove status request Uri too long response
func (o *CheckCloudNFSExportRemoveStatusRequestURITooLong) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckCloudNFSExportRemoveStatusRequestURITooLong) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(414)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckCloudNFSExportRemoveStatusInternalServerErrorCode is the HTTP code returned for type CheckCloudNFSExportRemoveStatusInternalServerError
const CheckCloudNFSExportRemoveStatusInternalServerErrorCode int = 500

/*CheckCloudNFSExportRemoveStatusInternalServerError This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.

swagger:response checkCloudNFSExportRemoveStatusInternalServerError
*/
type CheckCloudNFSExportRemoveStatusInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckCloudNFSExportRemoveStatusInternalServerError creates CheckCloudNFSExportRemoveStatusInternalServerError with default headers values
func NewCheckCloudNFSExportRemoveStatusInternalServerError() *CheckCloudNFSExportRemoveStatusInternalServerError {

	return &CheckCloudNFSExportRemoveStatusInternalServerError{}
}

// WithPayload adds the payload to the check cloud n f s export remove status internal server error response
func (o *CheckCloudNFSExportRemoveStatusInternalServerError) WithPayload(payload *models.ErrorResponse) *CheckCloudNFSExportRemoveStatusInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check cloud n f s export remove status internal server error response
func (o *CheckCloudNFSExportRemoveStatusInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckCloudNFSExportRemoveStatusInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

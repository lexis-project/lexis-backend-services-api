// Code generated by go-swagger; DO NOT EDIT.

package staging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// CheckDeletionStatusOKCode is the HTTP code returned for type CheckDeletionStatusOK
const CheckDeletionStatusOKCode int = 200

/*CheckDeletionStatusOK This means that the status has been returned to the user in the response body.

swagger:response checkDeletionStatusOK
*/
type CheckDeletionStatusOK struct {

	/*
	  In: Body
	*/
	Payload *CheckDeletionStatusOKBody `json:"body,omitempty"`
}

// NewCheckDeletionStatusOK creates CheckDeletionStatusOK with default headers values
func NewCheckDeletionStatusOK() *CheckDeletionStatusOK {

	return &CheckDeletionStatusOK{}
}

// WithPayload adds the payload to the check deletion status o k response
func (o *CheckDeletionStatusOK) WithPayload(payload *CheckDeletionStatusOKBody) *CheckDeletionStatusOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check deletion status o k response
func (o *CheckDeletionStatusOK) SetPayload(payload *CheckDeletionStatusOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckDeletionStatusOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckDeletionStatusBadRequestCode is the HTTP code returned for type CheckDeletionStatusBadRequest
const CheckDeletionStatusBadRequestCode int = 400

/*CheckDeletionStatusBadRequest This means that the request ID given by the user is incorrect.

swagger:response checkDeletionStatusBadRequest
*/
type CheckDeletionStatusBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckDeletionStatusBadRequest creates CheckDeletionStatusBadRequest with default headers values
func NewCheckDeletionStatusBadRequest() *CheckDeletionStatusBadRequest {

	return &CheckDeletionStatusBadRequest{}
}

// WithPayload adds the payload to the check deletion status bad request response
func (o *CheckDeletionStatusBadRequest) WithPayload(payload *models.ErrorResponse) *CheckDeletionStatusBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check deletion status bad request response
func (o *CheckDeletionStatusBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckDeletionStatusBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckDeletionStatusUnauthorizedCode is the HTTP code returned for type CheckDeletionStatusUnauthorized
const CheckDeletionStatusUnauthorizedCode int = 401

/*CheckDeletionStatusUnauthorized This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user

swagger:response checkDeletionStatusUnauthorized
*/
type CheckDeletionStatusUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckDeletionStatusUnauthorized creates CheckDeletionStatusUnauthorized with default headers values
func NewCheckDeletionStatusUnauthorized() *CheckDeletionStatusUnauthorized {

	return &CheckDeletionStatusUnauthorized{}
}

// WithPayload adds the payload to the check deletion status unauthorized response
func (o *CheckDeletionStatusUnauthorized) WithPayload(payload *models.ErrorResponse) *CheckDeletionStatusUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check deletion status unauthorized response
func (o *CheckDeletionStatusUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckDeletionStatusUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckDeletionStatusNotFoundCode is the HTTP code returned for type CheckDeletionStatusNotFound
const CheckDeletionStatusNotFoundCode int = 404

/*CheckDeletionStatusNotFound This means that the ID doesn't exist and thus a status can't be returned.

swagger:response checkDeletionStatusNotFound
*/
type CheckDeletionStatusNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckDeletionStatusNotFound creates CheckDeletionStatusNotFound with default headers values
func NewCheckDeletionStatusNotFound() *CheckDeletionStatusNotFound {

	return &CheckDeletionStatusNotFound{}
}

// WithPayload adds the payload to the check deletion status not found response
func (o *CheckDeletionStatusNotFound) WithPayload(payload *models.ErrorResponse) *CheckDeletionStatusNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check deletion status not found response
func (o *CheckDeletionStatusNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckDeletionStatusNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckDeletionStatusRequestURITooLongCode is the HTTP code returned for type CheckDeletionStatusRequestURITooLong
const CheckDeletionStatusRequestURITooLongCode int = 414

/*CheckDeletionStatusRequestURITooLong This means that the the request ID is longer than the server is willing to interpret.

swagger:response checkDeletionStatusRequestUriTooLong
*/
type CheckDeletionStatusRequestURITooLong struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckDeletionStatusRequestURITooLong creates CheckDeletionStatusRequestURITooLong with default headers values
func NewCheckDeletionStatusRequestURITooLong() *CheckDeletionStatusRequestURITooLong {

	return &CheckDeletionStatusRequestURITooLong{}
}

// WithPayload adds the payload to the check deletion status request Uri too long response
func (o *CheckDeletionStatusRequestURITooLong) WithPayload(payload *models.ErrorResponse) *CheckDeletionStatusRequestURITooLong {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check deletion status request Uri too long response
func (o *CheckDeletionStatusRequestURITooLong) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckDeletionStatusRequestURITooLong) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(414)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckDeletionStatusInternalServerErrorCode is the HTTP code returned for type CheckDeletionStatusInternalServerError
const CheckDeletionStatusInternalServerErrorCode int = 500

/*CheckDeletionStatusInternalServerError This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.

swagger:response checkDeletionStatusInternalServerError
*/
type CheckDeletionStatusInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCheckDeletionStatusInternalServerError creates CheckDeletionStatusInternalServerError with default headers values
func NewCheckDeletionStatusInternalServerError() *CheckDeletionStatusInternalServerError {

	return &CheckDeletionStatusInternalServerError{}
}

// WithPayload adds the payload to the check deletion status internal server error response
func (o *CheckDeletionStatusInternalServerError) WithPayload(payload *models.ErrorResponse) *CheckDeletionStatusInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check deletion status internal server error response
func (o *CheckDeletionStatusInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckDeletionStatusInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

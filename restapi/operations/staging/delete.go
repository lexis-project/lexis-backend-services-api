// Code generated by go-swagger; DO NOT EDIT.

package staging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeleteHandlerFunc turns a function with the right signature into a delete handler
type DeleteHandlerFunc func(DeleteParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteHandlerFunc) Handle(params DeleteParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// DeleteHandler interface for that can handle valid delete params
type DeleteHandler interface {
	Handle(DeleteParams, interface{}) middleware.Responder
}

// NewDelete creates a new http.Handler for the delete operation
func NewDelete(ctx *middleware.Context, handler DeleteHandler) *Delete {
	return &Delete{Context: ctx, Handler: handler}
}

/*Delete swagger:route DELETE /dataset/staging/delete staging dataSetManagement delete

This is called when a user request to delete data. This is only allowed on the staging systems.

This is called when a user request to delete data. This is only allowed on the staging systems.
If you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:
 - For public datasets: "public/proj"+hash+"/"+internalID
 - For user datasets: "user/proj"+hash+"/"+user+"/"+internalID
 - For project datasets: "project/proj"+hash+"/"+internalID


*/
type Delete struct {
	Context *middleware.Context
	Handler DeleteHandler
}

func (o *Delete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DeleteBody delete body
//
// swagger:model DeleteBody
type DeleteBody struct {

	// Possible values are: lrz_iRODS, lrz_staging_area, lrz_staging_area2,
	// lrz_cloud, linux_cluster, superMUC, it4i_iRODS, barbora_lustre,
	// salomon_lustre, barbora_home, salomon_home, it4i_cloud, it4i_staging_area,
	// surf_iRODS, sara_staging_area.
	//
	// Required: true
	TargetPath *string `json:"target_path"`

	// Possible values are: lrz_iRODS, lrz_staging_area, lrz_staging_area2,
	// lrz_cloud, linux_cluster, superMUC, it4i_iRODS, barbora_lustre,
	// salomon_lustre, barbora_home, salomon_home, it4i_cloud, it4i_staging_area,
	// surf_iRODS, sara_staging_area.
	//
	// Required: true
	TargetSystem *string `json:"target_system"`
}

// Validate validates this delete body
func (o *DeleteBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTargetPath(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTargetSystem(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteBody) validateTargetPath(formats strfmt.Registry) error {

	if err := validate.Required("parameters"+"."+"target_path", "body", o.TargetPath); err != nil {
		return err
	}

	return nil
}

func (o *DeleteBody) validateTargetSystem(formats strfmt.Registry) error {

	if err := validate.Required("parameters"+"."+"target_system", "body", o.TargetSystem); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteBody) UnmarshalBinary(b []byte) error {
	var res DeleteBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

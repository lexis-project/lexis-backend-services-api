// Code generated by go-swagger; DO NOT EDIT.

package staging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CheckStageStatusHandlerFunc turns a function with the right signature into a check stage status handler
type CheckStageStatusHandlerFunc func(CheckStageStatusParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CheckStageStatusHandlerFunc) Handle(params CheckStageStatusParams) middleware.Responder {
	return fn(params)
}

// CheckStageStatusHandler interface for that can handle valid check stage status params
type CheckStageStatusHandler interface {
	Handle(CheckStageStatusParams) middleware.Responder
}

// NewCheckStageStatus creates a new http.Handler for the check stage status operation
func NewCheckStageStatus(ctx *middleware.Context, handler CheckStageStatusHandler) *CheckStageStatus {
	return &CheckStageStatus{Context: ctx, Handler: handler}
}

/*CheckStageStatus swagger:route GET /dataset/staging/stage/{request_id} staging dataSetManagement checkStageStatus

Check the status of a transfer

On successful query (200), the status provides information about the result:
 - "Task still in the queue, or task does not exist": The request was not yet enqueued. Wait for a few seconds and retry
 - "Task Failed, reason: <specific reason>": The dataset could not be staged
 - "Transfer completed": The transfer succeeded, and the data is in the target_path property.
 - "In progress": The transfer is in progress, wait a few seconds and retry.


*/
type CheckStageStatus struct {
	Context *middleware.Context
	Handler CheckStageStatusHandler
}

func (o *CheckStageStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCheckStageStatusParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CheckStageStatusOKBody check stage status o k body
//
// swagger:model CheckStageStatusOKBody
type CheckStageStatusOKBody struct {

	// status
	// Required: true
	Status *string `json:"status"`

	// target path
	TargetPath string `json:"target_path,omitempty"`
}

// Validate validates this check stage status o k body
func (o *CheckStageStatusOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CheckStageStatusOKBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("checkStageStatusOK"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CheckStageStatusOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CheckStageStatusOKBody) UnmarshalBinary(b []byte) error {
	var res CheckStageStatusOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package staging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// StagingInfoHandlerFunc turns a function with the right signature into a staging info handler
type StagingInfoHandlerFunc func(StagingInfoParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn StagingInfoHandlerFunc) Handle(params StagingInfoParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// StagingInfoHandler interface for that can handle valid staging info params
type StagingInfoHandler interface {
	Handle(StagingInfoParams, interface{}) middleware.Responder
}

// NewStagingInfo creates a new http.Handler for the staging info operation
func NewStagingInfo(ctx *middleware.Context, handler StagingInfoHandler) *StagingInfo {
	return &StagingInfo{Context: ctx, Handler: handler}
}

/*StagingInfo swagger:route GET /dataset/staging/info staging dataSetManagement stagingInfo

Lists possible target / source systems

*/
type StagingInfo struct {
	Context *middleware.Context
	Handler StagingInfoHandler
}

func (o *StagingInfo) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewStagingInfoParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

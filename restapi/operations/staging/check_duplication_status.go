// Code generated by go-swagger; DO NOT EDIT.

package staging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CheckDuplicationStatusHandlerFunc turns a function with the right signature into a check duplication status handler
type CheckDuplicationStatusHandlerFunc func(CheckDuplicationStatusParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CheckDuplicationStatusHandlerFunc) Handle(params CheckDuplicationStatusParams) middleware.Responder {
	return fn(params)
}

// CheckDuplicationStatusHandler interface for that can handle valid check duplication status params
type CheckDuplicationStatusHandler interface {
	Handle(CheckDuplicationStatusParams) middleware.Responder
}

// NewCheckDuplicationStatus creates a new http.Handler for the check duplication status operation
func NewCheckDuplicationStatus(ctx *middleware.Context, handler CheckDuplicationStatusHandler) *CheckDuplicationStatus {
	return &CheckDuplicationStatus{Context: ctx, Handler: handler}
}

/*CheckDuplicationStatus swagger:route GET /dataset/duplicate/{request_id} staging dataSetManagement checkDuplicationStatus

Check the status of duplication

Check the status of duplication. The status is given as:
- "Task still in the queue, or task does not exist": wait and retry.
- "In progress": wait and retry.
- "Task Failed, reason: <specific reason>": failure
- "Duplication completed": success; target_path provides the path.


*/
type CheckDuplicationStatus struct {
	Context *middleware.Context
	Handler CheckDuplicationStatusHandler
}

func (o *CheckDuplicationStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCheckDuplicationStatusParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CheckDuplicationStatusOKBody check duplication status o k body
//
// swagger:model CheckDuplicationStatusOKBody
type CheckDuplicationStatusOKBody struct {

	// status
	// Required: true
	Status *string `json:"status"`

	// Single path for staging endpoints
	TargetPath string `json:"target_path,omitempty"`
}

// Validate validates this check duplication status o k body
func (o *CheckDuplicationStatusOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CheckDuplicationStatusOKBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("checkDuplicationStatusOK"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CheckDuplicationStatusOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CheckDuplicationStatusOKBody) UnmarshalBinary(b []byte) error {
	var res CheckDuplicationStatusOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

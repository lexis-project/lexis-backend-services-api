// Code generated by go-swagger; DO NOT EDIT.

package workflow_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateWorkflowHandlerFunc turns a function with the right signature into a create workflow handler
type CreateWorkflowHandlerFunc func(CreateWorkflowParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateWorkflowHandlerFunc) Handle(params CreateWorkflowParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// CreateWorkflowHandler interface for that can handle valid create workflow params
type CreateWorkflowHandler interface {
	Handle(CreateWorkflowParams, interface{}) middleware.Responder
}

// NewCreateWorkflow creates a new http.Handler for the create workflow operation
func NewCreateWorkflow(ctx *middleware.Context, handler CreateWorkflowHandler) *CreateWorkflow {
	return &CreateWorkflow{Context: ctx, Handler: handler}
}

/*CreateWorkflow swagger:route POST /workflow workflowManagement createWorkflow

Create a new LEXIS Workflow on the system

If successfull returns a rest response with the id of the created LEXIS workflow in data. If not successful a rest response with an error content is returned.

*/
type CreateWorkflow struct {
	Context *middleware.Context
	Handler CreateWorkflowHandler
}

func (o *CreateWorkflow) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateWorkflowParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// Code generated by go-swagger; DO NOT EDIT.

package workflow_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// GetWorkflowExecutionLogsOKCode is the HTTP code returned for type GetWorkflowExecutionLogsOK
const GetWorkflowExecutionLogsOKCode int = 200

/*GetWorkflowExecutionLogsOK Logs of given LEXIS WorkflowExecution

swagger:response getWorkflowExecutionLogsOK
*/
type GetWorkflowExecutionLogsOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Logs `json:"body,omitempty"`
}

// NewGetWorkflowExecutionLogsOK creates GetWorkflowExecutionLogsOK with default headers values
func NewGetWorkflowExecutionLogsOK() *GetWorkflowExecutionLogsOK {

	return &GetWorkflowExecutionLogsOK{}
}

// WithPayload adds the payload to the get workflow execution logs o k response
func (o *GetWorkflowExecutionLogsOK) WithPayload(payload []*models.Logs) *GetWorkflowExecutionLogsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get workflow execution logs o k response
func (o *GetWorkflowExecutionLogsOK) SetPayload(payload []*models.Logs) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWorkflowExecutionLogsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Logs, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetWorkflowExecutionLogsUnauthorizedCode is the HTTP code returned for type GetWorkflowExecutionLogsUnauthorized
const GetWorkflowExecutionLogsUnauthorizedCode int = 401

/*GetWorkflowExecutionLogsUnauthorized Unauthorized

swagger:response getWorkflowExecutionLogsUnauthorized
*/
type GetWorkflowExecutionLogsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.AuthorizationResponse `json:"body,omitempty"`
}

// NewGetWorkflowExecutionLogsUnauthorized creates GetWorkflowExecutionLogsUnauthorized with default headers values
func NewGetWorkflowExecutionLogsUnauthorized() *GetWorkflowExecutionLogsUnauthorized {

	return &GetWorkflowExecutionLogsUnauthorized{}
}

// WithPayload adds the payload to the get workflow execution logs unauthorized response
func (o *GetWorkflowExecutionLogsUnauthorized) WithPayload(payload *models.AuthorizationResponse) *GetWorkflowExecutionLogsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get workflow execution logs unauthorized response
func (o *GetWorkflowExecutionLogsUnauthorized) SetPayload(payload *models.AuthorizationResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWorkflowExecutionLogsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetWorkflowExecutionLogsNotFoundCode is the HTTP code returned for type GetWorkflowExecutionLogsNotFound
const GetWorkflowExecutionLogsNotFoundCode int = 404

/*GetWorkflowExecutionLogsNotFound The WorkflowExecutionID provided does not exist.

swagger:response getWorkflowExecutionLogsNotFound
*/
type GetWorkflowExecutionLogsNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.MissingResponse `json:"body,omitempty"`
}

// NewGetWorkflowExecutionLogsNotFound creates GetWorkflowExecutionLogsNotFound with default headers values
func NewGetWorkflowExecutionLogsNotFound() *GetWorkflowExecutionLogsNotFound {

	return &GetWorkflowExecutionLogsNotFound{}
}

// WithPayload adds the payload to the get workflow execution logs not found response
func (o *GetWorkflowExecutionLogsNotFound) WithPayload(payload *models.MissingResponse) *GetWorkflowExecutionLogsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get workflow execution logs not found response
func (o *GetWorkflowExecutionLogsNotFound) SetPayload(payload *models.MissingResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWorkflowExecutionLogsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetWorkflowExecutionLogsInternalServerErrorCode is the HTTP code returned for type GetWorkflowExecutionLogsInternalServerError
const GetWorkflowExecutionLogsInternalServerErrorCode int = 500

/*GetWorkflowExecutionLogsInternalServerError unexpected error

swagger:response getWorkflowExecutionLogsInternalServerError
*/
type GetWorkflowExecutionLogsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetWorkflowExecutionLogsInternalServerError creates GetWorkflowExecutionLogsInternalServerError with default headers values
func NewGetWorkflowExecutionLogsInternalServerError() *GetWorkflowExecutionLogsInternalServerError {

	return &GetWorkflowExecutionLogsInternalServerError{}
}

// WithPayload adds the payload to the get workflow execution logs internal server error response
func (o *GetWorkflowExecutionLogsInternalServerError) WithPayload(payload *models.ErrorResponse) *GetWorkflowExecutionLogsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get workflow execution logs internal server error response
func (o *GetWorkflowExecutionLogsInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWorkflowExecutionLogsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

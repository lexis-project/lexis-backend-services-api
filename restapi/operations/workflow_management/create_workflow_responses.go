// Code generated by go-swagger; DO NOT EDIT.

package workflow_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// CreateWorkflowCreatedCode is the HTTP code returned for type CreateWorkflowCreated
const CreateWorkflowCreatedCode int = 201

/*CreateWorkflowCreated Workflow Created

swagger:response createWorkflowCreated
*/
type CreateWorkflowCreated struct {

	/*
	  In: Body
	*/
	Payload *models.ItemCreatedResponse `json:"body,omitempty"`
}

// NewCreateWorkflowCreated creates CreateWorkflowCreated with default headers values
func NewCreateWorkflowCreated() *CreateWorkflowCreated {

	return &CreateWorkflowCreated{}
}

// WithPayload adds the payload to the create workflow created response
func (o *CreateWorkflowCreated) WithPayload(payload *models.ItemCreatedResponse) *CreateWorkflowCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create workflow created response
func (o *CreateWorkflowCreated) SetPayload(payload *models.ItemCreatedResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateWorkflowCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateWorkflowBadRequestCode is the HTTP code returned for type CreateWorkflowBadRequest
const CreateWorkflowBadRequestCode int = 400

/*CreateWorkflowBadRequest invalid input, object invalid

swagger:response createWorkflowBadRequest
*/
type CreateWorkflowBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.InvalidResponse `json:"body,omitempty"`
}

// NewCreateWorkflowBadRequest creates CreateWorkflowBadRequest with default headers values
func NewCreateWorkflowBadRequest() *CreateWorkflowBadRequest {

	return &CreateWorkflowBadRequest{}
}

// WithPayload adds the payload to the create workflow bad request response
func (o *CreateWorkflowBadRequest) WithPayload(payload *models.InvalidResponse) *CreateWorkflowBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create workflow bad request response
func (o *CreateWorkflowBadRequest) SetPayload(payload *models.InvalidResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateWorkflowBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateWorkflowUnauthorizedCode is the HTTP code returned for type CreateWorkflowUnauthorized
const CreateWorkflowUnauthorizedCode int = 401

/*CreateWorkflowUnauthorized Unauthorized

swagger:response createWorkflowUnauthorized
*/
type CreateWorkflowUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.AuthorizationResponse `json:"body,omitempty"`
}

// NewCreateWorkflowUnauthorized creates CreateWorkflowUnauthorized with default headers values
func NewCreateWorkflowUnauthorized() *CreateWorkflowUnauthorized {

	return &CreateWorkflowUnauthorized{}
}

// WithPayload adds the payload to the create workflow unauthorized response
func (o *CreateWorkflowUnauthorized) WithPayload(payload *models.AuthorizationResponse) *CreateWorkflowUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create workflow unauthorized response
func (o *CreateWorkflowUnauthorized) SetPayload(payload *models.AuthorizationResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateWorkflowUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateWorkflowConflictCode is the HTTP code returned for type CreateWorkflowConflict
const CreateWorkflowConflictCode int = 409

/*CreateWorkflowConflict Workflow Name already exists

swagger:response createWorkflowConflict
*/
type CreateWorkflowConflict struct {

	/*
	  In: Body
	*/
	Payload *models.ConflictResponse `json:"body,omitempty"`
}

// NewCreateWorkflowConflict creates CreateWorkflowConflict with default headers values
func NewCreateWorkflowConflict() *CreateWorkflowConflict {

	return &CreateWorkflowConflict{}
}

// WithPayload adds the payload to the create workflow conflict response
func (o *CreateWorkflowConflict) WithPayload(payload *models.ConflictResponse) *CreateWorkflowConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create workflow conflict response
func (o *CreateWorkflowConflict) SetPayload(payload *models.ConflictResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateWorkflowConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateWorkflowInternalServerErrorCode is the HTTP code returned for type CreateWorkflowInternalServerError
const CreateWorkflowInternalServerErrorCode int = 500

/*CreateWorkflowInternalServerError unexpected error

swagger:response createWorkflowInternalServerError
*/
type CreateWorkflowInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCreateWorkflowInternalServerError creates CreateWorkflowInternalServerError with default headers values
func NewCreateWorkflowInternalServerError() *CreateWorkflowInternalServerError {

	return &CreateWorkflowInternalServerError{}
}

// WithPayload adds the payload to the create workflow internal server error response
func (o *CreateWorkflowInternalServerError) WithPayload(payload *models.ErrorResponse) *CreateWorkflowInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create workflow internal server error response
func (o *CreateWorkflowInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateWorkflowInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

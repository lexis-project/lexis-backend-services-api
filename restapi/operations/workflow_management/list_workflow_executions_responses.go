// Code generated by go-swagger; DO NOT EDIT.

package workflow_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// ListWorkflowExecutionsOKCode is the HTTP code returned for type ListWorkflowExecutionsOK
const ListWorkflowExecutionsOKCode int = 200

/*ListWorkflowExecutionsOK List of available LEXIS Workflow Executions

swagger:response listWorkflowExecutionsOK
*/
type ListWorkflowExecutionsOK struct {

	/*
	  In: Body
	*/
	Payload []*models.WorkflowExecution `json:"body,omitempty"`
}

// NewListWorkflowExecutionsOK creates ListWorkflowExecutionsOK with default headers values
func NewListWorkflowExecutionsOK() *ListWorkflowExecutionsOK {

	return &ListWorkflowExecutionsOK{}
}

// WithPayload adds the payload to the list workflow executions o k response
func (o *ListWorkflowExecutionsOK) WithPayload(payload []*models.WorkflowExecution) *ListWorkflowExecutionsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list workflow executions o k response
func (o *ListWorkflowExecutionsOK) SetPayload(payload []*models.WorkflowExecution) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListWorkflowExecutionsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.WorkflowExecution, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListWorkflowExecutionsUnauthorizedCode is the HTTP code returned for type ListWorkflowExecutionsUnauthorized
const ListWorkflowExecutionsUnauthorizedCode int = 401

/*ListWorkflowExecutionsUnauthorized Authorization information is missing or invalid.

swagger:response listWorkflowExecutionsUnauthorized
*/
type ListWorkflowExecutionsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.AuthorizationResponse `json:"body,omitempty"`
}

// NewListWorkflowExecutionsUnauthorized creates ListWorkflowExecutionsUnauthorized with default headers values
func NewListWorkflowExecutionsUnauthorized() *ListWorkflowExecutionsUnauthorized {

	return &ListWorkflowExecutionsUnauthorized{}
}

// WithPayload adds the payload to the list workflow executions unauthorized response
func (o *ListWorkflowExecutionsUnauthorized) WithPayload(payload *models.AuthorizationResponse) *ListWorkflowExecutionsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list workflow executions unauthorized response
func (o *ListWorkflowExecutionsUnauthorized) SetPayload(payload *models.AuthorizationResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListWorkflowExecutionsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListWorkflowExecutionsNotFoundCode is the HTTP code returned for type ListWorkflowExecutionsNotFound
const ListWorkflowExecutionsNotFoundCode int = 404

/*ListWorkflowExecutionsNotFound List Worklow Executions reuired dependencies not found

swagger:response listWorkflowExecutionsNotFound
*/
type ListWorkflowExecutionsNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.MissingResponse `json:"body,omitempty"`
}

// NewListWorkflowExecutionsNotFound creates ListWorkflowExecutionsNotFound with default headers values
func NewListWorkflowExecutionsNotFound() *ListWorkflowExecutionsNotFound {

	return &ListWorkflowExecutionsNotFound{}
}

// WithPayload adds the payload to the list workflow executions not found response
func (o *ListWorkflowExecutionsNotFound) WithPayload(payload *models.MissingResponse) *ListWorkflowExecutionsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list workflow executions not found response
func (o *ListWorkflowExecutionsNotFound) SetPayload(payload *models.MissingResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListWorkflowExecutionsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListWorkflowExecutionsInternalServerErrorCode is the HTTP code returned for type ListWorkflowExecutionsInternalServerError
const ListWorkflowExecutionsInternalServerErrorCode int = 500

/*ListWorkflowExecutionsInternalServerError Unexpected error.

swagger:response listWorkflowExecutionsInternalServerError
*/
type ListWorkflowExecutionsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewListWorkflowExecutionsInternalServerError creates ListWorkflowExecutionsInternalServerError with default headers values
func NewListWorkflowExecutionsInternalServerError() *ListWorkflowExecutionsInternalServerError {

	return &ListWorkflowExecutionsInternalServerError{}
}

// WithPayload adds the payload to the list workflow executions internal server error response
func (o *ListWorkflowExecutionsInternalServerError) WithPayload(payload *models.ErrorResponse) *ListWorkflowExecutionsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list workflow executions internal server error response
func (o *ListWorkflowExecutionsInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListWorkflowExecutionsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

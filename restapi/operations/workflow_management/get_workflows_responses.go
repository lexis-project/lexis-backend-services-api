// Code generated by go-swagger; DO NOT EDIT.

package workflow_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// GetWorkflowsOKCode is the HTTP code returned for type GetWorkflowsOK
const GetWorkflowsOKCode int = 200

/*GetWorkflowsOK List of available LEXIS Workflows

swagger:response getWorkflowsOK
*/
type GetWorkflowsOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Workflow `json:"body,omitempty"`
}

// NewGetWorkflowsOK creates GetWorkflowsOK with default headers values
func NewGetWorkflowsOK() *GetWorkflowsOK {

	return &GetWorkflowsOK{}
}

// WithPayload adds the payload to the get workflows o k response
func (o *GetWorkflowsOK) WithPayload(payload []*models.Workflow) *GetWorkflowsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get workflows o k response
func (o *GetWorkflowsOK) SetPayload(payload []*models.Workflow) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWorkflowsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Workflow, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetWorkflowsUnauthorizedCode is the HTTP code returned for type GetWorkflowsUnauthorized
const GetWorkflowsUnauthorizedCode int = 401

/*GetWorkflowsUnauthorized Authorization information is missing or invalid.

swagger:response getWorkflowsUnauthorized
*/
type GetWorkflowsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.AuthorizationResponse `json:"body,omitempty"`
}

// NewGetWorkflowsUnauthorized creates GetWorkflowsUnauthorized with default headers values
func NewGetWorkflowsUnauthorized() *GetWorkflowsUnauthorized {

	return &GetWorkflowsUnauthorized{}
}

// WithPayload adds the payload to the get workflows unauthorized response
func (o *GetWorkflowsUnauthorized) WithPayload(payload *models.AuthorizationResponse) *GetWorkflowsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get workflows unauthorized response
func (o *GetWorkflowsUnauthorized) SetPayload(payload *models.AuthorizationResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWorkflowsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetWorkflowsInternalServerErrorCode is the HTTP code returned for type GetWorkflowsInternalServerError
const GetWorkflowsInternalServerErrorCode int = 500

/*GetWorkflowsInternalServerError Unexpected error.

swagger:response getWorkflowsInternalServerError
*/
type GetWorkflowsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetWorkflowsInternalServerError creates GetWorkflowsInternalServerError with default headers values
func NewGetWorkflowsInternalServerError() *GetWorkflowsInternalServerError {

	return &GetWorkflowsInternalServerError{}
}

// WithPayload adds the payload to the get workflows internal server error response
func (o *GetWorkflowsInternalServerError) WithPayload(payload *models.ErrorResponse) *GetWorkflowsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get workflows internal server error response
func (o *GetWorkflowsInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWorkflowsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

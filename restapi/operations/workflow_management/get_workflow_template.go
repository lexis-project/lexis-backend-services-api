// Code generated by go-swagger; DO NOT EDIT.

package workflow_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetWorkflowTemplateHandlerFunc turns a function with the right signature into a get workflow template handler
type GetWorkflowTemplateHandlerFunc func(GetWorkflowTemplateParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetWorkflowTemplateHandlerFunc) Handle(params GetWorkflowTemplateParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetWorkflowTemplateHandler interface for that can handle valid get workflow template params
type GetWorkflowTemplateHandler interface {
	Handle(GetWorkflowTemplateParams, interface{}) middleware.Responder
}

// NewGetWorkflowTemplate creates a new http.Handler for the get workflow template operation
func NewGetWorkflowTemplate(ctx *middleware.Context, handler GetWorkflowTemplateHandler) *GetWorkflowTemplate {
	return &GetWorkflowTemplate{Context: ctx, Handler: handler}
}

/*GetWorkflowTemplate swagger:route GET /workflow/template/{workflowTemplateId} workflowManagement getWorkflowTemplate

Return detailed info on Workflow Template give workflowTemplateID

Get the workflow template with the given workflowTemplateId

*/
type GetWorkflowTemplate struct {
	Context *middleware.Context
	Handler GetWorkflowTemplateHandler
}

func (o *GetWorkflowTemplate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetWorkflowTemplateParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// Code generated by go-swagger; DO NOT EDIT.

package workflow_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetWorkflowHandlerFunc turns a function with the right signature into a get workflow handler
type GetWorkflowHandlerFunc func(GetWorkflowParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetWorkflowHandlerFunc) Handle(params GetWorkflowParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetWorkflowHandler interface for that can handle valid get workflow params
type GetWorkflowHandler interface {
	Handle(GetWorkflowParams, interface{}) middleware.Responder
}

// NewGetWorkflow creates a new http.Handler for the get workflow operation
func NewGetWorkflow(ctx *middleware.Context, handler GetWorkflowHandler) *GetWorkflow {
	return &GetWorkflow{Context: ctx, Handler: handler}
}

/*GetWorkflow swagger:route GET /workflow/{workflowId} workflowManagement getWorkflow

Return detailed info on LEXIS Workflow for given Workflow ID

Get the workflow with the given workflowId

*/
type GetWorkflow struct {
	Context *middleware.Context
	Handler GetWorkflowHandler
}

func (o *GetWorkflow) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetWorkflowParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// Code generated by go-swagger; DO NOT EDIT.

package workflow_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"github.com/lexis-project/lexis-backend-services-api.git/models"
)

// NewCreateWorkflowParams creates a new CreateWorkflowParams object
// no default values defined in spec.
func NewCreateWorkflowParams() CreateWorkflowParams {

	return CreateWorkflowParams{}
}

// CreateWorkflowParams contains all the bound params for the create workflow operation
// typically these are obtained from a http.Request
//
// swagger:parameters createWorkflow
type CreateWorkflowParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Create LEXIS Workflow request
	  Required: true
	  In: body
	*/
	WorkflowRequest *models.WorkflowRequest
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewCreateWorkflowParams() beforehand.
func (o *CreateWorkflowParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.WorkflowRequest
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("workflowRequest", "body", ""))
			} else {
				res = append(res, errors.NewParseError("workflowRequest", "body", "", err))
			}
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.WorkflowRequest = &body
			}
		}
	} else {
		res = append(res, errors.Required("workflowRequest", "body", ""))
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

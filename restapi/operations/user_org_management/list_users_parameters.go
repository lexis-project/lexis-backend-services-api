// Code generated by go-swagger; DO NOT EDIT.

package user_org_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewListUsersParams creates a new ListUsersParams object
// with the default values initialized.
func NewListUsersParams() ListUsersParams {

	var (
		// initialize parameters with default values

		scopeDefault = string("OWN")
	)

	return ListUsersParams{
		Scope: &scopeDefault,
	}
}

// ListUsersParams contains all the bound params for the list users operation
// typically these are obtained from a http.Request
//
// swagger:parameters listUsers
type ListUsersParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*email to filter when listing
	  In: query
	*/
	Email *strfmt.Email
	/*users permissions switch
	  In: query
	*/
	Permissions *bool
	/*project uuid to filter when listing
	  In: query
	*/
	Project *strfmt.UUID
	/*organization scope switch
	  In: query
	  Default: "OWN"
	*/
	Scope *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewListUsersParams() beforehand.
func (o *ListUsersParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qEmail, qhkEmail, _ := qs.GetOK("email")
	if err := o.bindEmail(qEmail, qhkEmail, route.Formats); err != nil {
		res = append(res, err)
	}

	qPermissions, qhkPermissions, _ := qs.GetOK("permissions")
	if err := o.bindPermissions(qPermissions, qhkPermissions, route.Formats); err != nil {
		res = append(res, err)
	}

	qProject, qhkProject, _ := qs.GetOK("project")
	if err := o.bindProject(qProject, qhkProject, route.Formats); err != nil {
		res = append(res, err)
	}

	qScope, qhkScope, _ := qs.GetOK("scope")
	if err := o.bindScope(qScope, qhkScope, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindEmail binds and validates parameter Email from query.
func (o *ListUsersParams) bindEmail(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: email
	value, err := formats.Parse("email", raw)
	if err != nil {
		return errors.InvalidType("email", "query", "strfmt.Email", raw)
	}
	o.Email = (value.(*strfmt.Email))

	if err := o.validateEmail(formats); err != nil {
		return err
	}

	return nil
}

// validateEmail carries on validations for parameter Email
func (o *ListUsersParams) validateEmail(formats strfmt.Registry) error {

	if err := validate.FormatOf("email", "query", "email", o.Email.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindPermissions binds and validates parameter Permissions from query.
func (o *ListUsersParams) bindPermissions(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("permissions", "query", "bool", raw)
	}
	o.Permissions = &value

	return nil
}

// bindProject binds and validates parameter Project from query.
func (o *ListUsersParams) bindProject(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("project", "query", "strfmt.UUID", raw)
	}
	o.Project = (value.(*strfmt.UUID))

	if err := o.validateProject(formats); err != nil {
		return err
	}

	return nil
}

// validateProject carries on validations for parameter Project
func (o *ListUsersParams) validateProject(formats strfmt.Registry) error {

	if err := validate.FormatOf("project", "query", "uuid", o.Project.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindScope binds and validates parameter Scope from query.
func (o *ListUsersParams) bindScope(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewListUsersParams()
		return nil
	}

	o.Scope = &raw

	if err := o.validateScope(formats); err != nil {
		return err
	}

	return nil
}

// validateScope carries on validations for parameter Scope
func (o *ListUsersParams) validateScope(formats strfmt.Registry) error {

	if err := validate.EnumCase("scope", "query", *o.Scope, []interface{}{"ALL", "OWN", "ALLOWED"}, true); err != nil {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package user_org_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewListHPCResourcesParams creates a new ListHPCResourcesParams object
// with the default values initialized.
func NewListHPCResourcesParams() ListHPCResourcesParams {

	var (
		// initialize parameters with default values

		scopeDefault = string("ALL")
	)

	return ListHPCResourcesParams{
		Scope: &scopeDefault,
	}
}

// ListHPCResourcesParams contains all the bound params for the list h p c resources operation
// typically these are obtained from a http.Request
//
// swagger:parameters listHPCResources
type ListHPCResourcesParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*organization scope switch
	  In: query
	  Default: "ALL"
	*/
	Scope *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewListHPCResourcesParams() beforehand.
func (o *ListHPCResourcesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qScope, qhkScope, _ := qs.GetOK("scope")
	if err := o.bindScope(qScope, qhkScope, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindScope binds and validates parameter Scope from query.
func (o *ListHPCResourcesParams) bindScope(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewListHPCResourcesParams()
		return nil
	}

	o.Scope = &raw

	if err := o.validateScope(formats); err != nil {
		return err
	}

	return nil
}

// validateScope carries on validations for parameter Scope
func (o *ListHPCResourcesParams) validateScope(formats strfmt.Registry) error {

	if err := validate.EnumCase("scope", "query", *o.Scope, []interface{}{"ALL", "OWN", "ALLOWED"}, true); err != nil {
		return err
	}

	return nil
}

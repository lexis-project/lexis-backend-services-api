// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "description": "The LEXIS Portal API serves as the API proxy to all the interfaces that interact with the parts involved in LEXIS.",
    "title": "LEXIS Portal API",
    "contact": {
      "email": "diego@cyclops-labs.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "0.2.2021-12-17"
  },
  "basePath": "/api/v0.2",
  "paths": {
    "/accounting/{id}/available": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "usageManagement"
        ],
        "summary": "Credit status of the account with the provided id",
        "operationId": "getCredit",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the account to be checked",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Credit status of the account with the provided id",
            "schema": {
              "$ref": "#/definitions/CreditStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The account with the provided id doesn't exist",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Something unexpected happend, error raised",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/accounting/{id}/history": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "usageManagement"
        ],
        "summary": "Credit history of the customer with id",
        "operationId": "getHistory",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the account to get the history",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Boolean variable to control if the system consumptions have to be listed or not",
            "name": "filterSystem",
            "in": "query"
          },
          {
            "enum": [
              "credit",
              "cash"
            ],
            "type": "string",
            "description": "Medium (cash/credit) to be used as filter",
            "name": "medium",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Credit status history of the account with the provided id",
            "schema": {
              "$ref": "#/definitions/CreditHistory"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The endpoint provided doesn't exist",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Something unexpected happend, error raised",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/accounting/{id}/manage/{medium}/consume/{amount}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "usageManagement"
        ],
        "summary": "Adds a consumption to the system",
        "operationId": "addConsumption",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the account to be checked",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "format": "double",
            "description": "Amount to be decreased",
            "name": "amount",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "credit",
              "cash"
            ],
            "type": "string",
            "description": "Medium (cash/credit) to be used in the accounting",
            "name": "medium",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Credit status of the account with the provided id",
            "schema": {
              "$ref": "#/definitions/CreditStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The account with the id provided doesn't exist",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Something unexpected happend, error raised",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/accounting/{id}/manage/{medium}/decrease/{amount}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "usageManagement"
        ],
        "summary": "Insert a new reseller in the system.",
        "operationId": "decreaseCredit",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the account to be checked",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "format": "double",
            "description": "Amount to be decreased",
            "name": "amount",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "credit",
              "cash"
            ],
            "type": "string",
            "description": "Medium (cash/credit) to be used in the accounting",
            "name": "medium",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Credit status of the account with the provided id",
            "schema": {
              "$ref": "#/definitions/CreditStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The account with the id provided doesn't exist",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Something unexpected happend, error raised",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/accounting/{id}/manage/{medium}/increase/{amount}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "usageManagement"
        ],
        "summary": "Insert a new reseller in the system.",
        "operationId": "increaseCredit",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the account to be checked",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "format": "double",
            "description": "Amount to be inccreased",
            "name": "amount",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "credit",
              "cash"
            ],
            "type": "string",
            "description": "Medium (cash/credit) to be used in the accounting",
            "name": "medium",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Credit status of the account with the provided id",
            "schema": {
              "$ref": "#/definitions/CreditStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The account with the id provided doesn't exist",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Something unexpected happend, error raised",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/accounting/{id}/usage": {
      "get": {
        "description": "get account usage of project with given id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "usageManagement"
        ],
        "summary": "Get account usage for specific project",
        "operationId": "getUsage",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of project to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "datetime",
            "description": "Datetime from which to get the usage report",
            "name": "from",
            "in": "query"
          },
          {
            "type": "string",
            "format": "datetime",
            "description": "Datetime until which to get the usage report",
            "name": "to",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "usage returned",
            "schema": {
              "$ref": "#/definitions/Usage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "project not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/approval_system/approvedResourceRequest": {
      "post": {
        "description": "Creates a new HPC approved resource request in approval system",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "approvalSystemManagement"
        ],
        "summary": "Create HPC approved resource request",
        "operationId": "CreateApprovedResourceRequest",
        "parameters": [
          {
            "description": "HPC approved resource request to be created",
            "name": "approvedResourceRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemApprovedResourceRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "approved resource request created",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemCreatedResponse"
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemInvalidResponse"
            }
          },
          "404": {
            "description": "Required stuff for resource request creation hasn't been met.",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemMissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemErrorResponse"
            }
          }
        }
      }
    },
    "/approval_system/approvedResourceRequest/{HPCResourceID}": {
      "get": {
        "description": "Gets an HPC approved resource request by ID of associated HPC resource.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "approvalSystemManagement"
        ],
        "summary": "Get specific approved resources request from approval system",
        "operationId": "HPCApprovedResourceRequest",
        "parameters": [
          {
            "type": "string",
            "description": "String ID of the HPC resource whose approved resource request to be obtained.",
            "name": "HPCResourceID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "HPC approved resource request",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemApprovedResourceRequest"
            }
          },
          "404": {
            "description": "Resource request not found.",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemMissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemErrorResponse"
            }
          }
        }
      }
    },
    "/approval_system/projectApprovedResourceRequest/{AssociatedLEXISProject}": {
      "get": {
        "description": "lists all HPC approved resource requests for particular LEXIS project from approval system",
        "produces": [
          "application/json"
        ],
        "tags": [
          "approvalSystemManagement"
        ],
        "summary": "List all HPC approved resource requests for particular LEXIS project from approval system",
        "operationId": "listProjectHPCApprovedResourceRequest",
        "parameters": [
          {
            "type": "string",
            "description": "LEXIS project ID",
            "name": "AssociatedLEXISProject",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "list of HPC approved resource requests returned for particular LEXIS project",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApprovalSystemApprovedResourceRequest"
              }
            }
          },
          "404": {
            "description": "The AssociatedLEXISProject ID provided does not exist.",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemMissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemErrorResponse"
            }
          }
        }
      }
    },
    "/approval_system/projectResourceRequest/{AssociatedLEXISProject}": {
      "get": {
        "description": "lists all HPC resource requests for particular LEXIS project from approval system",
        "produces": [
          "application/json"
        ],
        "tags": [
          "approvalSystemManagement"
        ],
        "summary": "List all HPC resource requests for particular LEXIS project from approval system",
        "operationId": "listProjectHPCResourceRequest",
        "parameters": [
          {
            "type": "string",
            "description": "LEXIS project ID",
            "name": "AssociatedLEXISProject",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "list of HPC resource requests returned for particular LEXIS project",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApprovalSystemResourceRequest"
              }
            }
          },
          "404": {
            "description": "The AssociatedLEXISProject ID provided does not exist.",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemMissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemErrorResponse"
            }
          }
        }
      }
    },
    "/approval_system/resource": {
      "get": {
        "description": "lists all HPC resources from approval system",
        "produces": [
          "application/json"
        ],
        "tags": [
          "approvalSystemManagement"
        ],
        "summary": "List all HPC resources from approval system",
        "operationId": "listResources",
        "responses": {
          "200": {
            "description": "list of HPC resources returned from from approval system",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApprovalSystemResource"
              }
            }
          },
          "404": {
            "description": "List of available HPC resources not found",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemMissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemErrorResponse"
            }
          }
        }
      }
    },
    "/approval_system/resourceRequest": {
      "post": {
        "description": "Creates a new HPC resource request in approval system",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "approvalSystemManagement"
        ],
        "summary": "Create HPC resource request",
        "operationId": "CreateResourceRequest",
        "parameters": [
          {
            "description": "HPC resource request to be created",
            "name": "resourceRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemResourceRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "resource request created",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemCreatedResponse"
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemInvalidResponse"
            }
          },
          "404": {
            "description": "Required stuff for resource request creation hasn't been met.",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemMissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemErrorResponse"
            }
          }
        }
      }
    },
    "/approval_system/resourceRequest/{HPCResourceID}": {
      "get": {
        "description": "Gets a resource request by ID of associated HPC resource.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "approvalSystemManagement"
        ],
        "summary": "Get specific resource request from approval system",
        "operationId": "HPCResourceRequest",
        "parameters": [
          {
            "type": "string",
            "description": "String ID of the HPC resource whose resource request to be obtained.",
            "name": "HPCResourceID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "HPC resource request",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemResourceRequest"
            }
          },
          "404": {
            "description": "Resource request not found.",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemMissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemErrorResponse"
            }
          }
        }
      }
    },
    "/authz/{userID}/add/{role}": {
      "post": {
        "description": "It adds a role to the user, when assigning user role to project, then projectShortName and projectID are required",
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "add a role to the specified user",
        "operationId": "addRole",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the user to be modified",
            "name": "userID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "role to be added",
            "name": "role",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the organization linked",
            "name": "organizationID",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the project linked",
            "name": "projectID",
            "in": "query"
          },
          {
            "type": "string",
            "description": "(REQUIRED when ProjectID is provided!) Short name of the project linked",
            "name": "projectShortName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Role added successfully",
            "schema": {
              "$ref": "#/definitions/AuthorizationResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/authz/{userID}/clear": {
      "post": {
        "description": "It clears the actual role of the user and assignes a end_user one",
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "clears the actual role of the user and assignes a end_user one",
        "operationId": "clearRole",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the user to be modified",
            "name": "userID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the organization linked",
            "name": "organizationID",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the project linked",
            "name": "projectID",
            "in": "query"
          },
          {
            "type": "string",
            "description": "(REQUIRED when ProjectID is provided!) Short name of the project linked",
            "name": "projectShortName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Role added successfully",
            "schema": {
              "$ref": "#/definitions/AuthorizationResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset": {
      "post": {
        "description": "Creates a new dataset",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Create a dataset",
        "operationId": "createDataset",
        "parameters": [
          {
            "description": "parameters",
            "name": "dataset",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "push_method",
                "access",
                "project"
              ],
              "properties": {
                "access": {
                  "$ref": "#/definitions/AccessMode"
                },
                "comp": {
                  "type": "string",
                  "enum": [
                    "yes",
                    "no"
                  ]
                },
                "compress_method": {
                  "$ref": "#/definitions/CompressMethod"
                },
                "enc": {
                  "type": "string",
                  "enum": [
                    "yes",
                    "no"
                  ]
                },
                "file": {
                  "description": "- If pushmethod is directupload, json-escaped, base64-encoded\nfile or zip (depending on compress_method).\n- If pushmethod is tus, url from the Location returned by the\nprevious tus call.\n",
                  "type": "string"
                },
                "internalID": {
                  "type": "string"
                },
                "metadata": {
                  "$ref": "#/definitions/DatasetMetadata"
                },
                "name": {
                  "description": "name of the file if compress_method is file, or if using pushmethod tus.",
                  "type": "string"
                },
                "path": {
                  "description": "path within the dataset, without a starting slash. An empty\nstring pushes to the root of the dataset (i.e. inside the\ndirectory named \u003cinternalID\u003e in the iRODS backend).\n",
                  "type": "string"
                },
                "project": {
                  "type": "string"
                },
                "push_method": {
                  "$ref": "#/definitions/PushMethod"
                },
                "zone": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "dataset modified",
            "schema": {
              "$ref": "#/definitions/DatasetItemCreatedResponse"
            }
          },
          "201": {
            "description": "dataset created",
            "schema": {
              "$ref": "#/definitions/DatasetItemCreatedResponse"
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "User not authorized to perform action",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a dataset by internalID (or subdataset by path)",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Delete Dataset",
        "operationId": "DeleteDataset",
        "parameters": [
          {
            "description": "parameter",
            "name": "json",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "internalID",
                "access",
                "project"
              ],
              "properties": {
                "access": {
                  "$ref": "#/definitions/AccessMode"
                },
                "internalID": {
                  "type": "string"
                },
                "path": {
                  "description": "path within the dataset, without a starting slash. An empty\nstring pushes to the root of the dataset (i.e. inside the\ndirectory named \u003cinternalID\u003e in the iRODS backend).\n",
                  "type": "string"
                },
                "project": {
                  "type": "string"
                },
                "zone": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The delete request was enqueued. StagingAPI and requestID can be concatenated to obtain a query URL about this request.",
            "schema": {
              "type": "object",
              "properties": {
                "internalID": {
                  "type": "string"
                },
                "request_id": {
                  "type": "string"
                },
                "stagingAPI": {
                  "type": "string"
                }
              }
            }
          },
          "204": {
            "description": "Dataset does not exist"
          },
          "400": {
            "description": "Malformed Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/cert": {
      "get": {
        "description": "download public key for WP3 APIs",
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "download public key for WP3 APIs",
        "operationId": "Certificate",
        "responses": {
          "200": {
            "description": "Certificate download in body of response",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/checkpermission": {
      "post": {
        "description": "Check if a user has permission to access a DDI location for writing",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Check if a user has permission to access a DDI location for writing",
        "operationId": "CheckPermission",
        "parameters": [
          {
            "name": "Access",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "access",
                "project"
              ],
              "properties": {
                "access": {
                  "$ref": "#/definitions/AccessMode"
                },
                "project": {
                  "type": "string",
                  "example": "wp6"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User has permission to write",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string",
                  "pattern": "200",
                  "example": "200"
                }
              }
            }
          },
          "400": {
            "description": "Malformed request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "User does not have permission",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Error accessing backend service",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/cloud/add/{param}": {
      "get": {
        "security": [],
        "description": "Check the status of a nfs export add request for the cloud",
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging"
        ],
        "summary": "Check the status of a nfs export add request for the cloud",
        "operationId": "CheckCloudNFSExportAddStatus",
        "parameters": [
          {
            "type": "string",
            "description": "queue identifier returned by a POST request at /cloud/add/{param}",
            "name": "param",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and NFS export can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "The IP is outside of the allowed range",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Keycloak": []
          }
        ],
        "description": "Request that an nfs export be created for an LRZ cloud instance",
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging"
        ],
        "summary": "Request that an nfs export be created for an LRZ cloud instance",
        "operationId": "CloudNFSExportAdd",
        "parameters": [
          {
            "type": "string",
            "description": "IP of the cloud machine",
            "name": "param",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the request for addition has been initiated. Status of the addition process can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/SteeringRequestID"
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "The IP is outside of the allowed range",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/cloud/remove/{param}": {
      "get": {
        "security": [],
        "description": "Check the status of a nfs export remove request for the cloud",
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging"
        ],
        "summary": "Check the status of a nfs export remove request for the cloud",
        "operationId": "CheckCloudNFSExportRemoveStatus",
        "parameters": [
          {
            "type": "string",
            "description": "queue identifier returned by a POST request at /cloud/remove/{param}",
            "name": "param",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Keycloak": []
          }
        ],
        "description": "Request that an nfs export be removed for an LRZ cloud instance",
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging"
        ],
        "summary": "Request that an nfs export be removed for an LRZ cloud instance",
        "operationId": "CloudNFSExportRemove",
        "parameters": [
          {
            "type": "string",
            "description": "IP of the cloud machine",
            "name": "param",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the request for removal has been initiated. Status of the removal process can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/SteeringRequestID"
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/compress/zip": {
      "post": {
        "description": "Creates a multipart zip file from a staging api source_system/source_path combination\nIf you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:\n - For public datasets: \"public/proj\"+hash+\"/\"+internalID\n - For user datasets: \"user/proj\"+hash+\"/\"+user+\"/\"+internalID\n - For project datasets: \"project/proj\"+hash+\"/\"+internalID\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "CompressAPI"
        ],
        "summary": "Creates a multipart zip file from a staging api source_system/source_path combination",
        "operationId": "CompressToZip",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path",
                "size"
              ],
              "properties": {
                "size": {
                  "type": "integer"
                },
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string",
                  "enum": [
                    "lrz_iRODS"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Request was added to the queue",
            "schema": {
              "$ref": "#/definitions/SteeringRequestID"
            }
          },
          "400": {
            "description": "Malformed Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/compress/zip/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of a transfer",
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "dataSetManagement"
        ],
        "summary": "Check the status of a transfer",
        "operationId": "CheckCompressToZipStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string",
                  "example": "Multipart zip created!"
                },
                "target_paths": {
                  "description": "Multiple paths for CompressAPI endpoints",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/data/size": {
      "post": {
        "description": "This is called when a user requests size of a dataset.\nIf you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:\n - For public datasets: \"public/proj\"+hash+\"/\"+internalID\n - For user datasets: \"user/proj\"+hash+\"/\"+user+\"/\"+internalID\n - For project datasets: \"project/proj\"+hash+\"/\"+internalID\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "This is called when a user requests size of a dataset.",
        "operationId": "Size",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "target_system",
                "target_path"
              ],
              "properties": {
                "target_path": {
                  "description": "Possible values are: \"lrz_iRODS\", \"it4i_iRODS\"\n",
                  "type": "string"
                },
                "target_system": {
                  "description": "Possible values are: \"lrz_iRODS\", \"it4i_iRODS\"\n",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "This is called when a user requests size of a dataset.",
            "schema": {
              "$ref": "#/definitions/SteeringRequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path or the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path or the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/data/size/{request_id}": {
      "get": {
        "description": "This is called when a user requests to check the status of datasize request",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "This is called when a user requests to check the status of datasize request",
        "operationId": "CheckSizeStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "$ref": "#/definitions/DataSize"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path or the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path or the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/download": {
      "post": {
        "description": "Downloads a dataset. Use the header \"Accept: application/octet-stream\"\nor \"Accept: */*\" to enable the api to provide either zip content (normal\noperation) or json (error reporting).\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "DownloadDataset",
        "operationId": "DownloadDataset",
        "parameters": [
          {
            "description": "parameters",
            "name": "json",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "internalID",
                "access",
                "project"
              ],
              "properties": {
                "access": {
                  "$ref": "#/definitions/AccessMode"
                },
                "archivetype": {
                  "$ref": "#/definitions/ArchiveType"
                },
                "internalID": {
                  "type": "string"
                },
                "path": {
                  "description": "path within the dataset, without a starting slash. An empty\nstring pushes to the root of the dataset (i.e. inside the\ndirectory named \u003cinternalID\u003e in the iRODS backend).\n",
                  "type": "string"
                },
                "project": {
                  "type": "string"
                },
                "push_method": {
                  "type": "string",
                  "enum": [
                    "directupload"
                  ]
                },
                "zone": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "zip containing dataset",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Malformed Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/duplicate": {
      "post": {
        "description": "Duplicate a dataset or subdataset (by enqueuing the request for latter processing)",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "dataSetManagement"
        ],
        "summary": "Duplicate a dataset or subdataset (by enqueuing the request for latter processing)",
        "operationId": "Duplicate",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path"
              ],
              "properties": {
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "description": "Possible values are: \"lrz_iRODS\", \"it4i_iRODS\"\n",
                  "type": "string"
                },
                "target_path": {
                  "type": "string"
                },
                "target_system": {
                  "description": "Possible values are: \"lrz_iRODS\", \"it4i_iRODS\"\n",
                  "type": "string"
                },
                "title": {
                  "description": "Title of the new dataset (if not provided, the new title will\nbe \"Copy of \" and the old dataset title).\n",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the duplication has been initiated. Status of the transfer can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/SteeringRequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and duplication can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to duplicate from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path or the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path or the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/duplicate/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of duplication. The status is given as:\n- \"Task still in the queue, or task does not exist\": wait and retry.\n- \"In progress\": wait and retry.\n- \"Task Failed, reason: \u003cspecific reason\u003e\": failure\n- \"Duplication completed\": success; target_path provides the path.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "dataSetManagement"
        ],
        "summary": "Check the status of duplication",
        "operationId": "CheckDuplicationStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                },
                "target_path": {
                  "description": "Single path for staging endpoints",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and duplication can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/encryption/compress": {
      "post": {
        "description": "Compress a dataset or subdataset (by enqueuing the request for latter processing)\nIf you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:\n - For public datasets: \"public/proj\"+hash+\"/\"+internalID\n - For user datasets: \"user/proj\"+hash+\"/\"+user+\"/\"+internalID\n - For project datasets: \"project/proj\"+hash+\"/\"+internalID\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Compress a dataset or subdataset (by enqueuing the request for latter processing)",
        "operationId": "Compress",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path"
              ],
              "properties": {
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the compression has been initiated. Status of the operation can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/SteeringRequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and compression can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to compress is not readable. User doesn't have the correct rights to read the source file.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the source path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/encryption/compress/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of a compression",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Check the status of a compression",
        "operationId": "CheckCompressionStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                },
                "target_path": {
                  "description": "Single path for encryption endpoints",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and compression can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/encryption/compress_encrypt": {
      "post": {
        "description": "Compress and encrypt a dataset or subdataset (by enqueuing the request for latter processing)\nIf you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:\n - For public datasets: \"public/proj\"+hash+\"/\"+internalID\n - For user datasets: \"user/proj\"+hash+\"/\"+user+\"/\"+internalID\n - For project datasets: \"project/proj\"+hash+\"/\"+internalID\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Compress and encrypt a dataset or subdataset (by enqueuing the request for latter processing)",
        "operationId": "CompressEncrypt",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path",
                "project"
              ],
              "properties": {
                "project": {
                  "type": "string"
                },
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the compression and encryption has been initiated. Status of the operation can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/SteeringRequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and compression with encryption can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to compress and encrypt is not readable by the user. User doesn't have the correct rights to read the source file.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the source path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/encryption/compress_encrypt/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of compression with encryption",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Check the status of compression with encryption",
        "operationId": "CheckCompressionEncryptionStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                },
                "target_path": {
                  "description": "Single path for encryption endpoints",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and compression with encryption can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/encryption/decompress": {
      "post": {
        "description": "Decompress a dataset or subdataset (by enqueuing the request for latter processing)\nIf you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:\n - For public datasets: \"public/proj\"+hash+\"/\"+internalID\n - For user datasets: \"user/proj\"+hash+\"/\"+user+\"/\"+internalID\n - For project datasets: \"project/proj\"+hash+\"/\"+internalID\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Decompress a dataset or subdataset (by enqueuing the request for latter processing)",
        "operationId": "Decompress",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path"
              ],
              "properties": {
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the decompression has been initiated. Status of the operation can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/SteeringRequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and decompression can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to compress is not readable by the user. User doesn't have the correct rights to read the source file.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/encryption/decompress/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of a decompression",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Check the status of a decompression",
        "operationId": "CheckDecompressionStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                },
                "target_path": {
                  "description": "Single path for encryption endpoints",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and decompression can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/encryption/decrypt": {
      "post": {
        "description": "Decrypt a dataset or subdataset (by enqueuing the request for latter processing)\nIf you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:\n - For public datasets: \"public/proj\"+hash+\"/\"+internalID\n - For user datasets: \"user/proj\"+hash+\"/\"+user+\"/\"+internalID\n - For project datasets: \"project/proj\"+hash+\"/\"+internalID\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Decrypt a dataset or subdataset (by enqueuing the request for latter processing)",
        "operationId": "Decrypt",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path",
                "project"
              ],
              "properties": {
                "project": {
                  "type": "string"
                },
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the decryption has been initiated. Status of the operation can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/SteeringRequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and decryption can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to decrypt from or to is not readable. User doesn't have the correct rights to read the source file.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the source path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/encryption/decrypt/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of a decryption",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Check the status of a decryption",
        "operationId": "CheckDecryptionStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                },
                "target_path": {
                  "description": "Single path for encryption endpoints",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and decryption can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/encryption/decrypt_decompress": {
      "post": {
        "description": "Decrypt and decompress a dataset or subdataset (by enqueuing the request for latter processing)\nIf you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:\n - For public datasets: \"public/proj\"+hash+\"/\"+internalID\n - For user datasets: \"user/proj\"+hash+\"/\"+user+\"/\"+internalID\n - For project datasets: \"project/proj\"+hash+\"/\"+internalID\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Decrypt and decompress a dataset or subdataset (by enqueuing the request for latter processing)",
        "operationId": "DecryptDecompress",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path",
                "project"
              ],
              "properties": {
                "project": {
                  "type": "string"
                },
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the decryption and decompression has been initiated. Status of the operation can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/SteeringRequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak decryption with decompression can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to decrypt and decompress from or to is not readable or writable by the user. User doesn't have the correct rights to read the source file.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/encryption/decrypt_decompress/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of decryption with decompression",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Check the status of decryption with decompression",
        "operationId": "CheckDecryptionDecompressionStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                },
                "target_path": {
                  "description": "Single path for encryption endpoints",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and decryption with decompression can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/encryption/encrypt": {
      "post": {
        "description": "Encrypt a dataset or subdataset (by enqueuing the request for latter processing)\nIf you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:\n - For public datasets: \"public/proj\"+hash+\"/\"+internalID\n - For user datasets: \"user/proj\"+hash+\"/\"+user+\"/\"+internalID\n - For project datasets: \"project/proj\"+hash+\"/\"+internalID\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Encrypt a dataset or subdataset (by enqueuing the request for latter processing)",
        "operationId": "Encrypt",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path",
                "project"
              ],
              "properties": {
                "project": {
                  "type": "string"
                },
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the encryption has been initiated. Status of the operation can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/SteeringRequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and encryption can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to encrypt from or to is not readable. User doesn't have the correct rights to read the source file.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the source path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the source path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/encryption/encrypt/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of a encryption",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Check the status of a encryption",
        "operationId": "CheckEncryptionStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                },
                "target_path": {
                  "description": "Single path for encryption endpoints",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and encryption can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/gridftp/gridmap": {
      "post": {
        "description": "Add a DN entry to the DDI B2STAGE GridFTP service",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "gridftp"
        ],
        "summary": "Add a DN entry to the DDI B2STAGE GridFTP service",
        "operationId": "AddGridmapEntry",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "dn"
              ],
              "properties": {
                "dn": {
                  "type": "string"
                },
                "user": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "DN added"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Remove a DN entry to the DDI B2STAGE GridFTP service",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "gridftp"
        ],
        "summary": "Remove a DN entry to the DDI B2STAGE GridFTP service",
        "operationId": "RemoveGridmapEntry",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "user": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "DN removed"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/listing": {
      "post": {
        "description": "List file contents of a dataset.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "List file contents of a dataset.",
        "operationId": "Listing",
        "parameters": [
          {
            "description": "parameter",
            "name": "json",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "internalID",
                "access",
                "project"
              ],
              "properties": {
                "access": {
                  "$ref": "#/definitions/AccessMode"
                },
                "internalID": {
                  "type": "string"
                },
                "path": {
                  "description": "path within the dataset, without a starting slash. An empty\nstring pushes to the root of the dataset (i.e. inside the\ndirectory named \u003cinternalID\u003e in the iRODS backend).\n",
                  "type": "string",
                  "default": ""
                },
                "project": {
                  "type": "string"
                },
                "recursive": {
                  "type": "boolean",
                  "default": true
                },
                "zone": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Content of the dataset",
            "schema": {
              "$ref": "#/definitions/DatasetContent"
            }
          },
          "400": {
            "description": "Malformed request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "User does not have permission",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Error accessing backend service",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/pid/assign": {
      "post": {
        "description": "This is called when a user requests PID assignment to a dataset.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "EUDATReplication"
        ],
        "summary": "This is called when a user requests PID assignment to a dataset.",
        "operationId": "PID",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path"
              ],
              "properties": {
                "parent_pid": {
                  "type": "string"
                },
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "This is called when a user requests PID assignment to a dataset.",
            "schema": {
              "$ref": "#/definitions/SteeringRequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path or the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path or the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/pid/{request_id}": {
      "get": {
        "description": "This is called when a user requests to check the status of his data replication",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "EUDATReplication"
        ],
        "summary": "This is called when a user requests to check the status of the PID assignment",
        "operationId": "CheckPIDStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "$ref": "#/definitions/DataReplication"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path or the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path or the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/replicate": {
      "post": {
        "description": "This is called when a user requests data to be replicated between different systems. The request will be added to the jobs queue.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "EUDATReplication"
        ],
        "summary": "This is called when a user requests data to be replicated between different systems. The request will be added to the jobs queue.",
        "operationId": "Replicate",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path",
                "target_system"
              ],
              "properties": {
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "description": "Possible values are: \"lrz_iRODS\", \"it4i_iRODS\"\n",
                  "type": "string"
                },
                "target_path": {
                  "type": "string"
                },
                "target_system": {
                  "description": "Possible values are: \"lrz_iRODS\", \"it4i_iRODS\"\n",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the data transfer has been initiated. Status of the transfer can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/SteeringRequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path or the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path or the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/replicate/{request_id}": {
      "get": {
        "description": "This is called when a user requests to check the status of his data replication",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "EUDATReplication"
        ],
        "summary": "This is called when a user requests to check the status of his data replication",
        "operationId": "CheckReplicateStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "$ref": "#/definitions/DataReplication"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path or the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path or the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/search/metadata": {
      "post": {
        "description": "Search for datasets based on metadata",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Search for datasets based on metadata",
        "operationId": "QueryDatasets",
        "parameters": [
          {
            "description": "metadata relating to dataset which is being searched for",
            "name": "metadataQuery",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatasetMetadataQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata for matching datasets returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DatasetMetadataQueryResponse"
              }
            }
          },
          "400": {
            "description": "Malformed Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "unexpected error connecting to further backends",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Search for datasets based on metadata, and delete them",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Search for datasets based on metadata, and delete them",
        "operationId": "DeleteDatasetByMetadata",
        "parameters": [
          {
            "description": "metadata relating to dataset which is being searched for",
            "name": "metadataQuery",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatasetMetadataQuery"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "datasets were deleted"
          },
          "400": {
            "description": "Malformed Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "The user does not have permission to remove dataset",
            "schema": {
              "type": "object",
              "required": [
                "errorString"
              ],
              "properties": {
                "errorString": {
                  "type": "string"
                },
                "permission_error": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "internalID"
                    ],
                    "properties": {
                      "internalID": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "unexpected error connecting to further backends",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/ssh/sshfsexport": {
      "post": {
        "description": "Export a directory of the DDI for use via SSHFS",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "sshfsexport"
        ],
        "summary": "Export a directory of the DDI for use via SSHFS",
        "operationId": "CreateSSHFSExport",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "host",
                "pubkey",
                "path"
              ],
              "properties": {
                "host": {
                  "type": "string",
                  "example": "141.40.145.102"
                },
                "path": {
                  "type": "string"
                },
                "pubkey": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Export created",
            "schema": {
              "type": "object",
              "required": [
                "user",
                "sshfs"
              ],
              "properties": {
                "sshfs": {
                  "type": "string",
                  "example": "qlecvxbndl@lexis-test.srv.lrz.de:"
                },
                "user": {
                  "type": "string",
                  "example": "qlecvxbndl"
                }
              }
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Remove an SSHFS export of a directory of the DDI",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "sshfsexport"
        ],
        "summary": "Export a directory of the DDI for use via SSHFS",
        "operationId": "DeleteSSHFSExport",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "user",
                "path"
              ],
              "properties": {
                "path": {
                  "type": "string"
                },
                "user": {
                  "type": "string",
                  "example": "qlecvxbndl"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Export removed"
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The resource (username, path or both) does not exist",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "bad gateway (backend service is down)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/staging/delete": {
      "delete": {
        "description": "This is called when a user request to delete data. This is only allowed on the staging systems.\nIf you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:\n - For public datasets: \"public/proj\"+hash+\"/\"+internalID\n - For user datasets: \"user/proj\"+hash+\"/\"+user+\"/\"+internalID\n - For project datasets: \"project/proj\"+hash+\"/\"+internalID\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "dataSetManagement"
        ],
        "summary": "This is called when a user request to delete data. This is only allowed on the staging systems.",
        "operationId": "Delete",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "target_system",
                "target_path"
              ],
              "properties": {
                "target_path": {
                  "description": "Possible values are: lrz_iRODS, lrz_staging_area, lrz_staging_area2,\nlrz_cloud, linux_cluster, superMUC, it4i_iRODS, barbora_lustre,\nsalomon_lustre, barbora_home, salomon_home, it4i_cloud, it4i_staging_area,\nsurf_iRODS, sara_staging_area.\n",
                  "type": "string"
                },
                "target_system": {
                  "description": "Possible values are: lrz_iRODS, lrz_staging_area, lrz_staging_area2,\nlrz_cloud, linux_cluster, superMUC, it4i_iRODS, barbora_lustre,\nsalomon_lustre, barbora_home, salomon_home, it4i_cloud, it4i_staging_area,\nsurf_iRODS, sara_staging_area.\n",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the data deletion has been initiated. Status of the deletion can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/SteeringRequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data deletion can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to delete from or to is not readable or writable by the user. User doesn't have the correct rights to delete the data on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/staging/delete/{request_id}": {
      "get": {
        "security": [],
        "description": "On successful query (200), the status provides information about the result:\n - \"Task still in the queue, or task does not exist\": The request was not yet enqueued. Wait for a few seconds and retry\n - \"Task Failed, reason: \u003cspecific reason\u003e\": The dataset could not be deleted\n - \"Data deleted\": The dataset was deleted successfully\n - \"In progress\": The deletion is in progress, wait a few seconds and retry.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "dataSetManagement"
        ],
        "summary": "Check the status of a delete request",
        "operationId": "CheckDeletionStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string",
                  "example": "Data deleted"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/staging/download": {
      "post": {
        "description": "Download from staging zone\nIf you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:\n - For public datasets: \"public/proj\"+hash+\"/\"+internalID\n - For user datasets: \"user/proj\"+hash+\"/\"+user+\"/\"+internalID\n - For project datasets: \"project/proj\"+hash+\"/\"+internalID\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Download from staging zone",
        "parameters": [
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path"
              ],
              "properties": {
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string",
                  "enum": [
                    "lrz_staging_area"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Malformed Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/staging/info": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "dataSetManagement"
        ],
        "summary": "Lists possible target / source systems",
        "operationId": "StagingInfo",
        "responses": {
          "200": {
            "description": "List of possible target / source",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/dataset/staging/stage": {
      "post": {
        "description": "Stage a dataset or subdataset (by enqueuing the request for latter processing).\nIf you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:\n - For public datasets: \"public/proj\"+hash+\"/\"+internalID\n - For user datasets: \"user/proj\"+hash+\"/\"+user+\"/\"+internalID\n - For project datasets: \"project/proj\"+hash+\"/\"+internalID\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "dataSetManagement"
        ],
        "summary": "Stage a dataset or subdataset (by enqueuing the request for latter processing)",
        "operationId": "Stage",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path",
                "target_system",
                "target_path",
                "encryption",
                "compression"
              ],
              "properties": {
                "compression": {
                  "type": "string",
                  "enum": [
                    "yes",
                    "no"
                  ]
                },
                "encryption": {
                  "type": "string",
                  "enum": [
                    "yes",
                    "no"
                  ]
                },
                "heappe_url": {
                  "type": "string"
                },
                "job_id": {
                  "type": "integer"
                },
                "metadata": {
                  "$ref": "#/definitions/DatasetMetadata"
                },
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "description": "Possible values are: lrz_iRODS, lrz_staging_area, lrz_staging_area2,\nlrz_cloud, linux_cluster, superMUC, it4i_iRODS, barbora_lustre,\nsalomon_lustre, barbora_home, salomon_home, it4i_cloud, it4i_staging_area,\nsurf_iRODS, sara_staging_area.\n",
                  "type": "string"
                },
                "target_path": {
                  "type": "string"
                },
                "target_system": {
                  "description": "Possible values are: lrz_iRODS, lrz_staging_area, lrz_staging_area2,\nlrz_cloud, linux_cluster, superMUC, it4i_iRODS, barbora_lustre,\nsalomon_lustre, barbora_home, salomon_home, it4i_cloud, it4i_staging_area,\nsurf_iRODS, sara_staging_area.\n",
                  "type": "string"
                },
                "task_id": {
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the data transfer has been initiated. Status of the transfer can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/SteeringRequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path or the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path or the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/staging/stage/{request_id}": {
      "get": {
        "security": [],
        "description": "On successful query (200), the status provides information about the result:\n - \"Task still in the queue, or task does not exist\": The request was not yet enqueued. Wait for a few seconds and retry\n - \"Task Failed, reason: \u003cspecific reason\u003e\": The dataset could not be staged\n - \"Transfer completed\": The transfer succeeded, and the data is in the target_path property.\n - \"In progress\": The transfer is in progress, wait a few seconds and retry.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "dataSetManagement"
        ],
        "summary": "Check the status of a transfer",
        "operationId": "CheckStageStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string",
                  "example": "Transfer completed"
                },
                "target_path": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/upload/": {
      "post": {
        "description": "Endpoint for the Creation extension",
        "tags": [
          "dataSetManagement"
        ],
        "summary": "An empty POST request is used to create a new upload resource. The Upload-Length header indicates the size of the entire upload in bytes.",
        "parameters": [
          {
            "type": "integer",
            "description": "Must be 0 for creation extension. May be a positive number for creation-with-upload extension.",
            "name": "Content-Length",
            "in": "header"
          },
          {
            "type": "integer",
            "description": "The Upload-Length request and response header indicates the size of the entire upload in bytes. The value MUST be a non-negative integer. In the concatenation extension, the Client MUST NOT include the Upload-Length header in the final upload creation",
            "name": "Upload-Length",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Added by the Creation extension. The Upload-Metadata request and response header MUST consist of one or more comma-separated key-value pairs. The key and value MUST be separated by a space. The key MUST NOT contain spaces and commas and MUST NOT be empty. The key SHOULD be ASCII encoded and the value MUST be Base64 encoded. All keys MUST be unique. The value MAY be empty. In these cases, the space, which would normally separate the key and the value, MAY be left out. Since metadata can contain arbitrary binary values, Servers SHOULD carefully validate metadata values or sanitize them before using them as header values to avoid header smuggling.",
            "name": "Upload-Metadata",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Added by the Concatenation extension. The Upload-Concat request and response header MUST be set in both partial and final upload creation requests. It indicates whether the upload is either a partial or final upload. If the upload is a partial one, the header value MUST be partial. In the case of a final upload, its value MUST be final followed by a semicolon and a space-separated list of partial upload URLs that will be concatenated. The partial uploads URLs MAY be absolute or relative and MUST NOT contain spaces as defined in RFC 3986.",
            "name": "Upload-Concat",
            "in": "header"
          },
          {
            "enum": [
              1
            ],
            "type": "integer",
            "description": "Added by the creation-defer-length extension. The Upload-Defer-Length request and response header indicates that the size of the upload is not known currently and will be transferred later. Its value MUST be 1. If the length of an upload is not deferred, this header MUST be omitted.",
            "name": "Upload-Defer-Length",
            "in": "header"
          },
          {
            "type": "integer",
            "name": "Upload-offset",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Added by the checksum extension. The Upload-Checksum request header contains information about the checksum of the current body payload. The header MUST consist of the name of the used checksum algorithm and the Base64 encoded checksum separated by a space.",
            "name": "Upload-Checksum",
            "in": "header"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Location, Tus-Resumable, Upload-Offset, Upload-Expires"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Location": {
                "type": "string",
                "description": "Url of the created resource."
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string"
              },
              "Upload-Expires": {
                "type": "string",
                "description": "Added by the Creation With Upload Extension in combination with the expiration extension. The Upload-Expires response header indicates the time after which the unfinished upload expires. A Server MAY wish to remove incomplete uploads after a given period of time to prevent abandoned uploads from taking up extra storage. The Client SHOULD use this header to determine if an upload is still valid before attempting to resume the upload. This header MUST be included in every PATCH response if the upload is going to expire. If the expiration is known at the creation, the Upload-Expires header MUST be included in the response to the initial POST request. Its value MAY change over time. If a Client does attempt to resume an upload which has since been removed by the Server, the Server SHOULD respond with the 404 Not Found or 410 Gone status. The latter one SHOULD be used if the Server is keeping track of expired uploads. In both cases the Client SHOULD start a new upload. The value of the Upload-Expires header MUST be in RFC 7231 datetime format."
              },
              "Upload-Offset": {
                "type": "integer",
                "description": "Added by the Creation With Upload Extension. The Upload-Offset request and response header indicates a byte offset within a resource. The value MUST be a non-negative integer."
              }
            }
          },
          "400": {
            "description": "Added by the Creation With Upload Extension in combination with the checksum extension. The checksum algorithm is not supported by the server",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable, Tus-Version"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string"
              },
              "Tus-Version": {
                "type": "string",
                "description": "The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one."
              }
            }
          },
          "413": {
            "description": "If the length of the upload exceeds the maximum, which MAY be specified using the Tus-Max-Size header, the Server MUST respond with the 413 Request Entity Too Large status.",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string"
              }
            }
          },
          "415": {
            "description": "Added by the Creation With Upload Extension. Content-Type was not application/offset+octet-stream",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "460": {
            "description": "Added by the Creation With Upload Extension in combination with the checksum extension. Checksums mismatch",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "options": {
        "description": "An OPTIONS request MAY be used to gather information about the Server's current configuration. A successful response indicated by the 204 No Content or 200 OK status MUST contain the Tus-Version header. It MAY include the Tus-Extension and Tus-Max-Size headers.",
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Request to gather information about the Server's current configuration",
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Version, Tus-Resumable, Tus-Max-Size, Tus-Extension, Tus-Checksum-Algorithm"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Checksum-Algorithm": {
                "type": "string",
                "description": "Added by the checksum extension. The Tus-Checksum-Algorithm response header MUST be a comma-separated list of the checksum algorithms supported by the server."
              },
              "Tus-Extension": {
                "type": "string",
                "description": "The Tus-Extension response header MUST be a comma-separated list of the extensions supported by the Server. If no extensions are supported, the Tus-Extension header MUST be omitted."
              },
              "Tus-Max-Size": {
                "type": "integer",
                "description": "The Tus-Max-Size response header MUST be a non-negative integer indicating the maximum allowed size of an entire upload in bytes. The Server SHOULD set this header if there is a known hard limit."
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              },
              "Tus-Version": {
                "type": "string",
                "description": "The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one."
              }
            }
          },
          "204": {
            "description": "Success",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Version, Tus-Resumable, Tus-Max-Size, Tus-Extension, Tus-Checksum-Algorithm"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Checksum-Algorithm": {
                "type": "string",
                "description": "Added by the checksum extension. The Tus-Checksum-Algorithm response header MUST be a comma-separated list of the checksum algorithms supported by the server."
              },
              "Tus-Extension": {
                "type": "string",
                "description": "The Tus-Extension response header MUST be a comma-separated list of the extensions supported by the Server. If no extensions are supported, the Tus-Extension header MUST be omitted."
              },
              "Tus-Max-Size": {
                "type": "integer",
                "description": "The Tus-Max-Size response header MUST be a non-negative integer indicating the maximum allowed size of an entire upload in bytes. The Server SHOULD set this header if there is a known hard limit."
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string"
              },
              "Tus-Version": {
                "type": "string",
                "description": "The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one."
              }
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "enum": [
            "1.0.0"
          ],
          "type": "string",
          "description": "Protocol version",
          "name": "Tus-Resumable",
          "in": "header",
          "required": true
        }
      ]
    },
    "/dataset/upload/{id}": {
      "delete": {
        "description": "When receiving a DELETE request for an existing upload the Server SHOULD free associated resources and MUST respond with the 204 No Content status confirming that the upload was terminated. For all future requests to this URL, the Server SHOULD respond with the 404 Not Found or 410 Gone status.",
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Added by the Termination extension.",
        "operationId": "FilesDelete",
        "responses": {
          "204": {
            "description": "Upload was terminated",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable, Tus-Version"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              },
              "Tus-Version": {
                "type": "string",
                "description": "The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one."
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "head": {
        "description": "Used to determine the offset at which the upload should be continued.",
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Used to determine the offset at which the upload should be continued.",
        "operationId": "FilesHead",
        "responses": {
          "200": {
            "description": "Returns offset",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Upload-Offset, Upload-Length, Tus-Resumable"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Cache-Control": {
                "enum": [
                  "no-store"
                ],
                "type": "string"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              },
              "Upload-Length": {
                "type": "integer",
                "description": "If the size of the upload is known, the Server MUST include the Upload-Length header in the response."
              },
              "Upload-Offset": {
                "type": "integer",
                "description": "The Upload-Offset request and response header indicates a byte offset within a resource. The value MUST be a non-negative integer. Offset at which the upload should be continued."
              }
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "If the resource is not found, the Server SHOULD return either the 404 Not Found, 410 Gone or 403 Forbidden status without the Upload-Offset header.",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "404": {
            "description": "If the resource is not found, the Server SHOULD return either the 404 Not Found, 410 Gone or 403 Forbidden status without the Upload-Offset header.",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "410": {
            "description": "If the resource is not found, the Server SHOULD return either the 404 Not Found, 410 Gone or 403 Forbidden status without the Upload-Offset header.",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable, Tus-Version"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              },
              "Tus-Version": {
                "type": "string",
                "description": "The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one."
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "The Server SHOULD accept PATCH requests against any upload URL and apply the bytes contained in the message at the given offset specified by the Upload-Offset header. All PATCH requests MUST use Content-Type: application/offset+octet-stream, otherwise the server SHOULD return a 415 Unsupported Media Type status.",
        "consumes": [
          "application/offset+octet-stream"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Used to resume the upload",
        "operationId": "FilePatch",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "type": "integer",
            "name": "Content-Length",
            "in": "header",
            "required": true
          },
          {
            "type": "integer",
            "description": "The Upload-Offset request and response header indicates a byte offset within a resource. The value MUST be a non-negative integer.",
            "name": "Upload-offset",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Added by the checksum extension. The Upload-Checksum request header contains information about the checksum of the current body payload. The header MUST consist of the name of the used checksum algorithm and the Base64 encoded checksum separated by a space.",
            "name": "Upload-Checksum",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Upload offset was updated",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable, Upload-Offset, Upload-Expires"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              },
              "Upload-Expires": {
                "type": "string",
                "description": "Added by the expiration extension. The Upload-Expires response header indicates the time after which the unfinished upload expires. A Server MAY wish to remove incomplete uploads after a given period of time to prevent abandoned uploads from taking up extra storage. The Client SHOULD use this header to determine if an upload is still valid before attempting to resume the upload. This header MUST be included in every PATCH response if the upload is going to expire. If the expiration is known at the creation, the Upload-Expires header MUST be included in the response to the initial POST request. Its value MAY change over time. If a Client does attempt to resume an upload which has since been removed by the Server, the Server SHOULD respond with the 404 Not Found or 410 Gone status. The latter one SHOULD be used if the Server is keeping track of expired uploads. In both cases the Client SHOULD start a new upload. The value of the Upload-Expires header MUST be in RFC 7231 datetime format."
              },
              "Upload-Offset": {
                "type": "integer",
                "description": "The Upload-Offset request and response header indicates a byte offset within a resource. The value MUST be a non-negative integer."
              }
            }
          },
          "400": {
            "description": "Added by the checksum extension. The checksum algorithm is not supported by the server",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "In the concatenation extension, the Server MUST respond with the 403 Forbidden status to PATCH requests against a final upload URL and MUST NOT modify the final or its partial uploads.",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "404": {
            "description": "PATCH request against a non-existent resource",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "410": {
            "description": "PATCH request against a non-existent resource",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable, Tus-Version"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              },
              "Tus-Version": {
                "type": "string",
                "description": "The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one."
              }
            }
          },
          "415": {
            "description": "Content-Type was not application/offset+octet-stream",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "460": {
            "description": "Added by the checksum extension. Checksums mismatch",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true
        },
        {
          "enum": [
            "1.0.0"
          ],
          "type": "string",
          "description": "Protocol version",
          "name": "Tus-Resumable",
          "in": "header",
          "required": true
        }
      ]
    },
    "/heappe/ClusterInformation/GetCommandTemplateParametersName": {
      "post": {
        "description": "Get command template parameters name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ClusterInformation"
        ],
        "summary": "Get command template parameters name",
        "operationId": "getCommandTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "(OPTIONAL) username to use on HEAppE authz, defaults to the one retrieved via keycloak token",
            "name": "username",
            "in": "query"
          },
          {
            "type": "string",
            "description": "(REQUIRED) HEAppE Endpoint of the HPC Resource",
            "name": "endpoint",
            "in": "query"
          },
          {
            "description": "Get command template parameters name request parameters",
            "name": "request",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/HeappeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/HeappeBadRequest"
            }
          },
          "413": {
            "description": "Client Error",
            "schema": {
              "$ref": "#/definitions/HeappeError"
            }
          },
          "429": {
            "description": "Client Error",
            "schema": {
              "$ref": "#/definitions/HeappeError"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/heappe/ClusterInformation/ListAvailableClusters": {
      "get": {
        "description": "Get available clusters",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ClusterInformation"
        ],
        "summary": "Get available clusters",
        "operationId": "listAvailableClusters",
        "parameters": [
          {
            "type": "string",
            "description": "(REQUIRED) HEAppE Endpoint of the HPC Resource",
            "name": "endpoint",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "list of clusters retruend",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HeappeCluster"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/HeappeBadRequest"
            }
          },
          "413": {
            "description": "Client Error",
            "schema": {
              "$ref": "#/definitions/HeappeError"
            }
          },
          "429": {
            "description": "Client Error",
            "schema": {
              "$ref": "#/definitions/HeappeError"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/hpc/resource": {
      "get": {
        "description": "lists all HPCResources",
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "list HPCResource",
        "operationId": "listHPCResources",
        "parameters": [
          {
            "enum": [
              "ALL",
              "OWN",
              "ALLOWED"
            ],
            "type": "string",
            "default": "ALL",
            "description": "organization scope switch",
            "name": "scope",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "list of HPCResources",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HPCResource"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Creates a new HPCResource",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "create HPCResource",
        "operationId": "createHPCResource",
        "parameters": [
          {
            "description": "HPCResource to be added",
            "name": "HPCResource",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/HPCResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "HPCResource created",
            "schema": {
              "$ref": "#/definitions/ItemCreatedResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "an existing item already exists",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/hpc/resource/{id}": {
      "get": {
        "description": "get HPCResource with given id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "Get specific HPCResource",
        "operationId": "getHPCResource",
        "parameters": [
          {
            "type": "string",
            "description": "Id of HPCResource to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "HPCResource returned",
            "schema": {
              "$ref": "#/definitions/HPCResource"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "HPCResource with not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "description": "Update HPCResource with given id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "Update specific HPCResource",
        "operationId": "updateHPCResource",
        "parameters": [
          {
            "type": "string",
            "description": "Id of HPCResource to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "updated HPCResource data to be added",
            "name": "HPCResource",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HPCResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated HPCResource",
            "schema": {
              "$ref": "#/definitions/HPCResource"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "HPCResource with not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete HPCResource with given id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "Delete specific HPCResource",
        "operationId": "deleteHPCResource",
        "parameters": [
          {
            "type": "string",
            "description": "Id of HPCResource to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "deleted HPCResource",
            "schema": {
              "$ref": "#/definitions/DeletedResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "HPCResource with not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/organization": {
      "get": {
        "description": "lists all organizations",
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "list organizations",
        "operationId": "listOrganizations",
        "parameters": [
          {
            "enum": [
              "ALL",
              "OWN",
              "ALLOWED"
            ],
            "type": "string",
            "default": "OWN",
            "description": "organization scope switch",
            "name": "scope",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "list of organizations",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Organization"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Creates a new organization",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "create Organization",
        "operationId": "createOrganization",
        "parameters": [
          {
            "description": "Organization to be added",
            "name": "organization",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "organization created",
            "schema": {
              "$ref": "#/definitions/ItemCreatedResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "an existing item already exists",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/organization/{id}": {
      "get": {
        "description": "get organization with given organizationId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "Get specific organization",
        "operationId": "getOrganization",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of organization to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "organization returned",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "organization with organizationId not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "description": "Update organization with given organizationId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "Update specific organization",
        "operationId": "updateOrganization",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of organization to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "updated organization data to be added",
            "name": "organization",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated organization",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "organization with organizationId not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete organization with given organizationId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "Delete specific organization",
        "operationId": "deleteOrganization",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of organization to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "deleted organization",
            "schema": {
              "$ref": "#/definitions/DeletedResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "organization with organizationId not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/organization/{id}/user/{userID}": {
      "put": {
        "description": "Adds user to organization",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "Adds user to organization",
        "operationId": "addUserToOrganization",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of organization to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of user to be added",
            "name": "userID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user updated",
            "schema": {
              "$ref": "#/definitions/OKResponse"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "organization with organizationId not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete user from organization",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "Delete user from organization",
        "operationId": "deleteUserFromOrganization",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of organization to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of user to be removed",
            "name": "userID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "deleted user from organization",
            "schema": {
              "$ref": "#/definitions/DeletedResponse"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "organization or user not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/project": {
      "get": {
        "description": "lists all projects",
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "list projects",
        "operationId": "listProjects",
        "parameters": [
          {
            "enum": [
              "ALL",
              "OWN",
              "ALLOWED"
            ],
            "type": "string",
            "default": "ALL",
            "description": "project scope switch",
            "name": "scope",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "list of projectss",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Project"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Creates a new project",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "create Project",
        "operationId": "createProject",
        "parameters": [
          {
            "description": "Project to be added",
            "name": "project",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "project created",
            "schema": {
              "$ref": "#/definitions/ItemCreatedResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "an existing item already exists",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Shortname duplicated",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/project/{id}": {
      "get": {
        "description": "get project with given id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "Get specific project",
        "operationId": "getProject",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of project to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "project returned",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "project with not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "description": "Update project with given id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "Update specific project",
        "operationId": "updateProject",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of project to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "updated project data to be added",
            "name": "project",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated project",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "project with not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Shortname duplicated",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete project with given id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "Delete specific project",
        "operationId": "deleteProject",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of project to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "deleted project",
            "schema": {
              "$ref": "#/definitions/DeletedResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "project with not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/project/{id}/user/{userID}": {
      "put": {
        "description": "Add user to project",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "Add user to project",
        "operationId": "addUserToProject",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of project to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of user to be added",
            "name": "userID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user updated",
            "schema": {
              "$ref": "#/definitions/OKResponse"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "project with not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete user from project",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "Delete user from project",
        "operationId": "deleteUserFromProject",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of project to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of user to be removed",
            "name": "userID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "deleted user from project",
            "schema": {
              "$ref": "#/definitions/DeletedResponse"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "project or user not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "description": "lists all users (tbd - pagination?)",
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "List all users",
        "operationId": "listUsers",
        "parameters": [
          {
            "type": "string",
            "format": "email",
            "description": "email to filter when listing",
            "name": "email",
            "in": "query"
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "project uuid to filter when listing",
            "name": "project",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "users permissions switch",
            "name": "permissions",
            "in": "query"
          },
          {
            "enum": [
              "ALL",
              "OWN",
              "ALLOWED"
            ],
            "type": "string",
            "default": "OWN",
            "description": "organization scope switch",
            "name": "scope",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "list of users returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Creates a new user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "Create a user",
        "operationId": "createUser",
        "parameters": [
          {
            "description": "User to be added",
            "name": "user",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "user created",
            "schema": {
              "$ref": "#/definitions/ItemCreatedResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "an existing item already exists",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "description": "get user with given userId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "Get specific user",
        "operationId": "getUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "keycloak Id of user to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "permissions switch",
            "name": "permissions",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "user returned",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "user not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "description": "Update user with given userId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "Update specific user",
        "operationId": "updateUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of user to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "updated user data to be added",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "user not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete user with given userId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "Delete specific user",
        "operationId": "deleteUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of user to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user deleted successfully",
            "schema": {
              "$ref": "#/definitions/DeletedResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "user not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/workflow": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "workflowManagement"
        ],
        "summary": "Return list of available LEXIS Workflows",
        "operationId": "getWorkflows",
        "responses": {
          "200": {
            "description": "List of available LEXIS Workflows",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Workflow"
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid.",
            "schema": {
              "$ref": "#/definitions/AuthorizationResponse"
            }
          },
          "500": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "If successfull returns a rest response with the id of the created LEXIS workflow in data. If not successful a rest response with an error content is returned.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "workflowManagement"
        ],
        "summary": "Create a new LEXIS Workflow on the system",
        "operationId": "createWorkflow",
        "parameters": [
          {
            "description": "Create LEXIS Workflow request",
            "name": "workflowRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Workflow Created",
            "schema": {
              "$ref": "#/definitions/ItemCreatedResponse"
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/InvalidResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthorizationResponse"
            }
          },
          "409": {
            "description": "Workflow Name already exists",
            "schema": {
              "$ref": "#/definitions/ConflictResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/workflow/template": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "workflowManagement"
        ],
        "summary": "Return list of available Workflow Templates",
        "operationId": "getWorkflowTemplates",
        "responses": {
          "200": {
            "description": "List of available topologies",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WorkflowTemplate"
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid.",
            "schema": {
              "$ref": "#/definitions/AuthorizationResponse"
            }
          },
          "500": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/workflow/template/upload": {
      "post": {
        "description": "If successful returns a rest response with the id of the created LEXIS workflow template. If not successful a rest response with an error content is returned.",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "workflowManagement"
        ],
        "summary": "Create a new LEXIS Workflow Template on the system",
        "operationId": "uploadWorkflowTemplate",
        "parameters": [
          {
            "type": "file",
            "description": "workflowTemplatefile to be loaded.",
            "name": "workflowTemplateFile",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Workflow Template Uploaded Succesful",
            "schema": {
              "$ref": "#/definitions/ItemCreatedResponse"
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/InvalidResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthorizationResponse"
            }
          },
          "409": {
            "description": "Workflow Template Name already exists",
            "schema": {
              "$ref": "#/definitions/ConflictResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/workflow/template/{workflowTemplateId}": {
      "get": {
        "description": "Get the workflow template with the given workflowTemplateId",
        "produces": [
          "application/json"
        ],
        "tags": [
          "workflowManagement"
        ],
        "summary": "Return detailed info on Workflow Template give workflowTemplateID",
        "operationId": "getWorkflowTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "WorkflowTemplateId for LEXIS workflowTemplate to be obtained.",
            "name": "workflowTemplateId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow Template returned",
            "schema": {
              "$ref": "#/definitions/WorkflowTemplate"
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid.",
            "schema": {
              "$ref": "#/definitions/AuthorizationResponse"
            }
          },
          "404": {
            "description": "WorkflowTemplate with WorkflowTemplateId not found.",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/workflow/{workflowId}": {
      "get": {
        "description": "Get the workflow with the given workflowId",
        "produces": [
          "application/json"
        ],
        "tags": [
          "workflowManagement"
        ],
        "summary": "Return detailed info on LEXIS Workflow for given Workflow ID",
        "operationId": "getWorkflow",
        "parameters": [
          {
            "type": "string",
            "description": "WorkflowId for workflow to be obtained.",
            "name": "workflowId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow returned",
            "schema": {
              "$ref": "#/definitions/WorkflowDetail"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthorizationResponse"
            }
          },
          "404": {
            "description": "Workflow with WorkflowId not found.",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete an already existing workflow on the system",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "workflowManagement"
        ],
        "summary": "Delete LEXIS Workflow on the system",
        "operationId": "DeleteWorkflow",
        "parameters": [
          {
            "type": "string",
            "description": "WorkflowID for WorkflowExecution we want to cancel",
            "name": "workflowId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow Deleted",
            "schema": {
              "$ref": "#/definitions/DeletedResponse"
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/InvalidResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthorizationResponse"
            }
          },
          "404": {
            "description": "Workflow with WorkflowId not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "409": {
            "description": "Workflow does not exist",
            "schema": {
              "$ref": "#/definitions/ConflictResponse"
            }
          },
          "422": {
            "description": "Workflow currently running in LEXIS WorkflowExecution."
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/workflow/{workflowId}/execution": {
      "get": {
        "description": "List the current available LEXIS Workflow Executions for the given user.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "workflowManagement"
        ],
        "summary": "List the current available LEXIS Workflow Executions.",
        "operationId": "listWorkflowExecutions",
        "parameters": [
          {
            "type": "string",
            "description": "WorkflowId for workflowExecutions we want",
            "name": "workflowId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Number of Lexis Workflow Executions we want to return",
            "name": "reqSize",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "List of available LEXIS Workflow Executions",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WorkflowExecution"
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid.",
            "schema": {
              "$ref": "#/definitions/AuthorizationResponse"
            }
          },
          "404": {
            "description": "List Worklow Executions reuired dependencies not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Creates a LEXIS workflow execution from a LEXIS workflow.\nThe name of the resulting workflow execution will be of the form ` + "`" + `n-[projectShortName]` + "`" + ` where ` + "`" + `n` + "`" + ` is the index of the workflow execution withing it's workflow.\nThe workflow execution name takes on the suffix ` + "`" + `_cron` + "`" + ` or ` + "`" + `_scheduled` + "`" + ` where it is a cron or scheduled job according to the request parameters.\nFor example, the workflow execution ` + "`" + `2-dummyprj_cron` + "`" + ` is the third workflow execution from it's workflow under the project ` + "`" + `dummyprj` + "`" + ` and it is a cron job.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "workflowManagement"
        ],
        "summary": "TODO: Needs implemented with TOSCA 1.3 Capabilitise. Create a new LEXIS Workflow Execution by providing remaining inputs",
        "operationId": "createWorkflowExecution",
        "parameters": [
          {
            "type": "string",
            "description": "WorkflowId for WorkflowExecution to be created.",
            "name": "workflowId",
            "in": "path",
            "required": true
          },
          {
            "description": "Create LEXIS Workflow Execution request",
            "name": "workflowExecutionRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateWorkflowExecutionRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "LEXIS WorkflowExecution created and Input upload succesful",
            "schema": {
              "$ref": "#/definitions/ItemCreatedResponse"
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/InvalidResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthorizationResponse"
            }
          },
          "404": {
            "description": "Required dependencies for WorkflowExecution creation not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "409": {
            "description": "LEXIS WorkflowExecution already exists (a4cApplication already deployed).",
            "schema": {
              "$ref": "#/definitions/ConflictResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/workflow/{workflowId}/execution/{workflowExecutionId}": {
      "get": {
        "description": "Return current LEXIS Workflow Execution detail",
        "produces": [
          "application/json"
        ],
        "tags": [
          "workflowManagement"
        ],
        "summary": "Returns LEXIS Workflow Execution detail.",
        "operationId": "getWorkflowExecutionDetail",
        "parameters": [
          {
            "type": "string",
            "description": "workflowID for LEXIS Workflow Execution required",
            "name": "workflowId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "workflowExecutionId for LEXIS Workflow Execution required",
            "name": "workflowExecutionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow Execution Detail",
            "schema": {
              "$ref": "#/definitions/WorkflowExecutionDetail"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthorizationResponse"
            }
          },
          "404": {
            "description": "The application provided does not exist.",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Cancels given LEXIS Workflow Execution.",
        "tags": [
          "workflowManagement"
        ],
        "summary": "Cancel a LEXIS Workflow Execution.",
        "operationId": "cancelWorkflowExecution",
        "parameters": [
          {
            "type": "string",
            "description": "workflowID for LEXIS Workflow Execution to be canceled",
            "name": "workflowId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "WorkflowExecutionID for WorkflowExecution to be deleted",
            "name": "workflowExecutionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "LEXIS WorkflowExecution deletion",
            "schema": {
              "$ref": "#/definitions/DeletedResponse"
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/InvalidResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthorizationResponse"
            }
          },
          "404": {
            "description": "LEXIS WorkflowExecution does not exist",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/workflow/{workflowId}/execution/{workflowExecutionId}/logs": {
      "get": {
        "description": "Return logs on given LEXIS Workflow Execution",
        "produces": [
          "application/json"
        ],
        "tags": [
          "workflowManagement"
        ],
        "summary": "Returns detailed logs of LEXIS Workflow Execution",
        "operationId": "getWorkflowExecutionLogs",
        "parameters": [
          {
            "type": "string",
            "description": "workflowID for LEXIS Workflow Execution logs required",
            "name": "workflowId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "workflowExecutionId for LEXIS Workflow Execution logs required",
            "name": "workflowExecutionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Logs of given LEXIS WorkflowExecution",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Logs"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthorizationResponse"
            }
          },
          "404": {
            "description": "The WorkflowExecutionID provided does not exist.",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/workflow/{workflowId}/execution/{workflowExecutionId}/remove": {
      "post": {
        "description": "Removes given LEXIS Workflow Execution.",
        "tags": [
          "workflowManagement"
        ],
        "summary": "Delete a LEXIS Workflow Execution.",
        "operationId": "deleteWorkflowExecution",
        "parameters": [
          {
            "type": "string",
            "description": "workflowID for LEXIS Workflow Execution to be removed",
            "name": "workflowId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "WorkflowExecutionID for WorkflowExecution to be removed",
            "name": "workflowExecutionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "LEXIS WorkflowExecution succesfully deleted",
            "schema": {
              "$ref": "#/definitions/DeletedResponse"
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/InvalidResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthorizationResponse"
            }
          },
          "404": {
            "description": "LEXIS WorkflowExecution does not exist",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/workflow/{workflowId}/execution/{workflowExecutionId}/status": {
      "get": {
        "description": "Return Task Status' on given LEXIS Workflow Execution",
        "produces": [
          "application/json"
        ],
        "tags": [
          "workflowManagement"
        ],
        "summary": "Returns detailed status of Lexis Workflow Execution and its tasks.",
        "operationId": "getWorkflowExecutionStepStatus",
        "parameters": [
          {
            "type": "string",
            "description": "workflowID for LEXIS Workflow Execution status required",
            "name": "workflowId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "workflowExecutionId for LEXIS Workflow Execution status required",
            "name": "workflowExecutionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Status of given LEXIS WorkflowExecution",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WorkflowExecutionStepStatus"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthorizationResponse"
            }
          },
          "404": {
            "description": "The WorkflowExecutionID provided does not exist.",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/workflow/{workflowId}/executions": {
      "post": {
        "description": "Create a batch of LEXIS WorkflowExecutions from a LEXIS Workflow given an array of WorkflowExecution parameters",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "workflowManagement"
        ],
        "summary": "Create a batch of LEXIS Workflow Executions from a LEXIS Workflow",
        "operationId": "createWorkflowExecutions",
        "parameters": [
          {
            "type": "string",
            "description": "WorkflowId for WorkflowExecution to be created.",
            "name": "workflowId",
            "in": "path",
            "required": true
          },
          {
            "description": "Create LEXIS Workflow Execution requests",
            "name": "workflowExecutionRequests",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CreateWorkflowExecutionRequest"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "LEXIS WorkflowExecution created and Input upload successfull",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ItemCreatedResponse"
              }
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/InvalidResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthorizationResponse"
            }
          },
          "404": {
            "description": "Required dependencies for WorkflowExecution creation not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "409": {
            "description": "LEXIS WorkflowExecution already exists (a4cApplication already deployed).",
            "schema": {
              "$ref": "#/definitions/ConflictResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AccessMode": {
      "type": "string",
      "enum": [
        "public",
        "project",
        "user"
      ]
    },
    "ApprovalSystemApprovedResourceRequest": {
      "type": "object",
      "required": [
        "AssociatedLEXISProject",
        "AssociatedLEXISProjectName",
        "ProjectContactEmail",
        "PrimaryInvestigator",
        "TermsConsent",
        "AssociatedHPCProject"
      ],
      "properties": {
        "ApprovalObjections": {
          "type": "string",
          "example": "Some example objection."
        },
        "ApprovalStatus": {
          "type": "string",
          "enum": [
            "PENDING",
            "ACCEPTED",
            "REJECTED"
          ],
          "example": "ACCEPTED"
        },
        "AssociatedHPCProject": {
          "type": "string",
          "example": "DD-20-37"
        },
        "AssociatedLEXISProject": {
          "type": "string",
          "format": "uuid",
          "example": "b65ef55a-970d-4f5d-9372-5928fef770a1"
        },
        "AssociatedLEXISProjectName": {
          "type": "string",
          "example": "LEXIS Example Project"
        },
        "CloudNetworkName": {
          "type": "string",
          "format": "uri",
          "example": "https://cloud.networkname.example"
        },
        "HEAppEEndpoint": {
          "type": "string",
          "format": "uri",
          "example": "https://heappe.it4i.cz/lexis/swagger/index.html"
        },
        "HPCProvider": {
          "type": "string",
          "enum": [
            "IT4I",
            "LRZ",
            "ICHEC"
          ],
          "example": "LRZ"
        },
        "HPCResourceID": {
          "type": "string",
          "example": "DD-20-37-1"
        },
        "OpenStackEndpoint": {
          "type": "string",
          "format": "uri",
          "example": "https://openstack.msad.it4i.lexis.tech/"
        },
        "PrimaryInvestigator": {
          "type": "string",
          "format": "email",
          "example": "pi@example.cz"
        },
        "ProjectContactEmail": {
          "type": "string",
          "format": "email"
        },
        "ResourceType": {
          "type": "string",
          "example": "CLOUD"
        },
        "TermsConsent": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "ApprovalSystemCreatedResponse": {
      "type": "object",
      "properties": {
        "HPCResourceID": {
          "type": "string"
        }
      }
    },
    "ApprovalSystemErrorResponse": {
      "type": "object",
      "required": [
        "errorString"
      ],
      "properties": {
        "errorString": {
          "type": "string"
        }
      }
    },
    "ApprovalSystemInvalidResponse": {
      "type": "object",
      "properties": {
        "errorString": {
          "type": "string"
        }
      }
    },
    "ApprovalSystemMissingResponse": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        },
        "errorString": {
          "type": "string"
        }
      }
    },
    "ApprovalSystemQueue": {
      "type": "object",
      "properties": {
        "CoresPerNode": {
          "type": "integer",
          "default": 0,
          "x-nullable": true
        },
        "Description": {
          "type": "string"
        },
        "ID": {
          "type": "integer",
          "default": 0,
          "x-nullable": true
        },
        "MaxWallTime": {
          "type": "integer",
          "default": 0,
          "x-nullable": true
        },
        "Name": {
          "type": "string"
        },
        "NumberOfNodes": {
          "type": "integer",
          "default": 0,
          "x-nullable": true
        },
        "Type": {
          "type": "string"
        }
      }
    },
    "ApprovalSystemResource": {
      "type": "object",
      "properties": {
        "HostName": {
          "type": "string"
        },
        "ID": {
          "type": "integer",
          "default": 0,
          "x-nullable": true
        },
        "Name": {
          "type": "string"
        },
        "PerformanceCoefficient": {
          "type": "number",
          "format": "double",
          "default": 0,
          "x-nullable": true
        },
        "QueueList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApprovalSystemQueue"
          }
        }
      }
    },
    "ApprovalSystemResourceRequest": {
      "type": "object",
      "required": [
        "AssociatedLEXISProject",
        "AssociatedLEXISProjectName",
        "ProjectContactEmail",
        "PrimaryInvestigator",
        "TermsConsent",
        "Budget",
        "CoreHoursExpected",
        "DateEnd",
        "DateStart"
      ],
      "properties": {
        "ApprovalObjections": {
          "type": "string",
          "example": "Some example objection."
        },
        "ApprovalStatus": {
          "enum": [
            "PENDING",
            "ACCEPTED",
            "REJECTED"
          ],
          "example": "PENDING"
        },
        "AssociatedHPCProject": {
          "type": "string",
          "example": "DD-20-37"
        },
        "AssociatedLEXISProject": {
          "type": "string",
          "format": "uuid",
          "example": "b65ef55a-970d-4f5d-9372-5928fef770a1"
        },
        "AssociatedLEXISProjectName": {
          "type": "string",
          "example": "LEXIS Example Project"
        },
        "Budget": {
          "type": "number",
          "format": "double",
          "default": 0,
          "example": 100
        },
        "CloudNetworkName": {
          "type": "string",
          "format": "uri",
          "example": "https://cloud.networkname.example"
        },
        "CoreHoursExpected": {
          "type": "number",
          "format": "double",
          "default": 0,
          "example": 1000
        },
        "DateEnd": {
          "type": "string",
          "format": "date-time",
          "example": "2022-08-30T17:32:28Z"
        },
        "DateStart": {
          "type": "string",
          "format": "date-time",
          "example": "2022-07-21T17:32:28Z"
        },
        "HEAppEEndpoint": {
          "type": "string",
          "format": "uri",
          "example": "https://heappe.it4i.cz/lexis/swagger/index.html"
        },
        "HPCProvider": {
          "type": "string",
          "enum": [
            "IT4I",
            "LRZ",
            "ICHEC"
          ],
          "example": "LRZ"
        },
        "HPCResourceID": {
          "type": "string",
          "example": "DD-20-37-1"
        },
        "OpenStackEndpoint": {
          "type": "string",
          "format": "uri",
          "example": "https://openstack.msad.it4i.lexis.tech/"
        },
        "PrimaryInvestigator": {
          "type": "string",
          "format": "email",
          "example": "pi@example.cz"
        },
        "ProjectContactEmail": {
          "type": "string",
          "format": "email",
          "example": "project.contact@example.cz"
        },
        "ResourceType": {
          "type": "string",
          "example": "CLOUD"
        },
        "Resources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApprovalSystemResourceRequestItem"
          }
        },
        "TermsConsent": {
          "type": "boolean"
        }
      }
    },
    "ApprovalSystemResourceRequestItem": {
      "type": "object",
      "properties": {
        "ClusterID": {
          "type": "integer",
          "default": 0,
          "x-nullable": true
        },
        "ClusterName": {
          "type": "string"
        },
        "QueueID": {
          "type": "integer",
          "default": 0,
          "x-nullable": true
        },
        "QueueName": {
          "type": "string"
        }
      }
    },
    "ArchiveType": {
      "type": "string",
      "enum": [
        "zip",
        "file"
      ]
    },
    "AuthorizationResponse": {
      "type": "object",
      "properties": {
        "Message": {
          "type": "string"
        }
      }
    },
    "CompressMethod": {
      "type": "string",
      "enum": [
        "zip",
        "file"
      ]
    },
    "ConflictResponse": {
      "type": "object",
      "properties": {
        "Message": {
          "type": "string"
        }
      }
    },
    "CreateWorkflowExecutionRequest": {
      "type": "object",
      "properties": {
        "inputFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputFile"
          }
        },
        "inputParameters": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "isBatchJob": {
          "type": "boolean"
        },
        "isCronJob": {
          "type": "boolean"
        },
        "isScheduledJob": {
          "type": "boolean"
        },
        "workflowTemplateID": {
          "type": "string"
        }
      }
    },
    "CreditHistory": {
      "type": "object",
      "properties": {
        "AccountID": {
          "type": "string"
        },
        "Events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Event"
          }
        }
      }
    },
    "CreditStatus": {
      "type": "object",
      "properties": {
        "AccountID": {
          "type": "string"
        },
        "AvailableCash": {
          "type": "number",
          "format": "double"
        },
        "AvailableCredit": {
          "type": "number",
          "format": "double"
        },
        "LastUpdate": {
          "type": "string",
          "format": "datetime"
        }
      }
    },
    "DataReplication": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "PID": {
          "description": "EUDAT PID of the replicated data",
          "type": "string",
          "example": "1001/e4495e44-dc84-11ea-9c37-0050568f81d2"
        },
        "status": {
          "description": "Status of the data replication process",
          "type": "string",
          "example": "Replication completed"
        },
        "target_path": {
          "description": "Path to where the data are replicated",
          "type": "string",
          "example": "/IT4ILexisZone/project/proj1fc54ae5e387be0d369eddddc2010e5e/datasetL4988"
        }
      }
    },
    "DataSize": {
      "type": "object",
      "required": [
        "result"
      ],
      "properties": {
        "result": {
          "description": "Status of the datasize get process",
          "type": "string",
          "example": "Done"
        },
        "size": {
          "description": "dataset size",
          "type": "string",
          "example": "45645352354"
        },
        "smallfiles": {
          "description": "dataset files smaller than 32 MB",
          "type": "string",
          "example": "2"
        },
        "totalfiles": {
          "description": "dataset files",
          "type": "string",
          "example": "343"
        }
      }
    },
    "DatasetContent": {
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "checksum": {
          "type": "string"
        },
        "contents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DatasetContent"
          }
        },
        "create_time": {
          "type": "string"
        },
        "name": {
          "description": "filename",
          "type": "string"
        },
        "size": {
          "type": "integer"
        },
        "type": {
          "description": "directory or file",
          "type": "string"
        }
      }
    },
    "DatasetFlags": {
      "type": "object",
      "properties": {
        "compression": {
          "type": "string"
        },
        "encryption": {
          "type": "string"
        }
      }
    },
    "DatasetItemCreatedResponse": {
      "type": "object",
      "required": [
        "status",
        "internalID"
      ],
      "properties": {
        "internalID": {
          "type": "string"
        },
        "status": {
          "description": "HTTP status code",
          "type": "string",
          "pattern": "[0-9][0-9][0-9]",
          "example": "201"
        }
      }
    },
    "DatasetMetadata": {
      "type": "object",
      "properties": {
        "AlternateIdentifier": {
          "description": "DataCite AlternateIdentifier",
          "type": "array",
          "items": {
            "description": "Pairs [AlternateIdentifierType, AlternateIdentifier]",
            "type": "array",
            "maxItems": 2,
            "minItems": 2,
            "items": {
              "type": "string"
            }
          }
        },
        "CreationDate": {
          "type": "string"
        },
        "CustomMetadata": {
          "type": "object"
        },
        "CustomMetadataSchema": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "Description": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributor": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creator": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "format": {
          "type": "string"
        },
        "identifier": {
          "description": "Datacite identifier (doi), unused for now",
          "type": "string"
        },
        "owner": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "publicationYear": {
          "type": "string"
        },
        "publisher": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "relatedIdentifier": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "relatedSoftware": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resourceType": {
          "type": "string"
        },
        "resourceTypeGeneral": {
          "type": "string",
          "enum": [
            "Audiovisual",
            "Collection",
            "DataPaper",
            "Dataset",
            "Event",
            "Image",
            "InteractiveResource",
            "Model",
            "PhysicalObject",
            "Service",
            "Software",
            "Sound",
            "Text",
            "Workflow",
            "Other"
          ]
        },
        "rights": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rightsIdentifier": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rightsURI": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "scope": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "DatasetMetadataQuery": {
      "type": "object",
      "properties": {
        "AlternateIdentifier": {
          "description": "DataCite AlternateIdentifier",
          "type": "string"
        },
        "AlternateIdentifierType": {
          "description": "DataCite AlternateIdentifierType. Size must match AlternateIdentifier",
          "type": "string"
        },
        "CreationDate": {
          "type": "string"
        },
        "CustomMetadata": {
          "type": "object"
        },
        "Description": {
          "type": "string"
        },
        "EUDAT/FIO": {
          "type": "string"
        },
        "EUDAT/FIXED_CONTENT": {
          "type": "string"
        },
        "EUDAT/PARENT": {
          "type": "string"
        },
        "EUDAT/REPLICA": {
          "type": "string"
        },
        "EUDAT/ROR": {
          "type": "string"
        },
        "PID": {
          "type": "string"
        },
        "access": {
          "$ref": "#/definitions/AccessMode"
        },
        "contributor": {
          "type": "string"
        },
        "creator": {
          "type": "string"
        },
        "format": {
          "type": "string"
        },
        "identifier": {
          "description": "DataCite identifier (DOI), unused for now",
          "type": "string"
        },
        "internalID": {
          "description": "iRODS identifier",
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "publicationYear": {
          "type": "string"
        },
        "publisher": {
          "type": "string"
        },
        "relatedIdentifier": {
          "type": "string"
        },
        "relatedSoftware": {
          "type": "string"
        },
        "resourceType": {
          "type": "string"
        },
        "resourceTypeGeneral": {
          "type": "string"
        },
        "rights": {
          "type": "string"
        },
        "rightsIdentifier": {
          "type": "string"
        },
        "rightsURI": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "DatasetMetadataQueryResponse": {
      "type": "object",
      "required": [
        "location",
        "metadata",
        "flags"
      ],
      "properties": {
        "eudat": {
          "$ref": "#/definitions/Eudat"
        },
        "flags": {
          "$ref": "#/definitions/DatasetFlags"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "metadata": {
          "$ref": "#/definitions/DatasetMetadata"
        }
      }
    },
    "DeletedResponse": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        },
        "Message": {
          "type": "string"
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "required": [
        "errorString"
      ],
      "properties": {
        "errorString": {
          "type": "string"
        }
      }
    },
    "Eudat": {
      "type": "object",
      "properties": {
        "EUDAT/FIO": {
          "type": "string"
        },
        "EUDAT/FIXED_CONTENT": {
          "type": "string"
        },
        "EUDAT/PARENT": {
          "type": "string"
        },
        "EUDAT/REPLICA": {
          "type": "string"
        },
        "EUDAT/ROR": {
          "type": "string"
        },
        "PID": {
          "type": "string"
        }
      }
    },
    "Event": {
      "type": "object",
      "properties": {
        "AuthorizedBy": {
          "type": "string"
        },
        "Delta": {
          "type": "number",
          "format": "double"
        },
        "EventType": {
          "type": "string",
          "default": "Consumption",
          "enum": [
            "AuthorizedIncrease",
            "AuthorizedDecrease",
            "Consumption",
            "AutomaticCreditExpiry",
            "Refund"
          ]
        },
        "Medium": {
          "type": "string",
          "default": "CREDIT",
          "enum": [
            "CREDIT",
            "CASH"
          ]
        },
        "Timestamp": {
          "type": "string",
          "format": "datetime"
        }
      }
    },
    "HPCResource": {
      "type": "object",
      "properties": {
        "ApprovalStatus": {
          "type": "string",
          "enum": [
            "ACCEPTED",
            "REJECTED",
            "PENDING"
          ]
        },
        "AssociatedHPCProject": {
          "type": "string"
        },
        "AssociatedLEXISProject": {
          "type": "string",
          "format": "uuid"
        },
        "CloudNetworkName": {
          "type": "string"
        },
        "HEAppEEndpoint": {
          "type": "string"
        },
        "HPCProvider": {
          "type": "string",
          "enum": [
            "IT4I",
            "LRZ",
            "ICHEC"
          ]
        },
        "HPCResourceID": {
          "type": "string"
        },
        "OpenStackEndpoint": {
          "type": "string"
        },
        "OpenStackProjectID": {
          "type": "string"
        },
        "ProjectNetworkName": {
          "type": "string"
        },
        "ResourceType": {
          "type": "string",
          "enum": [
            "CLOUD",
            "HPC",
            "SMARTGW"
          ]
        },
        "TermsConsent": {
          "type": "boolean"
        }
      }
    },
    "HPCUsage": {
      "type": "object",
      "properties": {
        "AccountingData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Metadata"
          }
        },
        "HPCProjectID": {
          "type": "string"
        },
        "HPCProjectName": {
          "type": "string"
        }
      }
    },
    "HeappeBadRequest": {
      "type": "object",
      "properties": {
        "StatusCode": {
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        }
      }
    },
    "HeappeCluster": {
      "type": "object",
      "properties": {
        "Description": {
          "type": "string",
          "x-nullable": true
        },
        "ID": {
          "type": "integer",
          "format": "int64",
          "x-nullable": true
        },
        "Name": {
          "type": "string",
          "x-nullable": true
        },
        "NodeTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HeappeNodeType"
          },
          "x-nullable": true
        }
      }
    },
    "HeappeCommandTemplate": {
      "type": "object",
      "properties": {
        "Code": {
          "type": "string",
          "x-nullable": true
        },
        "Description": {
          "type": "string",
          "x-nullable": true
        },
        "ID": {
          "type": "integer",
          "format": "int64",
          "x-nullable": true
        },
        "Name": {
          "type": "string",
          "x-nullable": true
        },
        "TemplateParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HeappeTemplateParameter"
          },
          "x-nullable": true
        }
      }
    },
    "HeappeError": {
      "type": "object",
      "properties": {
        "detail": {
          "type": "string",
          "x-nullable": true
        },
        "instance": {
          "type": "string",
          "x-nullable": true
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        },
        "title": {
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "HeappeNodeType": {
      "type": "object",
      "properties": {
        "CommandTemplates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HeappeCommandTemplate"
          },
          "x-nullable": true
        },
        "CoresPerNode": {
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        },
        "Description": {
          "type": "string",
          "x-nullable": true
        },
        "ID": {
          "type": "integer",
          "format": "int64",
          "x-nullable": true
        },
        "MaxWallTime": {
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        },
        "Name": {
          "type": "string",
          "x-nullable": true
        },
        "NumberOfNodes": {
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        }
      }
    },
    "HeappeRequest": {
      "type": "object",
      "properties": {
        "CommandTemplateID": {
          "type": "integer",
          "format": "int64"
        },
        "SessionCode": {
          "type": "string",
          "x-nullable": true
        },
        "UserScriptPath": {
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "HeappeTemplateParameter": {
      "type": "object",
      "properties": {
        "Description": {
          "type": "string",
          "x-nullable": true
        },
        "Identifier": {
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "InputFile": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "inputFileName": {
          "type": "string"
        },
        "inputFileType": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "InputParameter": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "inputParamDefaultValue": {
          "type": "string"
        },
        "inputParamName": {
          "type": "string"
        },
        "inputParamRequired": {
          "type": "boolean"
        },
        "inputParamType": {
          "type": "string"
        },
        "inputParamValue": {
          "type": "object"
        },
        "isDataset": {
          "type": "boolean"
        },
        "isDatasetId": {
          "type": "boolean"
        },
        "isDatasetPath": {
          "type": "boolean"
        },
        "task": {
          "type": "string"
        }
      }
    },
    "InvalidResponse": {
      "type": "object",
      "properties": {
        "Message": {
          "type": "string"
        }
      }
    },
    "ItemCreatedResponse": {
      "type": "object",
      "required": [
        "Link"
      ],
      "properties": {
        "ID": {
          "type": "string"
        },
        "Link": {
          "type": "string"
        }
      }
    },
    "Location": {
      "type": "object",
      "required": [
        "access",
        "project",
        "internalID",
        "zone"
      ],
      "properties": {
        "access": {
          "$ref": "#/definitions/AccessMode"
        },
        "internalID": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "zone": {
          "type": "string",
          "example": "LRZLexisZone"
        }
      }
    },
    "Logs": {
      "type": "object",
      "properties": {
        "content": {
          "description": "Content of log message",
          "type": "string"
        },
        "deploymentID": {
          "description": "Deployment ID",
          "type": "string"
        },
        "deploymentPaaSID": {
          "description": "deployment PaaS ID",
          "type": "string"
        },
        "executionID": {
          "description": "execution ID",
          "type": "string"
        },
        "instanceID": {
          "description": "Instance ID",
          "type": "string"
        },
        "interfaceName": {
          "description": "Interface Name",
          "type": "string"
        },
        "level": {
          "description": "Level",
          "type": "string"
        },
        "nodeID": {
          "description": "Node ID",
          "type": "string"
        },
        "operationName": {
          "description": "Operation Name",
          "type": "string"
        },
        "timestamp": {
          "description": "Timestamp of log",
          "type": "string"
        },
        "workflowExecutionStage": {
          "description": "WorkflowExecution Stage",
          "type": "string"
        }
      }
    },
    "Metadata": {
      "type": "object",
      "x-go-type": {
        "import": {
          "package": "gitlab.com/cyclops-utilities/datamodels"
        },
        "type": "JSONdb"
      }
    },
    "MissingResponse": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        },
        "Message": {
          "type": "string"
        }
      }
    },
    "NodeTemplate": {
      "type": "object",
      "properties": {
        "nodeName": {
          "type": "string"
        },
        "nodeType": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        }
      }
    },
    "OKResponse": {
      "type": "object",
      "properties": {
        "Message": {
          "type": "string"
        }
      }
    },
    "Organization": {
      "type": "object",
      "properties": {
        "CreatedBy": {
          "type": "string",
          "format": "uuid"
        },
        "CreationDate": {
          "type": "string",
          "format": "date-time"
        },
        "FormalName": {
          "type": "string"
        },
        "ID": {
          "type": "string",
          "format": "uuid"
        },
        "OrganizationEmailAddress": {
          "type": "string",
          "format": "email"
        },
        "OrganizationStatus": {
          "type": "string",
          "enum": [
            "PENDING_APPROVAL",
            "APPROVED",
            "DISABLED",
            "TERMINATED"
          ]
        },
        "PrimaryTelephoneNumber": {
          "type": "string",
          "format": "telephone-number"
        },
        "RegisteredAddress1": {
          "type": "string"
        },
        "RegisteredAddress2": {
          "type": "string"
        },
        "RegisteredAddress3": {
          "type": "string"
        },
        "RegisteredCountry": {
          "type": "string",
          "format": "country"
        },
        "VATRegistrationNumber": {
          "type": "string"
        },
        "Website": {
          "type": "string",
          "format": "url"
        }
      }
    },
    "OutputProperty": {
      "type": "object",
      "properties": {
        "attributeName": {
          "type": "string"
        },
        "attributeValue": {
          "type": "string"
        },
        "nodeName": {
          "type": "string"
        }
      }
    },
    "Project": {
      "type": "object",
      "properties": {
        "AllowedOrganizations": {
          "$ref": "#/definitions/StringArray"
        },
        "LinkedOrganization": {
          "type": "string",
          "format": "uuid"
        },
        "NormCoreHours": {
          "type": "integer",
          "default": 0,
          "x-nullable": true
        },
        "ProjectContactEmail": {
          "type": "string",
          "format": "email"
        },
        "ProjectContactPerson": {
          "type": "string",
          "format": "uuid"
        },
        "ProjectCreatedBy": {
          "type": "string",
          "format": "uuid"
        },
        "ProjectCreationTime": {
          "type": "string",
          "format": "date-time"
        },
        "ProjectDescription": {
          "type": "string"
        },
        "ProjectDomain": {
          "type": "string"
        },
        "ProjectID": {
          "type": "string",
          "format": "uuid"
        },
        "ProjectMaxPrice": {
          "type": "number",
          "format": "double",
          "default": 0,
          "x-nullable": true
        },
        "ProjectName": {
          "type": "string"
        },
        "ProjectShortName": {
          "type": "string"
        },
        "ProjectStartDate": {
          "type": "string",
          "format": "date-time"
        },
        "ProjectStatus": {
          "type": "string",
          "enum": [
            "PENDING",
            "ACTIVE",
            "DISABLED",
            "TERMINATED"
          ]
        },
        "ProjectTerminationDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "PushMethod": {
      "type": "string",
      "enum": [
        "empty",
        "directupload",
        "tus"
      ]
    },
    "SteeringRequestID": {
      "type": "object",
      "required": [
        "request_id"
      ],
      "properties": {
        "request_id": {
          "description": "UUID",
          "type": "string",
          "format": "uuid",
          "example": "31279ed6-e7b1-4c9f-ab26-206c863a2264"
        }
      }
    },
    "StringArray": {
      "x-go-type": {
        "import": {
          "package": "github.com/lib/pq"
        },
        "type": "StringArray"
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "Usage": {
      "type": "object",
      "properties": {
        "HPCProjects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HPCUsage"
          }
        },
        "ProjectID": {
          "type": "string",
          "format": "uuid"
        },
        "ProjectName": {
          "type": "string"
        },
        "TimeFrom": {
          "type": "string",
          "format": "datetime"
        },
        "TimeTo": {
          "type": "string",
          "format": "datetime"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "AgreeToUseOfCookies": {
          "type": "boolean"
        },
        "AgreedToTermsOfUse": {
          "type": "boolean"
        },
        "AllowedOrganizations": {
          "$ref": "#/definitions/StringArray"
        },
        "DateOfAgreementToTermsOfUse": {
          "type": "string",
          "format": "date-time"
        },
        "DateOfAgreementToUseOfCookies": {
          "type": "string",
          "format": "date-time"
        },
        "EmailAddress": {
          "type": "string",
          "format": "email"
        },
        "FirstName": {
          "type": "string"
        },
        "ID": {
          "description": "This is an id generated by keycloak",
          "type": "string",
          "format": "uuid"
        },
        "LastName": {
          "type": "string"
        },
        "OrganizationID": {
          "type": "string",
          "format": "uuid"
        },
        "PGPKeyID": {
          "description": "This is an id for a PGP Key - what it means is still tbd",
          "type": "string"
        },
        "Permissions": {
          "$ref": "#/definitions/Metadata"
        },
        "Projects": {
          "$ref": "#/definitions/StringArray"
        },
        "RegistrationDateTime": {
          "type": "string",
          "format": "date-time"
        },
        "TermsOfUseVersion": {
          "type": "string"
        },
        "UserStatus": {
          "type": "string",
          "enum": [
            "ENABLED",
            "DISABLED"
          ]
        },
        "Username": {
          "type": "string"
        }
      }
    },
    "UserInProject": {
      "type": "object",
      "required": [
        "username",
        "projectname"
      ],
      "properties": {
        "projectname": {
          "description": "Project name (Keycloak group)",
          "type": "string"
        },
        "username": {
          "description": "Username (in iRODS and keycloak)",
          "type": "string"
        }
      }
    },
    "Workflow": {
      "type": "object",
      "properties": {
        "createdBy": {
          "type": "string"
        },
        "creationTime": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "projectID": {
          "type": "string"
        },
        "projectName": {
          "type": "string"
        },
        "workflowID": {
          "type": "string"
        },
        "workflowName": {
          "type": "string"
        },
        "workflowTemplateID": {
          "type": "string"
        }
      }
    },
    "WorkflowDetail": {
      "type": "object",
      "properties": {
        "createdBy": {
          "type": "string"
        },
        "creationTime": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "inputFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputFile"
          }
        },
        "inputParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputParameter"
          }
        },
        "nodeTemplates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeTemplate"
          }
        },
        "projectID": {
          "type": "string"
        },
        "projectName": {
          "type": "string"
        },
        "projectShortName": {
          "type": "string"
        },
        "workflowID": {
          "type": "string"
        },
        "workflowName": {
          "type": "string"
        },
        "workflowTemplateID": {
          "type": "string"
        }
      }
    },
    "WorkflowExecution": {
      "type": "object",
      "properties": {
        "a4cApplicationID": {
          "type": "string"
        },
        "a4cApplicationName": {
          "type": "string"
        },
        "creationTime": {
          "type": "string"
        },
        "workflowExecutionID": {
          "type": "string"
        },
        "workflowExecutionName": {
          "type": "string"
        },
        "workflowExecutionStatus": {
          "type": "string"
        },
        "workflowID": {
          "type": "string"
        },
        "workflowName": {
          "type": "string"
        }
      }
    },
    "WorkflowExecutionDetail": {
      "type": "object",
      "required": [
        "workflowExecutionID",
        "workflowExecutionStatus"
      ],
      "properties": {
        "createdBy": {
          "type": "string"
        },
        "creationTime": {
          "type": "string"
        },
        "inputParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputParameter"
          }
        },
        "nodeTemplates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeTemplate"
          }
        },
        "outputProperties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OutputProperty"
          }
        },
        "uploadedInputFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputFile"
          }
        },
        "workflowExecutionID": {
          "description": "workflowExecution ID",
          "type": "string"
        },
        "workflowExecutionName": {
          "description": "workflowExecution ID",
          "type": "string"
        },
        "workflowExecutionStage": {
          "description": "Name of workflow",
          "type": "string"
        },
        "workflowExecutionStageStatus": {
          "description": "Status of workflow",
          "type": "string"
        },
        "workflowExecutionStatus": {
          "description": "Status of workflowExecution, ready, running, finished, failed",
          "type": "string"
        },
        "workflowID": {
          "description": "Name of application",
          "type": "string"
        }
      }
    },
    "WorkflowExecutionStepStatus": {
      "type": "object",
      "properties": {
        "activityType": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "index": {
          "type": "integer"
        },
        "location": {
          "type": "string"
        },
        "nodeName": {
          "type": "string"
        },
        "nodeType": {
          "type": "string"
        },
        "precedingSteps": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "stage": {
          "type": "integer"
        },
        "status": {
          "type": "string"
        },
        "step": {
          "type": "string"
        },
        "succeedingSteps": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "task": {
          "type": "string"
        }
      }
    },
    "WorkflowRequest": {
      "type": "object",
      "required": [
        "workflowName",
        "workflowTemplateID",
        "projectID",
        "description"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "projectID": {
          "type": "string"
        },
        "workflowID": {
          "type": "string"
        },
        "workflowName": {
          "type": "string"
        },
        "workflowTemplateID": {
          "type": "string"
        }
      }
    },
    "WorkflowTemplate": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "inputFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputFile"
          }
        },
        "inputParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputParameter"
          }
        },
        "nodeTemplates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeTemplate"
          }
        },
        "workflowTemplateID": {
          "type": "string"
        },
        "workflowTemplateName": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "APIKeyHeader": {
      "type": "apiKey",
      "name": "X-API-KEY",
      "in": "header"
    },
    "APIKeyParam": {
      "type": "apiKey",
      "name": "api_key",
      "in": "query"
    },
    "Keycloak": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://138.246.232.245:6443/auth",
      "tokenUrl": "https://138.246.232.245:6443/auth"
    }
  },
  "security": [
    {
      "APIKeyHeader": []
    },
    {
      "APIKeyParam": []
    },
    {
      "Keycloak": []
    }
  ],
  "tags": [
    {
      "description": "Actions relating to management of approval system",
      "name": "approvalSystemManagement"
    },
    {
      "description": "Actions relating to management of datasets and user and project management in the wp3 backend (iRODS)",
      "name": "dataSetManagement"
    },
    {
      "description": "Actions relating to management of Cyclops usage",
      "name": "usageManagement"
    },
    {
      "description": "Actions relating to management of users and organizations",
      "name": "userOrgManagement"
    },
    {
      "description": "Actions relating to management of Workflows and Workflow Executions",
      "name": "workflowManagement"
    },
    {
      "description": "Actions relating to clusters and templates handled by HEAppE",
      "name": "clusterInformation"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "description": "The LEXIS Portal API serves as the API proxy to all the interfaces that interact with the parts involved in LEXIS.",
    "title": "LEXIS Portal API",
    "contact": {
      "email": "diego@cyclops-labs.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "0.2.2021-12-17"
  },
  "basePath": "/api/v0.2",
  "paths": {
    "/accounting/{id}/available": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "usageManagement"
        ],
        "summary": "Credit status of the account with the provided id",
        "operationId": "getCredit",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the account to be checked",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Credit status of the account with the provided id",
            "schema": {
              "$ref": "#/definitions/CreditStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The account with the provided id doesn't exist",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Something unexpected happend, error raised",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/accounting/{id}/history": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "usageManagement"
        ],
        "summary": "Credit history of the customer with id",
        "operationId": "getHistory",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the account to get the history",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Boolean variable to control if the system consumptions have to be listed or not",
            "name": "filterSystem",
            "in": "query"
          },
          {
            "enum": [
              "credit",
              "cash"
            ],
            "type": "string",
            "description": "Medium (cash/credit) to be used as filter",
            "name": "medium",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Credit status history of the account with the provided id",
            "schema": {
              "$ref": "#/definitions/CreditHistory"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The endpoint provided doesn't exist",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Something unexpected happend, error raised",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/accounting/{id}/manage/{medium}/consume/{amount}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "usageManagement"
        ],
        "summary": "Adds a consumption to the system",
        "operationId": "addConsumption",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the account to be checked",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "format": "double",
            "description": "Amount to be decreased",
            "name": "amount",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "credit",
              "cash"
            ],
            "type": "string",
            "description": "Medium (cash/credit) to be used in the accounting",
            "name": "medium",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Credit status of the account with the provided id",
            "schema": {
              "$ref": "#/definitions/CreditStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The account with the id provided doesn't exist",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Something unexpected happend, error raised",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/accounting/{id}/manage/{medium}/decrease/{amount}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "usageManagement"
        ],
        "summary": "Insert a new reseller in the system.",
        "operationId": "decreaseCredit",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the account to be checked",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "format": "double",
            "description": "Amount to be decreased",
            "name": "amount",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "credit",
              "cash"
            ],
            "type": "string",
            "description": "Medium (cash/credit) to be used in the accounting",
            "name": "medium",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Credit status of the account with the provided id",
            "schema": {
              "$ref": "#/definitions/CreditStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The account with the id provided doesn't exist",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Something unexpected happend, error raised",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/accounting/{id}/manage/{medium}/increase/{amount}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "usageManagement"
        ],
        "summary": "Insert a new reseller in the system.",
        "operationId": "increaseCredit",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the account to be checked",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "format": "double",
            "description": "Amount to be inccreased",
            "name": "amount",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "credit",
              "cash"
            ],
            "type": "string",
            "description": "Medium (cash/credit) to be used in the accounting",
            "name": "medium",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Credit status of the account with the provided id",
            "schema": {
              "$ref": "#/definitions/CreditStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The account with the id provided doesn't exist",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Something unexpected happend, error raised",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/accounting/{id}/usage": {
      "get": {
        "description": "get account usage of project with given id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "usageManagement"
        ],
        "summary": "Get account usage for specific project",
        "operationId": "getUsage",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of project to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "datetime",
            "description": "Datetime from which to get the usage report",
            "name": "from",
            "in": "query"
          },
          {
            "type": "string",
            "format": "datetime",
            "description": "Datetime until which to get the usage report",
            "name": "to",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "usage returned",
            "schema": {
              "$ref": "#/definitions/Usage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "project not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/approval_system/approvedResourceRequest": {
      "post": {
        "description": "Creates a new HPC approved resource request in approval system",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "approvalSystemManagement"
        ],
        "summary": "Create HPC approved resource request",
        "operationId": "CreateApprovedResourceRequest",
        "parameters": [
          {
            "description": "HPC approved resource request to be created",
            "name": "approvedResourceRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemApprovedResourceRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "approved resource request created",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemCreatedResponse"
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemInvalidResponse"
            }
          },
          "404": {
            "description": "Required stuff for resource request creation hasn't been met.",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemMissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemErrorResponse"
            }
          }
        }
      }
    },
    "/approval_system/approvedResourceRequest/{HPCResourceID}": {
      "get": {
        "description": "Gets an HPC approved resource request by ID of associated HPC resource.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "approvalSystemManagement"
        ],
        "summary": "Get specific approved resources request from approval system",
        "operationId": "HPCApprovedResourceRequest",
        "parameters": [
          {
            "type": "string",
            "description": "String ID of the HPC resource whose approved resource request to be obtained.",
            "name": "HPCResourceID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "HPC approved resource request",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemApprovedResourceRequest"
            }
          },
          "404": {
            "description": "Resource request not found.",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemMissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemErrorResponse"
            }
          }
        }
      }
    },
    "/approval_system/projectApprovedResourceRequest/{AssociatedLEXISProject}": {
      "get": {
        "description": "lists all HPC approved resource requests for particular LEXIS project from approval system",
        "produces": [
          "application/json"
        ],
        "tags": [
          "approvalSystemManagement"
        ],
        "summary": "List all HPC approved resource requests for particular LEXIS project from approval system",
        "operationId": "listProjectHPCApprovedResourceRequest",
        "parameters": [
          {
            "type": "string",
            "description": "LEXIS project ID",
            "name": "AssociatedLEXISProject",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "list of HPC approved resource requests returned for particular LEXIS project",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApprovalSystemApprovedResourceRequest"
              }
            }
          },
          "404": {
            "description": "The AssociatedLEXISProject ID provided does not exist.",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemMissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemErrorResponse"
            }
          }
        }
      }
    },
    "/approval_system/projectResourceRequest/{AssociatedLEXISProject}": {
      "get": {
        "description": "lists all HPC resource requests for particular LEXIS project from approval system",
        "produces": [
          "application/json"
        ],
        "tags": [
          "approvalSystemManagement"
        ],
        "summary": "List all HPC resource requests for particular LEXIS project from approval system",
        "operationId": "listProjectHPCResourceRequest",
        "parameters": [
          {
            "type": "string",
            "description": "LEXIS project ID",
            "name": "AssociatedLEXISProject",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "list of HPC resource requests returned for particular LEXIS project",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApprovalSystemResourceRequest"
              }
            }
          },
          "404": {
            "description": "The AssociatedLEXISProject ID provided does not exist.",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemMissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemErrorResponse"
            }
          }
        }
      }
    },
    "/approval_system/resource": {
      "get": {
        "description": "lists all HPC resources from approval system",
        "produces": [
          "application/json"
        ],
        "tags": [
          "approvalSystemManagement"
        ],
        "summary": "List all HPC resources from approval system",
        "operationId": "listResources",
        "responses": {
          "200": {
            "description": "list of HPC resources returned from from approval system",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApprovalSystemResource"
              }
            }
          },
          "404": {
            "description": "List of available HPC resources not found",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemMissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemErrorResponse"
            }
          }
        }
      }
    },
    "/approval_system/resourceRequest": {
      "post": {
        "description": "Creates a new HPC resource request in approval system",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "approvalSystemManagement"
        ],
        "summary": "Create HPC resource request",
        "operationId": "CreateResourceRequest",
        "parameters": [
          {
            "description": "HPC resource request to be created",
            "name": "resourceRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemResourceRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "resource request created",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemCreatedResponse"
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemInvalidResponse"
            }
          },
          "404": {
            "description": "Required stuff for resource request creation hasn't been met.",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemMissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemErrorResponse"
            }
          }
        }
      }
    },
    "/approval_system/resourceRequest/{HPCResourceID}": {
      "get": {
        "description": "Gets a resource request by ID of associated HPC resource.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "approvalSystemManagement"
        ],
        "summary": "Get specific resource request from approval system",
        "operationId": "HPCResourceRequest",
        "parameters": [
          {
            "type": "string",
            "description": "String ID of the HPC resource whose resource request to be obtained.",
            "name": "HPCResourceID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "HPC resource request",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemResourceRequest"
            }
          },
          "404": {
            "description": "Resource request not found.",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemMissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ApprovalSystemErrorResponse"
            }
          }
        }
      }
    },
    "/authz/{userID}/add/{role}": {
      "post": {
        "description": "It adds a role to the user, when assigning user role to project, then projectShortName and projectID are required",
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "add a role to the specified user",
        "operationId": "addRole",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the user to be modified",
            "name": "userID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "role to be added",
            "name": "role",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the organization linked",
            "name": "organizationID",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the project linked",
            "name": "projectID",
            "in": "query"
          },
          {
            "type": "string",
            "description": "(REQUIRED when ProjectID is provided!) Short name of the project linked",
            "name": "projectShortName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Role added successfully",
            "schema": {
              "$ref": "#/definitions/AuthorizationResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/authz/{userID}/clear": {
      "post": {
        "description": "It clears the actual role of the user and assignes a end_user one",
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "clears the actual role of the user and assignes a end_user one",
        "operationId": "clearRole",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the user to be modified",
            "name": "userID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the organization linked",
            "name": "organizationID",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the project linked",
            "name": "projectID",
            "in": "query"
          },
          {
            "type": "string",
            "description": "(REQUIRED when ProjectID is provided!) Short name of the project linked",
            "name": "projectShortName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Role added successfully",
            "schema": {
              "$ref": "#/definitions/AuthorizationResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset": {
      "post": {
        "description": "Creates a new dataset",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Create a dataset",
        "operationId": "createDataset",
        "parameters": [
          {
            "description": "parameters",
            "name": "dataset",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "push_method",
                "access",
                "project"
              ],
              "properties": {
                "access": {
                  "$ref": "#/definitions/AccessMode"
                },
                "comp": {
                  "type": "string",
                  "enum": [
                    "yes",
                    "no"
                  ]
                },
                "compress_method": {
                  "$ref": "#/definitions/CompressMethod"
                },
                "enc": {
                  "type": "string",
                  "enum": [
                    "yes",
                    "no"
                  ]
                },
                "file": {
                  "description": "- If pushmethod is directupload, json-escaped, base64-encoded\nfile or zip (depending on compress_method).\n- If pushmethod is tus, url from the Location returned by the\nprevious tus call.\n",
                  "type": "string"
                },
                "internalID": {
                  "type": "string"
                },
                "metadata": {
                  "$ref": "#/definitions/DatasetMetadata"
                },
                "name": {
                  "description": "name of the file if compress_method is file, or if using pushmethod tus.",
                  "type": "string"
                },
                "path": {
                  "description": "path within the dataset, without a starting slash. An empty\nstring pushes to the root of the dataset (i.e. inside the\ndirectory named \u003cinternalID\u003e in the iRODS backend).\n",
                  "type": "string"
                },
                "project": {
                  "type": "string"
                },
                "push_method": {
                  "$ref": "#/definitions/PushMethod"
                },
                "zone": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "dataset modified",
            "schema": {
              "$ref": "#/definitions/DatasetItemCreatedResponse"
            }
          },
          "201": {
            "description": "dataset created",
            "schema": {
              "$ref": "#/definitions/DatasetItemCreatedResponse"
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "User not authorized to perform action",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a dataset by internalID (or subdataset by path)",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Delete Dataset",
        "operationId": "DeleteDataset",
        "parameters": [
          {
            "description": "parameter",
            "name": "json",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "internalID",
                "access",
                "project"
              ],
              "properties": {
                "access": {
                  "$ref": "#/definitions/AccessMode"
                },
                "internalID": {
                  "type": "string"
                },
                "path": {
                  "description": "path within the dataset, without a starting slash. An empty\nstring pushes to the root of the dataset (i.e. inside the\ndirectory named \u003cinternalID\u003e in the iRODS backend).\n",
                  "type": "string"
                },
                "project": {
                  "type": "string"
                },
                "zone": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The delete request was enqueued. StagingAPI and requestID can be concatenated to obtain a query URL about this request.",
            "schema": {
              "type": "object",
              "properties": {
                "internalID": {
                  "type": "string"
                },
                "request_id": {
                  "type": "string"
                },
                "stagingAPI": {
                  "type": "string"
                }
              }
            }
          },
          "204": {
            "description": "Dataset does not exist"
          },
          "400": {
            "description": "Malformed Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/cert": {
      "get": {
        "description": "download public key for WP3 APIs",
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "download public key for WP3 APIs",
        "operationId": "Certificate",
        "responses": {
          "200": {
            "description": "Certificate download in body of response",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/checkpermission": {
      "post": {
        "description": "Check if a user has permission to access a DDI location for writing",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Check if a user has permission to access a DDI location for writing",
        "operationId": "CheckPermission",
        "parameters": [
          {
            "name": "Access",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "access",
                "project"
              ],
              "properties": {
                "access": {
                  "$ref": "#/definitions/AccessMode"
                },
                "project": {
                  "type": "string",
                  "example": "wp6"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User has permission to write",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string",
                  "pattern": "200",
                  "example": "200"
                }
              }
            }
          },
          "400": {
            "description": "Malformed request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "User does not have permission",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Error accessing backend service",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/cloud/add/{param}": {
      "get": {
        "security": [],
        "description": "Check the status of a nfs export add request for the cloud",
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging"
        ],
        "summary": "Check the status of a nfs export add request for the cloud",
        "operationId": "CheckCloudNFSExportAddStatus",
        "parameters": [
          {
            "type": "string",
            "description": "queue identifier returned by a POST request at /cloud/add/{param}",
            "name": "param",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and NFS export can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "The IP is outside of the allowed range",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Keycloak": []
          }
        ],
        "description": "Request that an nfs export be created for an LRZ cloud instance",
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging"
        ],
        "summary": "Request that an nfs export be created for an LRZ cloud instance",
        "operationId": "CloudNFSExportAdd",
        "parameters": [
          {
            "type": "string",
            "description": "IP of the cloud machine",
            "name": "param",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the request for addition has been initiated. Status of the addition process can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/SteeringRequestID"
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "The IP is outside of the allowed range",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/cloud/remove/{param}": {
      "get": {
        "security": [],
        "description": "Check the status of a nfs export remove request for the cloud",
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging"
        ],
        "summary": "Check the status of a nfs export remove request for the cloud",
        "operationId": "CheckCloudNFSExportRemoveStatus",
        "parameters": [
          {
            "type": "string",
            "description": "queue identifier returned by a POST request at /cloud/remove/{param}",
            "name": "param",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Keycloak": []
          }
        ],
        "description": "Request that an nfs export be removed for an LRZ cloud instance",
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging"
        ],
        "summary": "Request that an nfs export be removed for an LRZ cloud instance",
        "operationId": "CloudNFSExportRemove",
        "parameters": [
          {
            "type": "string",
            "description": "IP of the cloud machine",
            "name": "param",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the request for removal has been initiated. Status of the removal process can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/SteeringRequestID"
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/compress/zip": {
      "post": {
        "description": "Creates a multipart zip file from a staging api source_system/source_path combination\nIf you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:\n - For public datasets: \"public/proj\"+hash+\"/\"+internalID\n - For user datasets: \"user/proj\"+hash+\"/\"+user+\"/\"+internalID\n - For project datasets: \"project/proj\"+hash+\"/\"+internalID\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "CompressAPI"
        ],
        "summary": "Creates a multipart zip file from a staging api source_system/source_path combination",
        "operationId": "CompressToZip",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path",
                "size"
              ],
              "properties": {
                "size": {
                  "type": "integer"
                },
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string",
                  "enum": [
                    "lrz_iRODS"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Request was added to the queue",
            "schema": {
              "$ref": "#/definitions/SteeringRequestID"
            }
          },
          "400": {
            "description": "Malformed Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/compress/zip/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of a transfer",
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "dataSetManagement"
        ],
        "summary": "Check the status of a transfer",
        "operationId": "CheckCompressToZipStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string",
                  "example": "Multipart zip created!"
                },
                "target_paths": {
                  "description": "Multiple paths for CompressAPI endpoints",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/data/size": {
      "post": {
        "description": "This is called when a user requests size of a dataset.\nIf you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:\n - For public datasets: \"public/proj\"+hash+\"/\"+internalID\n - For user datasets: \"user/proj\"+hash+\"/\"+user+\"/\"+internalID\n - For project datasets: \"project/proj\"+hash+\"/\"+internalID\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "This is called when a user requests size of a dataset.",
        "operationId": "Size",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "target_system",
                "target_path"
              ],
              "properties": {
                "target_path": {
                  "description": "Possible values are: \"lrz_iRODS\", \"it4i_iRODS\"\n",
                  "type": "string"
                },
                "target_system": {
                  "description": "Possible values are: \"lrz_iRODS\", \"it4i_iRODS\"\n",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "This is called when a user requests size of a dataset.",
            "schema": {
              "$ref": "#/definitions/SteeringRequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path or the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path or the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/data/size/{request_id}": {
      "get": {
        "description": "This is called when a user requests to check the status of datasize request",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "This is called when a user requests to check the status of datasize request",
        "operationId": "CheckSizeStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "$ref": "#/definitions/DataSize"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path or the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path or the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/download": {
      "post": {
        "description": "Downloads a dataset. Use the header \"Accept: application/octet-stream\"\nor \"Accept: */*\" to enable the api to provide either zip content (normal\noperation) or json (error reporting).\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "DownloadDataset",
        "operationId": "DownloadDataset",
        "parameters": [
          {
            "description": "parameters",
            "name": "json",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "internalID",
                "access",
                "project"
              ],
              "properties": {
                "access": {
                  "$ref": "#/definitions/AccessMode"
                },
                "archivetype": {
                  "$ref": "#/definitions/ArchiveType"
                },
                "internalID": {
                  "type": "string"
                },
                "path": {
                  "description": "path within the dataset, without a starting slash. An empty\nstring pushes to the root of the dataset (i.e. inside the\ndirectory named \u003cinternalID\u003e in the iRODS backend).\n",
                  "type": "string"
                },
                "project": {
                  "type": "string"
                },
                "push_method": {
                  "type": "string",
                  "enum": [
                    "directupload"
                  ]
                },
                "zone": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "zip containing dataset",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Malformed Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/duplicate": {
      "post": {
        "description": "Duplicate a dataset or subdataset (by enqueuing the request for latter processing)",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "dataSetManagement"
        ],
        "summary": "Duplicate a dataset or subdataset (by enqueuing the request for latter processing)",
        "operationId": "Duplicate",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path"
              ],
              "properties": {
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "description": "Possible values are: \"lrz_iRODS\", \"it4i_iRODS\"\n",
                  "type": "string"
                },
                "target_path": {
                  "type": "string"
                },
                "target_system": {
                  "description": "Possible values are: \"lrz_iRODS\", \"it4i_iRODS\"\n",
                  "type": "string"
                },
                "title": {
                  "description": "Title of the new dataset (if not provided, the new title will\nbe \"Copy of \" and the old dataset title).\n",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the duplication has been initiated. Status of the transfer can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/SteeringRequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and duplication can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to duplicate from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path or the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path or the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/duplicate/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of duplication. The status is given as:\n- \"Task still in the queue, or task does not exist\": wait and retry.\n- \"In progress\": wait and retry.\n- \"Task Failed, reason: \u003cspecific reason\u003e\": failure\n- \"Duplication completed\": success; target_path provides the path.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "dataSetManagement"
        ],
        "summary": "Check the status of duplication",
        "operationId": "CheckDuplicationStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                },
                "target_path": {
                  "description": "Single path for staging endpoints",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and duplication can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/encryption/compress": {
      "post": {
        "description": "Compress a dataset or subdataset (by enqueuing the request for latter processing)\nIf you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:\n - For public datasets: \"public/proj\"+hash+\"/\"+internalID\n - For user datasets: \"user/proj\"+hash+\"/\"+user+\"/\"+internalID\n - For project datasets: \"project/proj\"+hash+\"/\"+internalID\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Compress a dataset or subdataset (by enqueuing the request for latter processing)",
        "operationId": "Compress",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path"
              ],
              "properties": {
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the compression has been initiated. Status of the operation can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/SteeringRequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and compression can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to compress is not readable. User doesn't have the correct rights to read the source file.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the source path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/encryption/compress/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of a compression",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Check the status of a compression",
        "operationId": "CheckCompressionStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                },
                "target_path": {
                  "description": "Single path for encryption endpoints",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and compression can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/encryption/compress_encrypt": {
      "post": {
        "description": "Compress and encrypt a dataset or subdataset (by enqueuing the request for latter processing)\nIf you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:\n - For public datasets: \"public/proj\"+hash+\"/\"+internalID\n - For user datasets: \"user/proj\"+hash+\"/\"+user+\"/\"+internalID\n - For project datasets: \"project/proj\"+hash+\"/\"+internalID\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Compress and encrypt a dataset or subdataset (by enqueuing the request for latter processing)",
        "operationId": "CompressEncrypt",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path",
                "project"
              ],
              "properties": {
                "project": {
                  "type": "string"
                },
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the compression and encryption has been initiated. Status of the operation can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/SteeringRequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and compression with encryption can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to compress and encrypt is not readable by the user. User doesn't have the correct rights to read the source file.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the source path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/encryption/compress_encrypt/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of compression with encryption",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Check the status of compression with encryption",
        "operationId": "CheckCompressionEncryptionStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                },
                "target_path": {
                  "description": "Single path for encryption endpoints",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and compression with encryption can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/encryption/decompress": {
      "post": {
        "description": "Decompress a dataset or subdataset (by enqueuing the request for latter processing)\nIf you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:\n - For public datasets: \"public/proj\"+hash+\"/\"+internalID\n - For user datasets: \"user/proj\"+hash+\"/\"+user+\"/\"+internalID\n - For project datasets: \"project/proj\"+hash+\"/\"+internalID\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Decompress a dataset or subdataset (by enqueuing the request for latter processing)",
        "operationId": "Decompress",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path"
              ],
              "properties": {
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the decompression has been initiated. Status of the operation can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/SteeringRequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and decompression can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to compress is not readable by the user. User doesn't have the correct rights to read the source file.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/encryption/decompress/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of a decompression",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Check the status of a decompression",
        "operationId": "CheckDecompressionStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                },
                "target_path": {
                  "description": "Single path for encryption endpoints",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and decompression can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/encryption/decrypt": {
      "post": {
        "description": "Decrypt a dataset or subdataset (by enqueuing the request for latter processing)\nIf you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:\n - For public datasets: \"public/proj\"+hash+\"/\"+internalID\n - For user datasets: \"user/proj\"+hash+\"/\"+user+\"/\"+internalID\n - For project datasets: \"project/proj\"+hash+\"/\"+internalID\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Decrypt a dataset or subdataset (by enqueuing the request for latter processing)",
        "operationId": "Decrypt",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path",
                "project"
              ],
              "properties": {
                "project": {
                  "type": "string"
                },
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the decryption has been initiated. Status of the operation can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/SteeringRequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and decryption can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to decrypt from or to is not readable. User doesn't have the correct rights to read the source file.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the source path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/encryption/decrypt/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of a decryption",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Check the status of a decryption",
        "operationId": "CheckDecryptionStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                },
                "target_path": {
                  "description": "Single path for encryption endpoints",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and decryption can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/encryption/decrypt_decompress": {
      "post": {
        "description": "Decrypt and decompress a dataset or subdataset (by enqueuing the request for latter processing)\nIf you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:\n - For public datasets: \"public/proj\"+hash+\"/\"+internalID\n - For user datasets: \"user/proj\"+hash+\"/\"+user+\"/\"+internalID\n - For project datasets: \"project/proj\"+hash+\"/\"+internalID\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Decrypt and decompress a dataset or subdataset (by enqueuing the request for latter processing)",
        "operationId": "DecryptDecompress",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path",
                "project"
              ],
              "properties": {
                "project": {
                  "type": "string"
                },
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the decryption and decompression has been initiated. Status of the operation can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/SteeringRequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak decryption with decompression can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to decrypt and decompress from or to is not readable or writable by the user. User doesn't have the correct rights to read the source file.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/encryption/decrypt_decompress/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of decryption with decompression",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Check the status of decryption with decompression",
        "operationId": "CheckDecryptionDecompressionStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                },
                "target_path": {
                  "description": "Single path for encryption endpoints",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and decryption with decompression can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/encryption/encrypt": {
      "post": {
        "description": "Encrypt a dataset or subdataset (by enqueuing the request for latter processing)\nIf you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:\n - For public datasets: \"public/proj\"+hash+\"/\"+internalID\n - For user datasets: \"user/proj\"+hash+\"/\"+user+\"/\"+internalID\n - For project datasets: \"project/proj\"+hash+\"/\"+internalID\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Encrypt a dataset or subdataset (by enqueuing the request for latter processing)",
        "operationId": "Encrypt",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path",
                "project"
              ],
              "properties": {
                "project": {
                  "type": "string"
                },
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the encryption has been initiated. Status of the operation can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/SteeringRequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and encryption can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to encrypt from or to is not readable. User doesn't have the correct rights to read the source file.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the source path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the source path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/encryption/encrypt/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of a encryption",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Check the status of a encryption",
        "operationId": "CheckEncryptionStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                },
                "target_path": {
                  "description": "Single path for encryption endpoints",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and encryption can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/gridftp/gridmap": {
      "post": {
        "description": "Add a DN entry to the DDI B2STAGE GridFTP service",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "gridftp"
        ],
        "summary": "Add a DN entry to the DDI B2STAGE GridFTP service",
        "operationId": "AddGridmapEntry",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "dn"
              ],
              "properties": {
                "dn": {
                  "type": "string"
                },
                "user": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "DN added"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Remove a DN entry to the DDI B2STAGE GridFTP service",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "gridftp"
        ],
        "summary": "Remove a DN entry to the DDI B2STAGE GridFTP service",
        "operationId": "RemoveGridmapEntry",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "user": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "DN removed"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/listing": {
      "post": {
        "description": "List file contents of a dataset.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "List file contents of a dataset.",
        "operationId": "Listing",
        "parameters": [
          {
            "description": "parameter",
            "name": "json",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "internalID",
                "access",
                "project"
              ],
              "properties": {
                "access": {
                  "$ref": "#/definitions/AccessMode"
                },
                "internalID": {
                  "type": "string"
                },
                "path": {
                  "description": "path within the dataset, without a starting slash. An empty\nstring pushes to the root of the dataset (i.e. inside the\ndirectory named \u003cinternalID\u003e in the iRODS backend).\n",
                  "type": "string",
                  "default": ""
                },
                "project": {
                  "type": "string"
                },
                "recursive": {
                  "type": "boolean",
                  "default": true
                },
                "zone": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Content of the dataset",
            "schema": {
              "$ref": "#/definitions/DatasetContent"
            }
          },
          "400": {
            "description": "Malformed request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "User does not have permission",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Error accessing backend service",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/pid/assign": {
      "post": {
        "description": "This is called when a user requests PID assignment to a dataset.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "EUDATReplication"
        ],
        "summary": "This is called when a user requests PID assignment to a dataset.",
        "operationId": "PID",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path"
              ],
              "properties": {
                "parent_pid": {
                  "type": "string"
                },
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "This is called when a user requests PID assignment to a dataset.",
            "schema": {
              "$ref": "#/definitions/SteeringRequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path or the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path or the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/pid/{request_id}": {
      "get": {
        "description": "This is called when a user requests to check the status of his data replication",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "EUDATReplication"
        ],
        "summary": "This is called when a user requests to check the status of the PID assignment",
        "operationId": "CheckPIDStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "$ref": "#/definitions/DataReplication"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path or the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path or the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/replicate": {
      "post": {
        "description": "This is called when a user requests data to be replicated between different systems. The request will be added to the jobs queue.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "EUDATReplication"
        ],
        "summary": "This is called when a user requests data to be replicated between different systems. The request will be added to the jobs queue.",
        "operationId": "Replicate",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path",
                "target_system"
              ],
              "properties": {
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "description": "Possible values are: \"lrz_iRODS\", \"it4i_iRODS\"\n",
                  "type": "string"
                },
                "target_path": {
                  "type": "string"
                },
                "target_system": {
                  "description": "Possible values are: \"lrz_iRODS\", \"it4i_iRODS\"\n",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the data transfer has been initiated. Status of the transfer can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/SteeringRequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path or the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path or the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/replicate/{request_id}": {
      "get": {
        "description": "This is called when a user requests to check the status of his data replication",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "EUDATReplication"
        ],
        "summary": "This is called when a user requests to check the status of his data replication",
        "operationId": "CheckReplicateStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "$ref": "#/definitions/DataReplication"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path or the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path or the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/search/metadata": {
      "post": {
        "description": "Search for datasets based on metadata",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Search for datasets based on metadata",
        "operationId": "QueryDatasets",
        "parameters": [
          {
            "description": "metadata relating to dataset which is being searched for",
            "name": "metadataQuery",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatasetMetadataQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata for matching datasets returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DatasetMetadataQueryResponse"
              }
            }
          },
          "400": {
            "description": "Malformed Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "unexpected error connecting to further backends",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Search for datasets based on metadata, and delete them",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Search for datasets based on metadata, and delete them",
        "operationId": "DeleteDatasetByMetadata",
        "parameters": [
          {
            "description": "metadata relating to dataset which is being searched for",
            "name": "metadataQuery",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatasetMetadataQuery"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "datasets were deleted"
          },
          "400": {
            "description": "Malformed Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "The user does not have permission to remove dataset",
            "schema": {
              "type": "object",
              "required": [
                "errorString"
              ],
              "properties": {
                "errorString": {
                  "type": "string"
                },
                "permission_error": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/PermissionErrorItems0"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "unexpected error connecting to further backends",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/ssh/sshfsexport": {
      "post": {
        "description": "Export a directory of the DDI for use via SSHFS",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "sshfsexport"
        ],
        "summary": "Export a directory of the DDI for use via SSHFS",
        "operationId": "CreateSSHFSExport",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "host",
                "pubkey",
                "path"
              ],
              "properties": {
                "host": {
                  "type": "string",
                  "example": "141.40.145.102"
                },
                "path": {
                  "type": "string"
                },
                "pubkey": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Export created",
            "schema": {
              "type": "object",
              "required": [
                "user",
                "sshfs"
              ],
              "properties": {
                "sshfs": {
                  "type": "string",
                  "example": "qlecvxbndl@lexis-test.srv.lrz.de:"
                },
                "user": {
                  "type": "string",
                  "example": "qlecvxbndl"
                }
              }
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Remove an SSHFS export of a directory of the DDI",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "sshfsexport"
        ],
        "summary": "Export a directory of the DDI for use via SSHFS",
        "operationId": "DeleteSSHFSExport",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "user",
                "path"
              ],
              "properties": {
                "path": {
                  "type": "string"
                },
                "user": {
                  "type": "string",
                  "example": "qlecvxbndl"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Export removed"
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The resource (username, path or both) does not exist",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "bad gateway (backend service is down)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/staging/delete": {
      "delete": {
        "description": "This is called when a user request to delete data. This is only allowed on the staging systems.\nIf you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:\n - For public datasets: \"public/proj\"+hash+\"/\"+internalID\n - For user datasets: \"user/proj\"+hash+\"/\"+user+\"/\"+internalID\n - For project datasets: \"project/proj\"+hash+\"/\"+internalID\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "dataSetManagement"
        ],
        "summary": "This is called when a user request to delete data. This is only allowed on the staging systems.",
        "operationId": "Delete",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "target_system",
                "target_path"
              ],
              "properties": {
                "target_path": {
                  "description": "Possible values are: lrz_iRODS, lrz_staging_area, lrz_staging_area2,\nlrz_cloud, linux_cluster, superMUC, it4i_iRODS, barbora_lustre,\nsalomon_lustre, barbora_home, salomon_home, it4i_cloud, it4i_staging_area,\nsurf_iRODS, sara_staging_area.\n",
                  "type": "string"
                },
                "target_system": {
                  "description": "Possible values are: lrz_iRODS, lrz_staging_area, lrz_staging_area2,\nlrz_cloud, linux_cluster, superMUC, it4i_iRODS, barbora_lustre,\nsalomon_lustre, barbora_home, salomon_home, it4i_cloud, it4i_staging_area,\nsurf_iRODS, sara_staging_area.\n",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the data deletion has been initiated. Status of the deletion can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/SteeringRequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data deletion can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to delete from or to is not readable or writable by the user. User doesn't have the correct rights to delete the data on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/staging/delete/{request_id}": {
      "get": {
        "security": [],
        "description": "On successful query (200), the status provides information about the result:\n - \"Task still in the queue, or task does not exist\": The request was not yet enqueued. Wait for a few seconds and retry\n - \"Task Failed, reason: \u003cspecific reason\u003e\": The dataset could not be deleted\n - \"Data deleted\": The dataset was deleted successfully\n - \"In progress\": The deletion is in progress, wait a few seconds and retry.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "dataSetManagement"
        ],
        "summary": "Check the status of a delete request",
        "operationId": "CheckDeletionStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string",
                  "example": "Data deleted"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/staging/download": {
      "post": {
        "description": "Download from staging zone\nIf you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:\n - For public datasets: \"public/proj\"+hash+\"/\"+internalID\n - For user datasets: \"user/proj\"+hash+\"/\"+user+\"/\"+internalID\n - For project datasets: \"project/proj\"+hash+\"/\"+internalID\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Download from staging zone",
        "parameters": [
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path"
              ],
              "properties": {
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string",
                  "enum": [
                    "lrz_staging_area"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Malformed Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/staging/info": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "dataSetManagement"
        ],
        "summary": "Lists possible target / source systems",
        "operationId": "StagingInfo",
        "responses": {
          "200": {
            "description": "List of possible target / source",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/dataset/staging/stage": {
      "post": {
        "description": "Stage a dataset or subdataset (by enqueuing the request for latter processing).\nIf you have a tuple [project, access, internalID] and the current user, the corresponding path should be calculated by calculating the md5 hash of the project, and then:\n - For public datasets: \"public/proj\"+hash+\"/\"+internalID\n - For user datasets: \"user/proj\"+hash+\"/\"+user+\"/\"+internalID\n - For project datasets: \"project/proj\"+hash+\"/\"+internalID\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "dataSetManagement"
        ],
        "summary": "Stage a dataset or subdataset (by enqueuing the request for latter processing)",
        "operationId": "Stage",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path",
                "target_system",
                "target_path",
                "encryption",
                "compression"
              ],
              "properties": {
                "compression": {
                  "type": "string",
                  "enum": [
                    "yes",
                    "no"
                  ]
                },
                "encryption": {
                  "type": "string",
                  "enum": [
                    "yes",
                    "no"
                  ]
                },
                "heappe_url": {
                  "type": "string"
                },
                "job_id": {
                  "type": "integer"
                },
                "metadata": {
                  "$ref": "#/definitions/DatasetMetadata"
                },
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "description": "Possible values are: lrz_iRODS, lrz_staging_area, lrz_staging_area2,\nlrz_cloud, linux_cluster, superMUC, it4i_iRODS, barbora_lustre,\nsalomon_lustre, barbora_home, salomon_home, it4i_cloud, it4i_staging_area,\nsurf_iRODS, sara_staging_area.\n",
                  "type": "string"
                },
                "target_path": {
                  "type": "string"
                },
                "target_system": {
                  "description": "Possible values are: lrz_iRODS, lrz_staging_area, lrz_staging_area2,\nlrz_cloud, linux_cluster, superMUC, it4i_iRODS, barbora_lustre,\nsalomon_lustre, barbora_home, salomon_home, it4i_cloud, it4i_staging_area,\nsurf_iRODS, sara_staging_area.\n",
                  "type": "string"
                },
                "task_id": {
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the data transfer has been initiated. Status of the transfer can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/SteeringRequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path or the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path or the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/staging/stage/{request_id}": {
      "get": {
        "security": [],
        "description": "On successful query (200), the status provides information about the result:\n - \"Task still in the queue, or task does not exist\": The request was not yet enqueued. Wait for a few seconds and retry\n - \"Task Failed, reason: \u003cspecific reason\u003e\": The dataset could not be staged\n - \"Transfer completed\": The transfer succeeded, and the data is in the target_path property.\n - \"In progress\": The transfer is in progress, wait a few seconds and retry.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "dataSetManagement"
        ],
        "summary": "Check the status of a transfer",
        "operationId": "CheckStageStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string",
                  "example": "Transfer completed"
                },
                "target_path": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/upload/": {
      "post": {
        "description": "Endpoint for the Creation extension",
        "tags": [
          "dataSetManagement"
        ],
        "summary": "An empty POST request is used to create a new upload resource. The Upload-Length header indicates the size of the entire upload in bytes.",
        "parameters": [
          {
            "type": "integer",
            "description": "Must be 0 for creation extension. May be a positive number for creation-with-upload extension.",
            "name": "Content-Length",
            "in": "header"
          },
          {
            "type": "integer",
            "description": "The Upload-Length request and response header indicates the size of the entire upload in bytes. The value MUST be a non-negative integer. In the concatenation extension, the Client MUST NOT include the Upload-Length header in the final upload creation",
            "name": "Upload-Length",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Added by the Creation extension. The Upload-Metadata request and response header MUST consist of one or more comma-separated key-value pairs. The key and value MUST be separated by a space. The key MUST NOT contain spaces and commas and MUST NOT be empty. The key SHOULD be ASCII encoded and the value MUST be Base64 encoded. All keys MUST be unique. The value MAY be empty. In these cases, the space, which would normally separate the key and the value, MAY be left out. Since metadata can contain arbitrary binary values, Servers SHOULD carefully validate metadata values or sanitize them before using them as header values to avoid header smuggling.",
            "name": "Upload-Metadata",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Added by the Concatenation extension. The Upload-Concat request and response header MUST be set in both partial and final upload creation requests. It indicates whether the upload is either a partial or final upload. If the upload is a partial one, the header value MUST be partial. In the case of a final upload, its value MUST be final followed by a semicolon and a space-separated list of partial upload URLs that will be concatenated. The partial uploads URLs MAY be absolute or relative and MUST NOT contain spaces as defined in RFC 3986.",
            "name": "Upload-Concat",
            "in": "header"
          },
          {
            "enum": [
              1
            ],
            "type": "integer",
            "description": "Added by the creation-defer-length extension. The Upload-Defer-Length request and response header indicates that the size of the upload is not known currently and will be transferred later. Its value MUST be 1. If the length of an upload is not deferred, this header MUST be omitted.",
            "name": "Upload-Defer-Length",
            "in": "header"
          },
          {
            "type": "integer",
            "name": "Upload-offset",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Added by the checksum extension. The Upload-Checksum request header contains information about the checksum of the current body payload. The header MUST consist of the name of the used checksum algorithm and the Base64 encoded checksum separated by a space.",
            "name": "Upload-Checksum",
            "in": "header"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Location, Tus-Resumable, Upload-Offset, Upload-Expires"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Location": {
                "type": "string",
                "description": "Url of the created resource."
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string"
              },
              "Upload-Expires": {
                "type": "string",
                "description": "Added by the Creation With Upload Extension in combination with the expiration extension. The Upload-Expires response header indicates the time after which the unfinished upload expires. A Server MAY wish to remove incomplete uploads after a given period of time to prevent abandoned uploads from taking up extra storage. The Client SHOULD use this header to determine if an upload is still valid before attempting to resume the upload. This header MUST be included in every PATCH response if the upload is going to expire. If the expiration is known at the creation, the Upload-Expires header MUST be included in the response to the initial POST request. Its value MAY change over time. If a Client does attempt to resume an upload which has since been removed by the Server, the Server SHOULD respond with the 404 Not Found or 410 Gone status. The latter one SHOULD be used if the Server is keeping track of expired uploads. In both cases the Client SHOULD start a new upload. The value of the Upload-Expires header MUST be in RFC 7231 datetime format."
              },
              "Upload-Offset": {
                "type": "integer",
                "description": "Added by the Creation With Upload Extension. The Upload-Offset request and response header indicates a byte offset within a resource. The value MUST be a non-negative integer."
              }
            }
          },
          "400": {
            "description": "Added by the Creation With Upload Extension in combination with the checksum extension. The checksum algorithm is not supported by the server",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable, Tus-Version"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string"
              },
              "Tus-Version": {
                "type": "string",
                "description": "The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one."
              }
            }
          },
          "413": {
            "description": "If the length of the upload exceeds the maximum, which MAY be specified using the Tus-Max-Size header, the Server MUST respond with the 413 Request Entity Too Large status.",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string"
              }
            }
          },
          "415": {
            "description": "Added by the Creation With Upload Extension. Content-Type was not application/offset+octet-stream",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "460": {
            "description": "Added by the Creation With Upload Extension in combination with the checksum extension. Checksums mismatch",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "options": {
        "description": "An OPTIONS request MAY be used to gather information about the Server's current configuration. A successful response indicated by the 204 No Content or 200 OK status MUST contain the Tus-Version header. It MAY include the Tus-Extension and Tus-Max-Size headers.",
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Request to gather information about the Server's current configuration",
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Version, Tus-Resumable, Tus-Max-Size, Tus-Extension, Tus-Checksum-Algorithm"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Checksum-Algorithm": {
                "type": "string",
                "description": "Added by the checksum extension. The Tus-Checksum-Algorithm response header MUST be a comma-separated list of the checksum algorithms supported by the server."
              },
              "Tus-Extension": {
                "type": "string",
                "description": "The Tus-Extension response header MUST be a comma-separated list of the extensions supported by the Server. If no extensions are supported, the Tus-Extension header MUST be omitted."
              },
              "Tus-Max-Size": {
                "type": "integer",
                "description": "The Tus-Max-Size response header MUST be a non-negative integer indicating the maximum allowed size of an entire upload in bytes. The Server SHOULD set this header if there is a known hard limit."
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              },
              "Tus-Version": {
                "type": "string",
                "description": "The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one."
              }
            }
          },
          "204": {
            "description": "Success",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Version, Tus-Resumable, Tus-Max-Size, Tus-Extension, Tus-Checksum-Algorithm"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Checksum-Algorithm": {
                "type": "string",
                "description": "Added by the checksum extension. The Tus-Checksum-Algorithm response header MUST be a comma-separated list of the checksum algorithms supported by the server."
              },
              "Tus-Extension": {
                "type": "string",
                "description": "The Tus-Extension response header MUST be a comma-separated list of the extensions supported by the Server. If no extensions are supported, the Tus-Extension header MUST be omitted."
              },
              "Tus-Max-Size": {
                "type": "integer",
                "description": "The Tus-Max-Size response header MUST be a non-negative integer indicating the maximum allowed size of an entire upload in bytes. The Server SHOULD set this header if there is a known hard limit."
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string"
              },
              "Tus-Version": {
                "type": "string",
                "description": "The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one."
              }
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "enum": [
            "1.0.0"
          ],
          "type": "string",
          "description": "Protocol version",
          "name": "Tus-Resumable",
          "in": "header",
          "required": true
        }
      ]
    },
    "/dataset/upload/{id}": {
      "delete": {
        "description": "When receiving a DELETE request for an existing upload the Server SHOULD free associated resources and MUST respond with the 204 No Content status confirming that the upload was terminated. For all future requests to this URL, the Server SHOULD respond with the 404 Not Found or 410 Gone status.",
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Added by the Termination extension.",
        "operationId": "FilesDelete",
        "responses": {
          "204": {
            "description": "Upload was terminated",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable, Tus-Version"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              },
              "Tus-Version": {
                "type": "string",
                "description": "The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one."
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "head": {
        "description": "Used to determine the offset at which the upload should be continued.",
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Used to determine the offset at which the upload should be continued.",
        "operationId": "FilesHead",
        "responses": {
          "200": {
            "description": "Returns offset",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Upload-Offset, Upload-Length, Tus-Resumable"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Cache-Control": {
                "enum": [
                  "no-store"
                ],
                "type": "string"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              },
              "Upload-Length": {
                "type": "integer",
                "description": "If the size of the upload is known, the Server MUST include the Upload-Length header in the response."
              },
              "Upload-Offset": {
                "type": "integer",
                "description": "The Upload-Offset request and response header indicates a byte offset within a resource. The value MUST be a non-negative integer. Offset at which the upload should be continued."
              }
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "If the resource is not found, the Server SHOULD return either the 404 Not Found, 410 Gone or 403 Forbidden status without the Upload-Offset header.",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "404": {
            "description": "If the resource is not found, the Server SHOULD return either the 404 Not Found, 410 Gone or 403 Forbidden status without the Upload-Offset header.",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "410": {
            "description": "If the resource is not found, the Server SHOULD return either the 404 Not Found, 410 Gone or 403 Forbidden status without the Upload-Offset header.",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable, Tus-Version"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              },
              "Tus-Version": {
                "type": "string",
                "description": "The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one."
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "The Server SHOULD accept PATCH requests against any upload URL and apply the bytes contained in the message at the given offset specified by the Upload-Offset header. All PATCH requests MUST use Content-Type: application/offset+octet-stream, otherwise the server SHOULD return a 415 Unsupported Media Type status.",
        "consumes": [
          "application/offset+octet-stream"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Used to resume the upload",
        "operationId": "FilePatch",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "type": "integer",
            "name": "Content-Length",
            "in": "header",
            "required": true
          },
          {
            "type": "integer",
            "description": "The Upload-Offset request and response header indicates a byte offset within a resource. The value MUST be a non-negative integer.",
            "name": "Upload-offset",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Added by the checksum extension. The Upload-Checksum request header contains information about the checksum of the current body payload. The header MUST consist of the name of the used checksum algorithm and the Base64 encoded checksum separated by a space.",
            "name": "Upload-Checksum",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Upload offset was updated",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable, Upload-Offset, Upload-Expires"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              },
              "Upload-Expires": {
                "type": "string",
                "description": "Added by the expiration extension. The Upload-Expires response header indicates the time after which the unfinished upload expires. A Server MAY wish to remove incomplete uploads after a given period of time to prevent abandoned uploads from taking up extra storage. The Client SHOULD use this header to determine if an upload is still valid before attempting to resume the upload. This header MUST be included in every PATCH response if the upload is going to expire. If the expiration is known at the creation, the Upload-Expires header MUST be included in the response to the initial POST request. Its value MAY change over time. If a Client does attempt to resume an upload which has since been removed by the Server, the Server SHOULD respond with the 404 Not Found or 410 Gone status. The latter one SHOULD be used if the Server is keeping track of expired uploads. In both cases the Client SHOULD start a new upload. The value of the Upload-Expires header MUST be in RFC 7231 datetime format."
              },
              "Upload-Offset": {
                "type": "integer",
                "description": "The Upload-Offset request and response header indicates a byte offset within a resource. The value MUST be a non-negative integer."
              }
            }
          },
          "400": {
            "description": "Added by the checksum extension. The checksum algorithm is not supported by the server",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "In the concatenation extension, the Server MUST respond with the 403 Forbidden status to PATCH requests against a final upload URL and MUST NOT modify the final or its partial uploads.",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "404": {
            "description": "PATCH request against a non-existent resource",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "410": {
            "description": "PATCH request against a non-existent resource",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable, Tus-Version"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              },
              "Tus-Version": {
                "type": "string",
                "description": "The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one."
              }
            }
          },
          "415": {
            "description": "Content-Type was not application/offset+octet-stream",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "460": {
            "description": "Added by the checksum extension. Checksums mismatch",
            "headers": {
              "Access-Control-Expose-Headers": {
                "enum": [
                  "Tus-Resumable"
                ],
                "type": "string",
                "description": "Needed to make browsers accept the additional headers used by\nthe tus protocol.\n"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true
        },
        {
          "enum": [
            "1.0.0"
          ],
          "type": "string",
          "description": "Protocol version",
          "name": "Tus-Resumable",
          "in": "header",
          "required": true
        }
      ]
    },
    "/heappe/ClusterInformation/GetCommandTemplateParametersName": {
      "post": {
        "description": "Get command template parameters name",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ClusterInformation"
        ],
        "summary": "Get command template parameters name",
        "operationId": "getCommandTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "(OPTIONAL) username to use on HEAppE authz, defaults to the one retrieved via keycloak token",
            "name": "username",
            "in": "query"
          },
          {
            "type": "string",
            "description": "(REQUIRED) HEAppE Endpoint of the HPC Resource",
            "name": "endpoint",
            "in": "query"
          },
          {
            "description": "Get command template parameters name request parameters",
            "name": "request",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/HeappeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/HeappeBadRequest"
            }
          },
          "413": {
            "description": "Client Error",
            "schema": {
              "$ref": "#/definitions/HeappeError"
            }
          },
          "429": {
            "description": "Client Error",
            "schema": {
              "$ref": "#/definitions/HeappeError"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/heappe/ClusterInformation/ListAvailableClusters": {
      "get": {
        "description": "Get available clusters",
        "produces": [
          "application/json"
        ],
        "tags": [
          "ClusterInformation"
        ],
        "summary": "Get available clusters",
        "operationId": "listAvailableClusters",
        "parameters": [
          {
            "type": "string",
            "description": "(REQUIRED) HEAppE Endpoint of the HPC Resource",
            "name": "endpoint",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "list of clusters retruend",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HeappeCluster"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/HeappeBadRequest"
            }
          },
          "413": {
            "description": "Client Error",
            "schema": {
              "$ref": "#/definitions/HeappeError"
            }
          },
          "429": {
            "description": "Client Error",
            "schema": {
              "$ref": "#/definitions/HeappeError"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/hpc/resource": {
      "get": {
        "description": "lists all HPCResources",
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "list HPCResource",
        "operationId": "listHPCResources",
        "parameters": [
          {
            "enum": [
              "ALL",
              "OWN",
              "ALLOWED"
            ],
            "type": "string",
            "default": "ALL",
            "description": "organization scope switch",
            "name": "scope",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "list of HPCResources",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HPCResource"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Creates a new HPCResource",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "create HPCResource",
        "operationId": "createHPCResource",
        "parameters": [
          {
            "description": "HPCResource to be added",
            "name": "HPCResource",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/HPCResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "HPCResource created",
            "schema": {
              "$ref": "#/definitions/ItemCreatedResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "an existing item already exists",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/hpc/resource/{id}": {
      "get": {
        "description": "get HPCResource with given id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "Get specific HPCResource",
        "operationId": "getHPCResource",
        "parameters": [
          {
            "type": "string",
            "description": "Id of HPCResource to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "HPCResource returned",
            "schema": {
              "$ref": "#/definitions/HPCResource"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "HPCResource with not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "description": "Update HPCResource with given id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "Update specific HPCResource",
        "operationId": "updateHPCResource",
        "parameters": [
          {
            "type": "string",
            "description": "Id of HPCResource to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "updated HPCResource data to be added",
            "name": "HPCResource",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HPCResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated HPCResource",
            "schema": {
              "$ref": "#/definitions/HPCResource"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "HPCResource with not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete HPCResource with given id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "Delete specific HPCResource",
        "operationId": "deleteHPCResource",
        "parameters": [
          {
            "type": "string",
            "description": "Id of HPCResource to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "deleted HPCResource",
            "schema": {
              "$ref": "#/definitions/DeletedResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "HPCResource with not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/organization": {
      "get": {
        "description": "lists all organizations",
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "list organizations",
        "operationId": "listOrganizations",
        "parameters": [
          {
            "enum": [
              "ALL",
              "OWN",
              "ALLOWED"
            ],
            "type": "string",
            "default": "OWN",
            "description": "organization scope switch",
            "name": "scope",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "list of organizations",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Organization"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Creates a new organization",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "create Organization",
        "operationId": "createOrganization",
        "parameters": [
          {
            "description": "Organization to be added",
            "name": "organization",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "organization created",
            "schema": {
              "$ref": "#/definitions/ItemCreatedResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "an existing item already exists",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/organization/{id}": {
      "get": {
        "description": "get organization with given organizationId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "Get specific organization",
        "operationId": "getOrganization",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of organization to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "organization returned",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "organization with organizationId not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "description": "Update organization with given organizationId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "Update specific organization",
        "operationId": "updateOrganization",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of organization to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "updated organization data to be added",
            "name": "organization",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated organization",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "organization with organizationId not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete organization with given organizationId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "Delete specific organization",
        "operationId": "deleteOrganization",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of organization to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "deleted organization",
            "schema": {
              "$ref": "#/definitions/DeletedResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "organization with organizationId not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/organization/{id}/user/{userID}": {
      "put": {
        "description": "Adds user to organization",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "Adds user to organization",
        "operationId": "addUserToOrganization",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of organization to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of user to be added",
            "name": "userID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user updated",
            "schema": {
              "$ref": "#/definitions/OKResponse"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "organization with organizationId not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete user from organization",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "Delete user from organization",
        "operationId": "deleteUserFromOrganization",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of organization to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of user to be removed",
            "name": "userID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "deleted user from organization",
            "schema": {
              "$ref": "#/definitions/DeletedResponse"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "organization or user not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/project": {
      "get": {
        "description": "lists all projects",
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "list projects",
        "operationId": "listProjects",
        "parameters": [
          {
            "enum": [
              "ALL",
              "OWN",
              "ALLOWED"
            ],
            "type": "string",
            "default": "ALL",
            "description": "project scope switch",
            "name": "scope",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "list of projectss",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Project"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Creates a new project",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "create Project",
        "operationId": "createProject",
        "parameters": [
          {
            "description": "Project to be added",
            "name": "project",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "project created",
            "schema": {
              "$ref": "#/definitions/ItemCreatedResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "an existing item already exists",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Shortname duplicated",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/project/{id}": {
      "get": {
        "description": "get project with given id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "Get specific project",
        "operationId": "getProject",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of project to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "project returned",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "project with not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "description": "Update project with given id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "Update specific project",
        "operationId": "updateProject",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of project to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "updated project data to be added",
            "name": "project",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated project",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "project with not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Shortname duplicated",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete project with given id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "Delete specific project",
        "operationId": "deleteProject",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of project to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "deleted project",
            "schema": {
              "$ref": "#/definitions/DeletedResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "project with not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/project/{id}/user/{userID}": {
      "put": {
        "description": "Add user to project",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "Add user to project",
        "operationId": "addUserToProject",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of project to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of user to be added",
            "name": "userID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user updated",
            "schema": {
              "$ref": "#/definitions/OKResponse"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "project with not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete user from project",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "Delete user from project",
        "operationId": "deleteUserFromProject",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of project to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of user to be removed",
            "name": "userID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "deleted user from project",
            "schema": {
              "$ref": "#/definitions/DeletedResponse"
            }
          },
          "401": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Authorization error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "project or user not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "description": "lists all users (tbd - pagination?)",
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "List all users",
        "operationId": "listUsers",
        "parameters": [
          {
            "type": "string",
            "format": "email",
            "description": "email to filter when listing",
            "name": "email",
            "in": "query"
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "project uuid to filter when listing",
            "name": "project",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "users permissions switch",
            "name": "permissions",
            "in": "query"
          },
          {
            "enum": [
              "ALL",
              "OWN",
              "ALLOWED"
            ],
            "type": "string",
            "default": "OWN",
            "description": "organization scope switch",
            "name": "scope",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "list of users returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Creates a new user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "Create a user",
        "operationId": "createUser",
        "parameters": [
          {
            "description": "User to be added",
            "name": "user",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "user created",
            "schema": {
              "$ref": "#/definitions/ItemCreatedResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "an existing item already exists",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "description": "get user with given userId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "Get specific user",
        "operationId": "getUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "keycloak Id of user to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "permissions switch",
            "name": "permissions",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "user returned",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "user not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "description": "Update user with given userId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "Update specific user",
        "operationId": "updateUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of user to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "updated user data to be added",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "user not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete user with given userId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "userOrgManagement"
        ],
        "summary": "Delete specific user",
        "operationId": "deleteUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of user to be obtained",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user deleted successfully",
            "schema": {
              "$ref": "#/definitions/DeletedResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "user not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/workflow": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "workflowManagement"
        ],
        "summary": "Return list of available LEXIS Workflows",
        "operationId": "getWorkflows",
        "responses": {
          "200": {
            "description": "List of available LEXIS Workflows",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Workflow"
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid.",
            "schema": {
              "$ref": "#/definitions/AuthorizationResponse"
            }
          },
          "500": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "If successfull returns a rest response with the id of the created LEXIS workflow in data. If not successful a rest response with an error content is returned.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "workflowManagement"
        ],
        "summary": "Create a new LEXIS Workflow on the system",
        "operationId": "createWorkflow",
        "parameters": [
          {
            "description": "Create LEXIS Workflow request",
            "name": "workflowRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Workflow Created",
            "schema": {
              "$ref": "#/definitions/ItemCreatedResponse"
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/InvalidResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthorizationResponse"
            }
          },
          "409": {
            "description": "Workflow Name already exists",
            "schema": {
              "$ref": "#/definitions/ConflictResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/workflow/template": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "workflowManagement"
        ],
        "summary": "Return list of available Workflow Templates",
        "operationId": "getWorkflowTemplates",
        "responses": {
          "200": {
            "description": "List of available topologies",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WorkflowTemplate"
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid.",
            "schema": {
              "$ref": "#/definitions/AuthorizationResponse"
            }
          },
          "500": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/workflow/template/upload": {
      "post": {
        "description": "If successful returns a rest response with the id of the created LEXIS workflow template. If not successful a rest response with an error content is returned.",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "workflowManagement"
        ],
        "summary": "Create a new LEXIS Workflow Template on the system",
        "operationId": "uploadWorkflowTemplate",
        "parameters": [
          {
            "type": "file",
            "description": "workflowTemplatefile to be loaded.",
            "name": "workflowTemplateFile",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Workflow Template Uploaded Succesful",
            "schema": {
              "$ref": "#/definitions/ItemCreatedResponse"
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/InvalidResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthorizationResponse"
            }
          },
          "409": {
            "description": "Workflow Template Name already exists",
            "schema": {
              "$ref": "#/definitions/ConflictResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/workflow/template/{workflowTemplateId}": {
      "get": {
        "description": "Get the workflow template with the given workflowTemplateId",
        "produces": [
          "application/json"
        ],
        "tags": [
          "workflowManagement"
        ],
        "summary": "Return detailed info on Workflow Template give workflowTemplateID",
        "operationId": "getWorkflowTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "WorkflowTemplateId for LEXIS workflowTemplate to be obtained.",
            "name": "workflowTemplateId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow Template returned",
            "schema": {
              "$ref": "#/definitions/WorkflowTemplate"
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid.",
            "schema": {
              "$ref": "#/definitions/AuthorizationResponse"
            }
          },
          "404": {
            "description": "WorkflowTemplate with WorkflowTemplateId not found.",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/workflow/{workflowId}": {
      "get": {
        "description": "Get the workflow with the given workflowId",
        "produces": [
          "application/json"
        ],
        "tags": [
          "workflowManagement"
        ],
        "summary": "Return detailed info on LEXIS Workflow for given Workflow ID",
        "operationId": "getWorkflow",
        "parameters": [
          {
            "type": "string",
            "description": "WorkflowId for workflow to be obtained.",
            "name": "workflowId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow returned",
            "schema": {
              "$ref": "#/definitions/WorkflowDetail"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthorizationResponse"
            }
          },
          "404": {
            "description": "Workflow with WorkflowId not found.",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete an already existing workflow on the system",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "workflowManagement"
        ],
        "summary": "Delete LEXIS Workflow on the system",
        "operationId": "DeleteWorkflow",
        "parameters": [
          {
            "type": "string",
            "description": "WorkflowID for WorkflowExecution we want to cancel",
            "name": "workflowId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow Deleted",
            "schema": {
              "$ref": "#/definitions/DeletedResponse"
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/InvalidResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthorizationResponse"
            }
          },
          "404": {
            "description": "Workflow with WorkflowId not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "409": {
            "description": "Workflow does not exist",
            "schema": {
              "$ref": "#/definitions/ConflictResponse"
            }
          },
          "422": {
            "description": "Workflow currently running in LEXIS WorkflowExecution."
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/workflow/{workflowId}/execution": {
      "get": {
        "description": "List the current available LEXIS Workflow Executions for the given user.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "workflowManagement"
        ],
        "summary": "List the current available LEXIS Workflow Executions.",
        "operationId": "listWorkflowExecutions",
        "parameters": [
          {
            "type": "string",
            "description": "WorkflowId for workflowExecutions we want",
            "name": "workflowId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Number of Lexis Workflow Executions we want to return",
            "name": "reqSize",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "List of available LEXIS Workflow Executions",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WorkflowExecution"
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid.",
            "schema": {
              "$ref": "#/definitions/AuthorizationResponse"
            }
          },
          "404": {
            "description": "List Worklow Executions reuired dependencies not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Creates a LEXIS workflow execution from a LEXIS workflow.\nThe name of the resulting workflow execution will be of the form ` + "`" + `n-[projectShortName]` + "`" + ` where ` + "`" + `n` + "`" + ` is the index of the workflow execution withing it's workflow.\nThe workflow execution name takes on the suffix ` + "`" + `_cron` + "`" + ` or ` + "`" + `_scheduled` + "`" + ` where it is a cron or scheduled job according to the request parameters.\nFor example, the workflow execution ` + "`" + `2-dummyprj_cron` + "`" + ` is the third workflow execution from it's workflow under the project ` + "`" + `dummyprj` + "`" + ` and it is a cron job.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "workflowManagement"
        ],
        "summary": "TODO: Needs implemented with TOSCA 1.3 Capabilitise. Create a new LEXIS Workflow Execution by providing remaining inputs",
        "operationId": "createWorkflowExecution",
        "parameters": [
          {
            "type": "string",
            "description": "WorkflowId for WorkflowExecution to be created.",
            "name": "workflowId",
            "in": "path",
            "required": true
          },
          {
            "description": "Create LEXIS Workflow Execution request",
            "name": "workflowExecutionRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateWorkflowExecutionRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "LEXIS WorkflowExecution created and Input upload succesful",
            "schema": {
              "$ref": "#/definitions/ItemCreatedResponse"
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/InvalidResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthorizationResponse"
            }
          },
          "404": {
            "description": "Required dependencies for WorkflowExecution creation not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "409": {
            "description": "LEXIS WorkflowExecution already exists (a4cApplication already deployed).",
            "schema": {
              "$ref": "#/definitions/ConflictResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/workflow/{workflowId}/execution/{workflowExecutionId}": {
      "get": {
        "description": "Return current LEXIS Workflow Execution detail",
        "produces": [
          "application/json"
        ],
        "tags": [
          "workflowManagement"
        ],
        "summary": "Returns LEXIS Workflow Execution detail.",
        "operationId": "getWorkflowExecutionDetail",
        "parameters": [
          {
            "type": "string",
            "description": "workflowID for LEXIS Workflow Execution required",
            "name": "workflowId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "workflowExecutionId for LEXIS Workflow Execution required",
            "name": "workflowExecutionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow Execution Detail",
            "schema": {
              "$ref": "#/definitions/WorkflowExecutionDetail"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthorizationResponse"
            }
          },
          "404": {
            "description": "The application provided does not exist.",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Cancels given LEXIS Workflow Execution.",
        "tags": [
          "workflowManagement"
        ],
        "summary": "Cancel a LEXIS Workflow Execution.",
        "operationId": "cancelWorkflowExecution",
        "parameters": [
          {
            "type": "string",
            "description": "workflowID for LEXIS Workflow Execution to be canceled",
            "name": "workflowId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "WorkflowExecutionID for WorkflowExecution to be deleted",
            "name": "workflowExecutionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "LEXIS WorkflowExecution deletion",
            "schema": {
              "$ref": "#/definitions/DeletedResponse"
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/InvalidResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthorizationResponse"
            }
          },
          "404": {
            "description": "LEXIS WorkflowExecution does not exist",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/workflow/{workflowId}/execution/{workflowExecutionId}/logs": {
      "get": {
        "description": "Return logs on given LEXIS Workflow Execution",
        "produces": [
          "application/json"
        ],
        "tags": [
          "workflowManagement"
        ],
        "summary": "Returns detailed logs of LEXIS Workflow Execution",
        "operationId": "getWorkflowExecutionLogs",
        "parameters": [
          {
            "type": "string",
            "description": "workflowID for LEXIS Workflow Execution logs required",
            "name": "workflowId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "workflowExecutionId for LEXIS Workflow Execution logs required",
            "name": "workflowExecutionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Logs of given LEXIS WorkflowExecution",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Logs"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthorizationResponse"
            }
          },
          "404": {
            "description": "The WorkflowExecutionID provided does not exist.",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/workflow/{workflowId}/execution/{workflowExecutionId}/remove": {
      "post": {
        "description": "Removes given LEXIS Workflow Execution.",
        "tags": [
          "workflowManagement"
        ],
        "summary": "Delete a LEXIS Workflow Execution.",
        "operationId": "deleteWorkflowExecution",
        "parameters": [
          {
            "type": "string",
            "description": "workflowID for LEXIS Workflow Execution to be removed",
            "name": "workflowId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "WorkflowExecutionID for WorkflowExecution to be removed",
            "name": "workflowExecutionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "LEXIS WorkflowExecution succesfully deleted",
            "schema": {
              "$ref": "#/definitions/DeletedResponse"
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/InvalidResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthorizationResponse"
            }
          },
          "404": {
            "description": "LEXIS WorkflowExecution does not exist",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/workflow/{workflowId}/execution/{workflowExecutionId}/status": {
      "get": {
        "description": "Return Task Status' on given LEXIS Workflow Execution",
        "produces": [
          "application/json"
        ],
        "tags": [
          "workflowManagement"
        ],
        "summary": "Returns detailed status of Lexis Workflow Execution and its tasks.",
        "operationId": "getWorkflowExecutionStepStatus",
        "parameters": [
          {
            "type": "string",
            "description": "workflowID for LEXIS Workflow Execution status required",
            "name": "workflowId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "workflowExecutionId for LEXIS Workflow Execution status required",
            "name": "workflowExecutionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Status of given LEXIS WorkflowExecution",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WorkflowExecutionStepStatus"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthorizationResponse"
            }
          },
          "404": {
            "description": "The WorkflowExecutionID provided does not exist.",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/workflow/{workflowId}/executions": {
      "post": {
        "description": "Create a batch of LEXIS WorkflowExecutions from a LEXIS Workflow given an array of WorkflowExecution parameters",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "workflowManagement"
        ],
        "summary": "Create a batch of LEXIS Workflow Executions from a LEXIS Workflow",
        "operationId": "createWorkflowExecutions",
        "parameters": [
          {
            "type": "string",
            "description": "WorkflowId for WorkflowExecution to be created.",
            "name": "workflowId",
            "in": "path",
            "required": true
          },
          {
            "description": "Create LEXIS Workflow Execution requests",
            "name": "workflowExecutionRequests",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CreateWorkflowExecutionRequest"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "LEXIS WorkflowExecution created and Input upload successfull",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ItemCreatedResponse"
              }
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/InvalidResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/AuthorizationResponse"
            }
          },
          "404": {
            "description": "Required dependencies for WorkflowExecution creation not found",
            "schema": {
              "$ref": "#/definitions/MissingResponse"
            }
          },
          "409": {
            "description": "LEXIS WorkflowExecution already exists (a4cApplication already deployed).",
            "schema": {
              "$ref": "#/definitions/ConflictResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AccessMode": {
      "type": "string",
      "enum": [
        "public",
        "project",
        "user"
      ]
    },
    "ApprovalSystemApprovedResourceRequest": {
      "type": "object",
      "required": [
        "AssociatedLEXISProject",
        "AssociatedLEXISProjectName",
        "ProjectContactEmail",
        "PrimaryInvestigator",
        "TermsConsent",
        "AssociatedHPCProject"
      ],
      "properties": {
        "ApprovalObjections": {
          "type": "string",
          "example": "Some example objection."
        },
        "ApprovalStatus": {
          "type": "string",
          "enum": [
            "PENDING",
            "ACCEPTED",
            "REJECTED"
          ],
          "example": "ACCEPTED"
        },
        "AssociatedHPCProject": {
          "type": "string",
          "example": "DD-20-37"
        },
        "AssociatedLEXISProject": {
          "type": "string",
          "format": "uuid",
          "example": "b65ef55a-970d-4f5d-9372-5928fef770a1"
        },
        "AssociatedLEXISProjectName": {
          "type": "string",
          "example": "LEXIS Example Project"
        },
        "CloudNetworkName": {
          "type": "string",
          "format": "uri",
          "example": "https://cloud.networkname.example"
        },
        "HEAppEEndpoint": {
          "type": "string",
          "format": "uri",
          "example": "https://heappe.it4i.cz/lexis/swagger/index.html"
        },
        "HPCProvider": {
          "type": "string",
          "enum": [
            "IT4I",
            "LRZ",
            "ICHEC"
          ],
          "example": "LRZ"
        },
        "HPCResourceID": {
          "type": "string",
          "example": "DD-20-37-1"
        },
        "OpenStackEndpoint": {
          "type": "string",
          "format": "uri",
          "example": "https://openstack.msad.it4i.lexis.tech/"
        },
        "PrimaryInvestigator": {
          "type": "string",
          "format": "email",
          "example": "pi@example.cz"
        },
        "ProjectContactEmail": {
          "type": "string",
          "format": "email"
        },
        "ResourceType": {
          "type": "string",
          "example": "CLOUD"
        },
        "TermsConsent": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "ApprovalSystemCreatedResponse": {
      "type": "object",
      "properties": {
        "HPCResourceID": {
          "type": "string"
        }
      }
    },
    "ApprovalSystemErrorResponse": {
      "type": "object",
      "required": [
        "errorString"
      ],
      "properties": {
        "errorString": {
          "type": "string"
        }
      }
    },
    "ApprovalSystemInvalidResponse": {
      "type": "object",
      "properties": {
        "errorString": {
          "type": "string"
        }
      }
    },
    "ApprovalSystemMissingResponse": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        },
        "errorString": {
          "type": "string"
        }
      }
    },
    "ApprovalSystemQueue": {
      "type": "object",
      "properties": {
        "CoresPerNode": {
          "type": "integer",
          "default": 0,
          "x-nullable": true
        },
        "Description": {
          "type": "string"
        },
        "ID": {
          "type": "integer",
          "default": 0,
          "x-nullable": true
        },
        "MaxWallTime": {
          "type": "integer",
          "default": 0,
          "x-nullable": true
        },
        "Name": {
          "type": "string"
        },
        "NumberOfNodes": {
          "type": "integer",
          "default": 0,
          "x-nullable": true
        },
        "Type": {
          "type": "string"
        }
      }
    },
    "ApprovalSystemResource": {
      "type": "object",
      "properties": {
        "HostName": {
          "type": "string"
        },
        "ID": {
          "type": "integer",
          "default": 0,
          "x-nullable": true
        },
        "Name": {
          "type": "string"
        },
        "PerformanceCoefficient": {
          "type": "number",
          "format": "double",
          "default": 0,
          "x-nullable": true
        },
        "QueueList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApprovalSystemQueue"
          }
        }
      }
    },
    "ApprovalSystemResourceRequest": {
      "type": "object",
      "required": [
        "AssociatedLEXISProject",
        "AssociatedLEXISProjectName",
        "ProjectContactEmail",
        "PrimaryInvestigator",
        "TermsConsent",
        "Budget",
        "CoreHoursExpected",
        "DateEnd",
        "DateStart"
      ],
      "properties": {
        "ApprovalObjections": {
          "type": "string",
          "example": "Some example objection."
        },
        "ApprovalStatus": {
          "enum": [
            "PENDING",
            "ACCEPTED",
            "REJECTED"
          ],
          "example": "PENDING"
        },
        "AssociatedHPCProject": {
          "type": "string",
          "example": "DD-20-37"
        },
        "AssociatedLEXISProject": {
          "type": "string",
          "format": "uuid",
          "example": "b65ef55a-970d-4f5d-9372-5928fef770a1"
        },
        "AssociatedLEXISProjectName": {
          "type": "string",
          "example": "LEXIS Example Project"
        },
        "Budget": {
          "type": "number",
          "format": "double",
          "default": 0,
          "example": 100
        },
        "CloudNetworkName": {
          "type": "string",
          "format": "uri",
          "example": "https://cloud.networkname.example"
        },
        "CoreHoursExpected": {
          "type": "number",
          "format": "double",
          "default": 0,
          "example": 1000
        },
        "DateEnd": {
          "type": "string",
          "format": "date-time",
          "example": "2022-08-30T17:32:28Z"
        },
        "DateStart": {
          "type": "string",
          "format": "date-time",
          "example": "2022-07-21T17:32:28Z"
        },
        "HEAppEEndpoint": {
          "type": "string",
          "format": "uri",
          "example": "https://heappe.it4i.cz/lexis/swagger/index.html"
        },
        "HPCProvider": {
          "type": "string",
          "enum": [
            "IT4I",
            "LRZ",
            "ICHEC"
          ],
          "example": "LRZ"
        },
        "HPCResourceID": {
          "type": "string",
          "example": "DD-20-37-1"
        },
        "OpenStackEndpoint": {
          "type": "string",
          "format": "uri",
          "example": "https://openstack.msad.it4i.lexis.tech/"
        },
        "PrimaryInvestigator": {
          "type": "string",
          "format": "email",
          "example": "pi@example.cz"
        },
        "ProjectContactEmail": {
          "type": "string",
          "format": "email",
          "example": "project.contact@example.cz"
        },
        "ResourceType": {
          "type": "string",
          "example": "CLOUD"
        },
        "Resources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApprovalSystemResourceRequestItem"
          }
        },
        "TermsConsent": {
          "type": "boolean"
        }
      }
    },
    "ApprovalSystemResourceRequestItem": {
      "type": "object",
      "properties": {
        "ClusterID": {
          "type": "integer",
          "default": 0,
          "x-nullable": true
        },
        "ClusterName": {
          "type": "string"
        },
        "QueueID": {
          "type": "integer",
          "default": 0,
          "x-nullable": true
        },
        "QueueName": {
          "type": "string"
        }
      }
    },
    "ArchiveType": {
      "type": "string",
      "enum": [
        "zip",
        "file"
      ]
    },
    "AuthorizationResponse": {
      "type": "object",
      "properties": {
        "Message": {
          "type": "string"
        }
      }
    },
    "CompressMethod": {
      "type": "string",
      "enum": [
        "zip",
        "file"
      ]
    },
    "ConflictResponse": {
      "type": "object",
      "properties": {
        "Message": {
          "type": "string"
        }
      }
    },
    "CreateWorkflowExecutionRequest": {
      "type": "object",
      "properties": {
        "inputFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputFile"
          }
        },
        "inputParameters": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "isBatchJob": {
          "type": "boolean"
        },
        "isCronJob": {
          "type": "boolean"
        },
        "isScheduledJob": {
          "type": "boolean"
        },
        "workflowTemplateID": {
          "type": "string"
        }
      }
    },
    "CreditHistory": {
      "type": "object",
      "properties": {
        "AccountID": {
          "type": "string"
        },
        "Events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Event"
          }
        }
      }
    },
    "CreditStatus": {
      "type": "object",
      "properties": {
        "AccountID": {
          "type": "string"
        },
        "AvailableCash": {
          "type": "number",
          "format": "double"
        },
        "AvailableCredit": {
          "type": "number",
          "format": "double"
        },
        "LastUpdate": {
          "type": "string",
          "format": "datetime"
        }
      }
    },
    "DataReplication": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "PID": {
          "description": "EUDAT PID of the replicated data",
          "type": "string",
          "example": "1001/e4495e44-dc84-11ea-9c37-0050568f81d2"
        },
        "status": {
          "description": "Status of the data replication process",
          "type": "string",
          "example": "Replication completed"
        },
        "target_path": {
          "description": "Path to where the data are replicated",
          "type": "string",
          "example": "/IT4ILexisZone/project/proj1fc54ae5e387be0d369eddddc2010e5e/datasetL4988"
        }
      }
    },
    "DataSize": {
      "type": "object",
      "required": [
        "result"
      ],
      "properties": {
        "result": {
          "description": "Status of the datasize get process",
          "type": "string",
          "example": "Done"
        },
        "size": {
          "description": "dataset size",
          "type": "string",
          "example": "45645352354"
        },
        "smallfiles": {
          "description": "dataset files smaller than 32 MB",
          "type": "string",
          "example": "2"
        },
        "totalfiles": {
          "description": "dataset files",
          "type": "string",
          "example": "343"
        }
      }
    },
    "DatasetContent": {
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "checksum": {
          "type": "string"
        },
        "contents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DatasetContent"
          }
        },
        "create_time": {
          "type": "string"
        },
        "name": {
          "description": "filename",
          "type": "string"
        },
        "size": {
          "type": "integer"
        },
        "type": {
          "description": "directory or file",
          "type": "string"
        }
      }
    },
    "DatasetFlags": {
      "type": "object",
      "properties": {
        "compression": {
          "type": "string"
        },
        "encryption": {
          "type": "string"
        }
      }
    },
    "DatasetItemCreatedResponse": {
      "type": "object",
      "required": [
        "status",
        "internalID"
      ],
      "properties": {
        "internalID": {
          "type": "string"
        },
        "status": {
          "description": "HTTP status code",
          "type": "string",
          "pattern": "[0-9][0-9][0-9]",
          "example": "201"
        }
      }
    },
    "DatasetMetadata": {
      "type": "object",
      "properties": {
        "AlternateIdentifier": {
          "description": "DataCite AlternateIdentifier",
          "type": "array",
          "items": {
            "description": "Pairs [AlternateIdentifierType, AlternateIdentifier]",
            "type": "array",
            "maxItems": 2,
            "minItems": 2,
            "items": {
              "type": "string"
            }
          }
        },
        "CreationDate": {
          "type": "string"
        },
        "CustomMetadata": {
          "type": "object"
        },
        "CustomMetadataSchema": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "Description": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributor": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creator": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "format": {
          "type": "string"
        },
        "identifier": {
          "description": "Datacite identifier (doi), unused for now",
          "type": "string"
        },
        "owner": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "publicationYear": {
          "type": "string"
        },
        "publisher": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "relatedIdentifier": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "relatedSoftware": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resourceType": {
          "type": "string"
        },
        "resourceTypeGeneral": {
          "type": "string",
          "enum": [
            "Audiovisual",
            "Collection",
            "DataPaper",
            "Dataset",
            "Event",
            "Image",
            "InteractiveResource",
            "Model",
            "PhysicalObject",
            "Service",
            "Software",
            "Sound",
            "Text",
            "Workflow",
            "Other"
          ]
        },
        "rights": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rightsIdentifier": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rightsURI": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "scope": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "DatasetMetadataQuery": {
      "type": "object",
      "properties": {
        "AlternateIdentifier": {
          "description": "DataCite AlternateIdentifier",
          "type": "string"
        },
        "AlternateIdentifierType": {
          "description": "DataCite AlternateIdentifierType. Size must match AlternateIdentifier",
          "type": "string"
        },
        "CreationDate": {
          "type": "string"
        },
        "CustomMetadata": {
          "type": "object"
        },
        "Description": {
          "type": "string"
        },
        "EUDAT/FIO": {
          "type": "string"
        },
        "EUDAT/FIXED_CONTENT": {
          "type": "string"
        },
        "EUDAT/PARENT": {
          "type": "string"
        },
        "EUDAT/REPLICA": {
          "type": "string"
        },
        "EUDAT/ROR": {
          "type": "string"
        },
        "PID": {
          "type": "string"
        },
        "access": {
          "$ref": "#/definitions/AccessMode"
        },
        "contributor": {
          "type": "string"
        },
        "creator": {
          "type": "string"
        },
        "format": {
          "type": "string"
        },
        "identifier": {
          "description": "DataCite identifier (DOI), unused for now",
          "type": "string"
        },
        "internalID": {
          "description": "iRODS identifier",
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "publicationYear": {
          "type": "string"
        },
        "publisher": {
          "type": "string"
        },
        "relatedIdentifier": {
          "type": "string"
        },
        "relatedSoftware": {
          "type": "string"
        },
        "resourceType": {
          "type": "string"
        },
        "resourceTypeGeneral": {
          "type": "string"
        },
        "rights": {
          "type": "string"
        },
        "rightsIdentifier": {
          "type": "string"
        },
        "rightsURI": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "DatasetMetadataQueryResponse": {
      "type": "object",
      "required": [
        "location",
        "metadata",
        "flags"
      ],
      "properties": {
        "eudat": {
          "$ref": "#/definitions/Eudat"
        },
        "flags": {
          "$ref": "#/definitions/DatasetFlags"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "metadata": {
          "$ref": "#/definitions/DatasetMetadata"
        }
      }
    },
    "DeletedResponse": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        },
        "Message": {
          "type": "string"
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "required": [
        "errorString"
      ],
      "properties": {
        "errorString": {
          "type": "string"
        }
      }
    },
    "Eudat": {
      "type": "object",
      "properties": {
        "EUDAT/FIO": {
          "type": "string"
        },
        "EUDAT/FIXED_CONTENT": {
          "type": "string"
        },
        "EUDAT/PARENT": {
          "type": "string"
        },
        "EUDAT/REPLICA": {
          "type": "string"
        },
        "EUDAT/ROR": {
          "type": "string"
        },
        "PID": {
          "type": "string"
        }
      }
    },
    "Event": {
      "type": "object",
      "properties": {
        "AuthorizedBy": {
          "type": "string"
        },
        "Delta": {
          "type": "number",
          "format": "double"
        },
        "EventType": {
          "type": "string",
          "default": "Consumption",
          "enum": [
            "AuthorizedIncrease",
            "AuthorizedDecrease",
            "Consumption",
            "AutomaticCreditExpiry",
            "Refund"
          ]
        },
        "Medium": {
          "type": "string",
          "default": "CREDIT",
          "enum": [
            "CREDIT",
            "CASH"
          ]
        },
        "Timestamp": {
          "type": "string",
          "format": "datetime"
        }
      }
    },
    "HPCResource": {
      "type": "object",
      "properties": {
        "ApprovalStatus": {
          "type": "string",
          "enum": [
            "ACCEPTED",
            "REJECTED",
            "PENDING"
          ]
        },
        "AssociatedHPCProject": {
          "type": "string"
        },
        "AssociatedLEXISProject": {
          "type": "string",
          "format": "uuid"
        },
        "CloudNetworkName": {
          "type": "string"
        },
        "HEAppEEndpoint": {
          "type": "string"
        },
        "HPCProvider": {
          "type": "string",
          "enum": [
            "IT4I",
            "LRZ",
            "ICHEC"
          ]
        },
        "HPCResourceID": {
          "type": "string"
        },
        "OpenStackEndpoint": {
          "type": "string"
        },
        "OpenStackProjectID": {
          "type": "string"
        },
        "ProjectNetworkName": {
          "type": "string"
        },
        "ResourceType": {
          "type": "string",
          "enum": [
            "CLOUD",
            "HPC",
            "SMARTGW"
          ]
        },
        "TermsConsent": {
          "type": "boolean"
        }
      }
    },
    "HPCUsage": {
      "type": "object",
      "properties": {
        "AccountingData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Metadata"
          }
        },
        "HPCProjectID": {
          "type": "string"
        },
        "HPCProjectName": {
          "type": "string"
        }
      }
    },
    "HeappeBadRequest": {
      "type": "object",
      "properties": {
        "StatusCode": {
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        }
      }
    },
    "HeappeCluster": {
      "type": "object",
      "properties": {
        "Description": {
          "type": "string",
          "x-nullable": true
        },
        "ID": {
          "type": "integer",
          "format": "int64",
          "x-nullable": true
        },
        "Name": {
          "type": "string",
          "x-nullable": true
        },
        "NodeTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HeappeNodeType"
          },
          "x-nullable": true
        }
      }
    },
    "HeappeCommandTemplate": {
      "type": "object",
      "properties": {
        "Code": {
          "type": "string",
          "x-nullable": true
        },
        "Description": {
          "type": "string",
          "x-nullable": true
        },
        "ID": {
          "type": "integer",
          "format": "int64",
          "x-nullable": true
        },
        "Name": {
          "type": "string",
          "x-nullable": true
        },
        "TemplateParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HeappeTemplateParameter"
          },
          "x-nullable": true
        }
      }
    },
    "HeappeError": {
      "type": "object",
      "properties": {
        "detail": {
          "type": "string",
          "x-nullable": true
        },
        "instance": {
          "type": "string",
          "x-nullable": true
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        },
        "title": {
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "HeappeNodeType": {
      "type": "object",
      "properties": {
        "CommandTemplates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HeappeCommandTemplate"
          },
          "x-nullable": true
        },
        "CoresPerNode": {
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        },
        "Description": {
          "type": "string",
          "x-nullable": true
        },
        "ID": {
          "type": "integer",
          "format": "int64",
          "x-nullable": true
        },
        "MaxWallTime": {
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        },
        "Name": {
          "type": "string",
          "x-nullable": true
        },
        "NumberOfNodes": {
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        }
      }
    },
    "HeappeRequest": {
      "type": "object",
      "properties": {
        "CommandTemplateID": {
          "type": "integer",
          "format": "int64"
        },
        "SessionCode": {
          "type": "string",
          "x-nullable": true
        },
        "UserScriptPath": {
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "HeappeTemplateParameter": {
      "type": "object",
      "properties": {
        "Description": {
          "type": "string",
          "x-nullable": true
        },
        "Identifier": {
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "InputFile": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "inputFileName": {
          "type": "string"
        },
        "inputFileType": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "InputParameter": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "inputParamDefaultValue": {
          "type": "string"
        },
        "inputParamName": {
          "type": "string"
        },
        "inputParamRequired": {
          "type": "boolean"
        },
        "inputParamType": {
          "type": "string"
        },
        "inputParamValue": {
          "type": "object"
        },
        "isDataset": {
          "type": "boolean"
        },
        "isDatasetId": {
          "type": "boolean"
        },
        "isDatasetPath": {
          "type": "boolean"
        },
        "task": {
          "type": "string"
        }
      }
    },
    "InvalidResponse": {
      "type": "object",
      "properties": {
        "Message": {
          "type": "string"
        }
      }
    },
    "ItemCreatedResponse": {
      "type": "object",
      "required": [
        "Link"
      ],
      "properties": {
        "ID": {
          "type": "string"
        },
        "Link": {
          "type": "string"
        }
      }
    },
    "Location": {
      "type": "object",
      "required": [
        "access",
        "project",
        "internalID",
        "zone"
      ],
      "properties": {
        "access": {
          "$ref": "#/definitions/AccessMode"
        },
        "internalID": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "zone": {
          "type": "string",
          "example": "LRZLexisZone"
        }
      }
    },
    "Logs": {
      "type": "object",
      "properties": {
        "content": {
          "description": "Content of log message",
          "type": "string"
        },
        "deploymentID": {
          "description": "Deployment ID",
          "type": "string"
        },
        "deploymentPaaSID": {
          "description": "deployment PaaS ID",
          "type": "string"
        },
        "executionID": {
          "description": "execution ID",
          "type": "string"
        },
        "instanceID": {
          "description": "Instance ID",
          "type": "string"
        },
        "interfaceName": {
          "description": "Interface Name",
          "type": "string"
        },
        "level": {
          "description": "Level",
          "type": "string"
        },
        "nodeID": {
          "description": "Node ID",
          "type": "string"
        },
        "operationName": {
          "description": "Operation Name",
          "type": "string"
        },
        "timestamp": {
          "description": "Timestamp of log",
          "type": "string"
        },
        "workflowExecutionStage": {
          "description": "WorkflowExecution Stage",
          "type": "string"
        }
      }
    },
    "Metadata": {
      "type": "object",
      "x-go-type": {
        "import": {
          "package": "gitlab.com/cyclops-utilities/datamodels"
        },
        "type": "JSONdb"
      }
    },
    "MissingResponse": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        },
        "Message": {
          "type": "string"
        }
      }
    },
    "NodeTemplate": {
      "type": "object",
      "properties": {
        "nodeName": {
          "type": "string"
        },
        "nodeType": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        }
      }
    },
    "OKResponse": {
      "type": "object",
      "properties": {
        "Message": {
          "type": "string"
        }
      }
    },
    "Organization": {
      "type": "object",
      "properties": {
        "CreatedBy": {
          "type": "string",
          "format": "uuid"
        },
        "CreationDate": {
          "type": "string",
          "format": "date-time"
        },
        "FormalName": {
          "type": "string"
        },
        "ID": {
          "type": "string",
          "format": "uuid"
        },
        "OrganizationEmailAddress": {
          "type": "string",
          "format": "email"
        },
        "OrganizationStatus": {
          "type": "string",
          "enum": [
            "PENDING_APPROVAL",
            "APPROVED",
            "DISABLED",
            "TERMINATED"
          ]
        },
        "PrimaryTelephoneNumber": {
          "type": "string",
          "format": "telephone-number"
        },
        "RegisteredAddress1": {
          "type": "string"
        },
        "RegisteredAddress2": {
          "type": "string"
        },
        "RegisteredAddress3": {
          "type": "string"
        },
        "RegisteredCountry": {
          "type": "string",
          "format": "country"
        },
        "VATRegistrationNumber": {
          "type": "string"
        },
        "Website": {
          "type": "string",
          "format": "url"
        }
      }
    },
    "OutputProperty": {
      "type": "object",
      "properties": {
        "attributeName": {
          "type": "string"
        },
        "attributeValue": {
          "type": "string"
        },
        "nodeName": {
          "type": "string"
        }
      }
    },
    "PermissionErrorItems0": {
      "type": "object",
      "required": [
        "internalID"
      ],
      "properties": {
        "internalID": {
          "type": "string"
        }
      }
    },
    "Project": {
      "type": "object",
      "properties": {
        "AllowedOrganizations": {
          "$ref": "#/definitions/StringArray"
        },
        "LinkedOrganization": {
          "type": "string",
          "format": "uuid"
        },
        "NormCoreHours": {
          "type": "integer",
          "default": 0,
          "x-nullable": true
        },
        "ProjectContactEmail": {
          "type": "string",
          "format": "email"
        },
        "ProjectContactPerson": {
          "type": "string",
          "format": "uuid"
        },
        "ProjectCreatedBy": {
          "type": "string",
          "format": "uuid"
        },
        "ProjectCreationTime": {
          "type": "string",
          "format": "date-time"
        },
        "ProjectDescription": {
          "type": "string"
        },
        "ProjectDomain": {
          "type": "string"
        },
        "ProjectID": {
          "type": "string",
          "format": "uuid"
        },
        "ProjectMaxPrice": {
          "type": "number",
          "format": "double",
          "default": 0,
          "x-nullable": true
        },
        "ProjectName": {
          "type": "string"
        },
        "ProjectShortName": {
          "type": "string"
        },
        "ProjectStartDate": {
          "type": "string",
          "format": "date-time"
        },
        "ProjectStatus": {
          "type": "string",
          "enum": [
            "PENDING",
            "ACTIVE",
            "DISABLED",
            "TERMINATED"
          ]
        },
        "ProjectTerminationDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "PushMethod": {
      "type": "string",
      "enum": [
        "empty",
        "directupload",
        "tus"
      ]
    },
    "SteeringRequestID": {
      "type": "object",
      "required": [
        "request_id"
      ],
      "properties": {
        "request_id": {
          "description": "UUID",
          "type": "string",
          "format": "uuid",
          "example": "31279ed6-e7b1-4c9f-ab26-206c863a2264"
        }
      }
    },
    "StringArray": {
      "x-go-type": {
        "import": {
          "package": "github.com/lib/pq"
        },
        "type": "StringArray"
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "Usage": {
      "type": "object",
      "properties": {
        "HPCProjects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HPCUsage"
          }
        },
        "ProjectID": {
          "type": "string",
          "format": "uuid"
        },
        "ProjectName": {
          "type": "string"
        },
        "TimeFrom": {
          "type": "string",
          "format": "datetime"
        },
        "TimeTo": {
          "type": "string",
          "format": "datetime"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "AgreeToUseOfCookies": {
          "type": "boolean"
        },
        "AgreedToTermsOfUse": {
          "type": "boolean"
        },
        "AllowedOrganizations": {
          "$ref": "#/definitions/StringArray"
        },
        "DateOfAgreementToTermsOfUse": {
          "type": "string",
          "format": "date-time"
        },
        "DateOfAgreementToUseOfCookies": {
          "type": "string",
          "format": "date-time"
        },
        "EmailAddress": {
          "type": "string",
          "format": "email"
        },
        "FirstName": {
          "type": "string"
        },
        "ID": {
          "description": "This is an id generated by keycloak",
          "type": "string",
          "format": "uuid"
        },
        "LastName": {
          "type": "string"
        },
        "OrganizationID": {
          "type": "string",
          "format": "uuid"
        },
        "PGPKeyID": {
          "description": "This is an id for a PGP Key - what it means is still tbd",
          "type": "string"
        },
        "Permissions": {
          "$ref": "#/definitions/Metadata"
        },
        "Projects": {
          "$ref": "#/definitions/StringArray"
        },
        "RegistrationDateTime": {
          "type": "string",
          "format": "date-time"
        },
        "TermsOfUseVersion": {
          "type": "string"
        },
        "UserStatus": {
          "type": "string",
          "enum": [
            "ENABLED",
            "DISABLED"
          ]
        },
        "Username": {
          "type": "string"
        }
      }
    },
    "UserInProject": {
      "type": "object",
      "required": [
        "username",
        "projectname"
      ],
      "properties": {
        "projectname": {
          "description": "Project name (Keycloak group)",
          "type": "string"
        },
        "username": {
          "description": "Username (in iRODS and keycloak)",
          "type": "string"
        }
      }
    },
    "Workflow": {
      "type": "object",
      "properties": {
        "createdBy": {
          "type": "string"
        },
        "creationTime": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "projectID": {
          "type": "string"
        },
        "projectName": {
          "type": "string"
        },
        "workflowID": {
          "type": "string"
        },
        "workflowName": {
          "type": "string"
        },
        "workflowTemplateID": {
          "type": "string"
        }
      }
    },
    "WorkflowDetail": {
      "type": "object",
      "properties": {
        "createdBy": {
          "type": "string"
        },
        "creationTime": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "inputFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputFile"
          }
        },
        "inputParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputParameter"
          }
        },
        "nodeTemplates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeTemplate"
          }
        },
        "projectID": {
          "type": "string"
        },
        "projectName": {
          "type": "string"
        },
        "projectShortName": {
          "type": "string"
        },
        "workflowID": {
          "type": "string"
        },
        "workflowName": {
          "type": "string"
        },
        "workflowTemplateID": {
          "type": "string"
        }
      }
    },
    "WorkflowExecution": {
      "type": "object",
      "properties": {
        "a4cApplicationID": {
          "type": "string"
        },
        "a4cApplicationName": {
          "type": "string"
        },
        "creationTime": {
          "type": "string"
        },
        "workflowExecutionID": {
          "type": "string"
        },
        "workflowExecutionName": {
          "type": "string"
        },
        "workflowExecutionStatus": {
          "type": "string"
        },
        "workflowID": {
          "type": "string"
        },
        "workflowName": {
          "type": "string"
        }
      }
    },
    "WorkflowExecutionDetail": {
      "type": "object",
      "required": [
        "workflowExecutionID",
        "workflowExecutionStatus"
      ],
      "properties": {
        "createdBy": {
          "type": "string"
        },
        "creationTime": {
          "type": "string"
        },
        "inputParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputParameter"
          }
        },
        "nodeTemplates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeTemplate"
          }
        },
        "outputProperties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OutputProperty"
          }
        },
        "uploadedInputFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputFile"
          }
        },
        "workflowExecutionID": {
          "description": "workflowExecution ID",
          "type": "string"
        },
        "workflowExecutionName": {
          "description": "workflowExecution ID",
          "type": "string"
        },
        "workflowExecutionStage": {
          "description": "Name of workflow",
          "type": "string"
        },
        "workflowExecutionStageStatus": {
          "description": "Status of workflow",
          "type": "string"
        },
        "workflowExecutionStatus": {
          "description": "Status of workflowExecution, ready, running, finished, failed",
          "type": "string"
        },
        "workflowID": {
          "description": "Name of application",
          "type": "string"
        }
      }
    },
    "WorkflowExecutionStepStatus": {
      "type": "object",
      "properties": {
        "activityType": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "index": {
          "type": "integer"
        },
        "location": {
          "type": "string"
        },
        "nodeName": {
          "type": "string"
        },
        "nodeType": {
          "type": "string"
        },
        "precedingSteps": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "stage": {
          "type": "integer"
        },
        "status": {
          "type": "string"
        },
        "step": {
          "type": "string"
        },
        "succeedingSteps": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "task": {
          "type": "string"
        }
      }
    },
    "WorkflowRequest": {
      "type": "object",
      "required": [
        "workflowName",
        "workflowTemplateID",
        "projectID",
        "description"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "projectID": {
          "type": "string"
        },
        "workflowID": {
          "type": "string"
        },
        "workflowName": {
          "type": "string"
        },
        "workflowTemplateID": {
          "type": "string"
        }
      }
    },
    "WorkflowTemplate": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "inputFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputFile"
          }
        },
        "inputParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputParameter"
          }
        },
        "nodeTemplates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeTemplate"
          }
        },
        "workflowTemplateID": {
          "type": "string"
        },
        "workflowTemplateName": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "APIKeyHeader": {
      "type": "apiKey",
      "name": "X-API-KEY",
      "in": "header"
    },
    "APIKeyParam": {
      "type": "apiKey",
      "name": "api_key",
      "in": "query"
    },
    "Keycloak": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://138.246.232.245:6443/auth",
      "tokenUrl": "https://138.246.232.245:6443/auth"
    }
  },
  "security": [
    {
      "APIKeyHeader": []
    },
    {
      "APIKeyParam": []
    },
    {
      "Keycloak": []
    }
  ],
  "tags": [
    {
      "description": "Actions relating to management of approval system",
      "name": "approvalSystemManagement"
    },
    {
      "description": "Actions relating to management of datasets and user and project management in the wp3 backend (iRODS)",
      "name": "dataSetManagement"
    },
    {
      "description": "Actions relating to management of Cyclops usage",
      "name": "usageManagement"
    },
    {
      "description": "Actions relating to management of users and organizations",
      "name": "userOrgManagement"
    },
    {
      "description": "Actions relating to management of Workflows and Workflow Executions",
      "name": "workflowManagement"
    },
    {
      "description": "Actions relating to clusters and templates handled by HEAppE",
      "name": "clusterInformation"
    }
  ]
}`))
}
